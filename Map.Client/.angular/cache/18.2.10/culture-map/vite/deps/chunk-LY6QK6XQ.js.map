{
  "version": 3,
  "sources": ["../../../../../../node_modules/@esri/calcite-components/dist/components/focusTrapComponent.js"],
  "sourcesContent": ["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { h as isFocusable, j as tabbable, k as focusable, l as isTabbable, m as getTabIndex, e as focusElement, n as tabbableOptions } from './dom.js';\nimport { f as focusTrapStack } from './config.js';\n\n/*!\n* focus-trap 7.6.0\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\n\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n    return true; // next\n  });\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || (\n      // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  var _getActiveElement = function getActiveElement(el) {\n    var activeElement = el.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {\n      return _getActiveElement(activeElement.shadowRoot);\n    }\n    return activeElement;\n  };\n  var _tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === _getActiveElement(document)) {\n      return;\n    }\n    if (!node || !node.focus) {\n      _tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref2) {\n    var target = _ref2.target,\n      event = _ref2.event,\n      _ref2$isBackward = _ref2.isBackward,\n      isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var firstTabbableNode = _ref3.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref4) {\n          var lastTabbableNode = _ref4.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        _tryFocus(nextNode);\n      } else {\n        _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      _tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n  var checkTabKey = function checkTabKey(event) {\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates\n  var checkEscapeKey = function checkEscapeKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      _tryFocus(getInitialFocusNode());\n    }) : _tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkTabKey, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkTabKey, true);\n    doc.removeEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      _tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 || onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 || onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 || onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 || onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 || onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 || onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\n/**\n * Helper to set up the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param options\n */\nfunction connectFocusTrap(component, options) {\n  const {\n    el\n  } = component;\n  const focusTrapNode = options?.focusTrapEl || el;\n  if (!focusTrapNode) {\n    return;\n  }\n  const focusTrapOptions = {\n    clickOutsideDeactivates: true,\n    escapeDeactivates: false,\n    fallbackFocus: focusTrapNode,\n    setReturnFocus: el => {\n      focusElement(el);\n      return false;\n    },\n    ...options?.focusTrapOptions,\n    // the following options are not overridable\n    document: el.ownerDocument,\n    tabbableOptions,\n    trapStack: focusTrapStack\n  };\n  component.focusTrap = createFocusTrap(focusTrapNode, focusTrapOptions);\n}\n/**\n * Helper to activate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap activate options.\n */\nfunction activateFocusTrap(component, options) {\n  if (!component.focusTrapDisabled) {\n    component.focusTrap?.activate(options);\n  }\n}\n/**\n * Helper to deactivate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap deactivate options.\n */\nfunction deactivateFocusTrap(component, options) {\n  component.focusTrap?.deactivate(options);\n}\n/**\n * Helper to update the element(s) that are used within the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @example\n * const modal = document.querySelector(\"calcite-modal\");\n * const input = document.createElement(\"calcite-input\");\n * content.appendChild(input);\n * await input.componentOnReady();\n * await modal.updateFocusTrapElements();\n * requestAnimationFrame(() => input.setFocus());\n */\nfunction updateFocusTrapElements(component) {\n  component.focusTrap?.updateContainerElements(component.el);\n}\nexport { activateFocusTrap as a, connectFocusTrap as c, deactivateFocusTrap as d, updateFocusTrapElements as u };\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAaA,SAAS,gBAAgB,GAAG,GAAG,GAAG;AAChC,UAAQ,IAAI,eAAe,CAAC,MAAM,IAAI,OAAO,eAAe,GAAG,GAAG;AAAA,IAChE,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,cAAc;AAAA,IACd,UAAU;AAAA,EACZ,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG;AACjB;AACA,SAAS,QAAQ,GAAG,GAAG;AACrB,MAAI,IAAI,OAAO,KAAK,CAAC;AACrB,MAAI,OAAO,uBAAuB;AAChC,QAAI,IAAI,OAAO,sBAAsB,CAAC;AACtC,UAAM,IAAI,EAAE,OAAO,SAAUA,IAAG;AAC9B,aAAO,OAAO,yBAAyB,GAAGA,EAAC,EAAE;AAAA,IAC/C,CAAC,IAAI,EAAE,KAAK,MAAM,GAAG,CAAC;AAAA,EACxB;AACA,SAAO;AACT;AACA,SAAS,eAAe,GAAG;AACzB,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,QAAI,IAAI,QAAQ,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC;AAC/C,QAAI,IAAI,QAAQ,OAAO,CAAC,GAAG,IAAE,EAAE,QAAQ,SAAUA,IAAG;AAClD,sBAAgB,GAAGA,IAAG,EAAEA,EAAC,CAAC;AAAA,IAC5B,CAAC,IAAI,OAAO,4BAA4B,OAAO,iBAAiB,GAAG,OAAO,0BAA0B,CAAC,CAAC,IAAI,QAAQ,OAAO,CAAC,CAAC,EAAE,QAAQ,SAAUA,IAAG;AAChJ,aAAO,eAAe,GAAGA,IAAG,OAAO,yBAAyB,GAAGA,EAAC,CAAC;AAAA,IACnE,CAAC;AAAA,EACH;AACA,SAAO;AACT;AACA,SAAS,aAAa,GAAG,GAAG;AAC1B,MAAI,YAAY,OAAO,KAAK,CAAC,EAAG,QAAO;AACvC,MAAI,IAAI,EAAE,OAAO,WAAW;AAC5B,MAAI,WAAW,GAAG;AAChB,QAAI,IAAI,EAAE,KAAK,GAAG,KAAK,SAAS;AAChC,QAAI,YAAY,OAAO,EAAG,QAAO;AACjC,UAAM,IAAI,UAAU,8CAA8C;AAAA,EACpE;AACA,UAAQ,aAAa,IAAI,SAAS,QAAQ,CAAC;AAC7C;AACA,SAAS,eAAe,GAAG;AACzB,MAAI,IAAI,aAAa,GAAG,QAAQ;AAChC,SAAO,YAAY,OAAO,IAAI,IAAI,IAAI;AACxC;AACA,IAAI,mBAAmB;AAAA,EACrB,cAAc,SAAS,aAAa,WAAW,MAAM;AACnD,QAAI,UAAU,SAAS,GAAG;AACxB,UAAI,aAAa,UAAU,UAAU,SAAS,CAAC;AAC/C,UAAI,eAAe,MAAM;AACvB,mBAAW,MAAM;AAAA,MACnB;AAAA,IACF;AACA,QAAI,YAAY,UAAU,QAAQ,IAAI;AACtC,QAAI,cAAc,IAAI;AACpB,gBAAU,KAAK,IAAI;AAAA,IACrB,OAAO;AAEL,gBAAU,OAAO,WAAW,CAAC;AAC7B,gBAAU,KAAK,IAAI;AAAA,IACrB;AAAA,EACF;AAAA,EACA,gBAAgB,SAAS,eAAe,WAAW,MAAM;AACvD,QAAI,YAAY,UAAU,QAAQ,IAAI;AACtC,QAAI,cAAc,IAAI;AACpB,gBAAU,OAAO,WAAW,CAAC;AAAA,IAC/B;AACA,QAAI,UAAU,SAAS,GAAG;AACxB,gBAAU,UAAU,SAAS,CAAC,EAAE,QAAQ;AAAA,IAC1C;AAAA,EACF;AACF;AACA,IAAI,oBAAoB,SAASC,mBAAkB,MAAM;AACvD,SAAO,KAAK,WAAW,KAAK,QAAQ,YAAY,MAAM,WAAW,OAAO,KAAK,WAAW;AAC1F;AACA,IAAI,gBAAgB,SAASC,eAAc,GAAG;AAC5C,UAAQ,MAAM,QAAQ,MAAM,SAAS,SAAS,EAAE,SAAS,aAAa,MAAM,QAAQ,MAAM,SAAS,SAAS,EAAE,SAAS,UAAU,MAAM,QAAQ,MAAM,SAAS,SAAS,EAAE,aAAa;AACxL;AACA,IAAI,aAAa,SAASC,YAAW,GAAG;AACtC,UAAQ,MAAM,QAAQ,MAAM,SAAS,SAAS,EAAE,SAAS,UAAU,MAAM,QAAQ,MAAM,SAAS,SAAS,EAAE,aAAa;AAC1H;AAGA,IAAI,eAAe,SAASC,cAAa,GAAG;AAC1C,SAAO,WAAW,CAAC,KAAK,CAAC,EAAE;AAC7B;AAGA,IAAI,gBAAgB,SAASC,eAAc,GAAG;AAC5C,SAAO,WAAW,CAAC,KAAK,EAAE;AAC5B;AACA,IAAI,QAAQ,SAASC,OAAM,IAAI;AAC7B,SAAO,WAAW,IAAI,CAAC;AACzB;AAIA,IAAI,YAAY,SAASC,WAAU,KAAK,IAAI;AAC1C,MAAI,MAAM;AACV,MAAI,MAAM,SAAU,OAAO,GAAG;AAC5B,QAAI,GAAG,KAAK,GAAG;AACb,YAAM;AACN,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT,CAAC;AACD,SAAO;AACT;AASA,IAAI,iBAAiB,SAASC,gBAAe,OAAO;AAClD,WAAS,OAAO,UAAU,QAAQ,SAAS,IAAI,MAAM,OAAO,IAAI,OAAO,IAAI,CAAC,GAAG,OAAO,GAAG,OAAO,MAAM,QAAQ;AAC5G,WAAO,OAAO,CAAC,IAAI,UAAU,IAAI;AAAA,EACnC;AACA,SAAO,OAAO,UAAU,aAAa,MAAM,MAAM,QAAQ,MAAM,IAAI;AACrE;AACA,IAAI,kBAAkB,SAASC,iBAAgB,OAAO;AAQpD,SAAO,MAAM,OAAO,cAAc,OAAO,MAAM,iBAAiB,aAAa,MAAM,aAAa,EAAE,CAAC,IAAI,MAAM;AAC/G;AAIA,IAAI,oBAAoB,CAAC;AACzB,IAAI,kBAAkB,SAASC,iBAAgB,UAAU,aAAa;AAGpE,MAAI,OAAO,gBAAgB,QAAQ,gBAAgB,SAAS,SAAS,YAAY,aAAa;AAC9F,MAAI,aAAa,gBAAgB,QAAQ,gBAAgB,SAAS,SAAS,YAAY,cAAc;AACrG,MAAI,SAAS,eAAe;AAAA,IAC1B,yBAAyB;AAAA,IACzB,mBAAmB;AAAA,IACnB,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,EACF,GAAG,WAAW;AACd,MAAI,QAAQ;AAAA;AAAA;AAAA,IAGV,YAAY,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBb,iBAAiB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOlB,gBAAgB,CAAC;AAAA,IACjB,6BAA6B;AAAA,IAC7B,yBAAyB;AAAA,IACzB,QAAQ;AAAA,IACR,QAAQ;AAAA;AAAA;AAAA,IAGR,wBAAwB;AAAA;AAAA,IAExB,gBAAgB;AAAA,EAClB;AACA,MAAI;AAUJ,MAAI,YAAY,SAASC,WAAU,uBAAuB,YAAY,kBAAkB;AACtF,WAAO,yBAAyB,sBAAsB,UAAU,MAAM,SAAY,sBAAsB,UAAU,IAAI,OAAO,oBAAoB,UAAU;AAAA,EAC7J;AAYA,MAAI,qBAAqB,SAASC,oBAAmB,SAAS,OAAO;AACnE,QAAI,eAAe,QAAQ,UAAU,QAAQ,UAAU,SAAS,SAAS,MAAM,kBAAkB,aAAa,MAAM,aAAa,IAAI;AAIrI,WAAO,MAAM,gBAAgB,UAAU,SAAU,MAAM;AACrD,UAAI,YAAY,KAAK,WACnB,gBAAgB,KAAK;AACvB,aAAO,UAAU,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA,OAKjC,iBAAiB,QAAQ,iBAAiB,SAAS,SAAS,aAAa,SAAS,SAAS,MAAM,cAAc,KAAK,SAAU,MAAM;AAClI,eAAO,SAAS;AAAA,MAClB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAeA,MAAI,mBAAmB,SAASC,kBAAiB,YAAY;AAC3D,QAAI,cAAc,OAAO,UAAU;AACnC,QAAI,OAAO,gBAAgB,YAAY;AACrC,eAAS,QAAQ,UAAU,QAAQ,SAAS,IAAI,MAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,GAAG,QAAQ,GAAG,QAAQ,OAAO,SAAS;AACnH,eAAO,QAAQ,CAAC,IAAI,UAAU,KAAK;AAAA,MACrC;AACA,oBAAc,YAAY,MAAM,QAAQ,MAAM;AAAA,IAChD;AACA,QAAI,gBAAgB,MAAM;AACxB,oBAAc;AAAA,IAChB;AACA,QAAI,CAAC,aAAa;AAChB,UAAI,gBAAgB,UAAa,gBAAgB,OAAO;AACtD,eAAO;AAAA,MACT;AAGA,YAAM,IAAI,MAAM,IAAI,OAAO,YAAY,8DAA8D,CAAC;AAAA,IACxG;AACA,QAAI,OAAO;AAEX,QAAI,OAAO,gBAAgB,UAAU;AACnC,aAAO,IAAI,cAAc,WAAW;AACpC,UAAI,CAAC,MAAM;AACT,cAAM,IAAI,MAAM,IAAI,OAAO,YAAY,uCAAuC,CAAC;AAAA,MACjF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACA,MAAI,sBAAsB,SAASC,uBAAsB;AACvD,QAAI,OAAO,iBAAiB,cAAc;AAG1C,QAAI,SAAS,OAAO;AAClB,aAAO;AAAA,IACT;AACA,QAAI,SAAS,UAAa,CAAC,YAAY,MAAM,OAAO,eAAe,GAAG;AAEpE,UAAI,mBAAmB,IAAI,aAAa,KAAK,GAAG;AAC9C,eAAO,IAAI;AAAA,MACb,OAAO;AACL,YAAI,qBAAqB,MAAM,eAAe,CAAC;AAC/C,YAAI,oBAAoB,sBAAsB,mBAAmB;AAGjE,eAAO,qBAAqB,iBAAiB,eAAe;AAAA,MAC9D;AAAA,IACF;AACA,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,MAAM,8DAA8D;AAAA,IAChF;AACA,WAAO;AAAA,EACT;AACA,MAAI,sBAAsB,SAASC,uBAAsB;AACvD,UAAM,kBAAkB,MAAM,WAAW,IAAI,SAAU,WAAW;AAChE,UAAI,gBAAgB,SAAS,WAAW,OAAO,eAAe;AAK9D,UAAI,iBAAiB,UAAU,WAAW,OAAO,eAAe;AAChE,UAAI,oBAAoB,cAAc,SAAS,IAAI,cAAc,CAAC,IAAI;AACtE,UAAI,mBAAmB,cAAc,SAAS,IAAI,cAAc,cAAc,SAAS,CAAC,IAAI;AAC5F,UAAI,uBAAuB,eAAe,KAAK,SAAU,MAAM;AAC7D,eAAO,WAAW,IAAI;AAAA,MACxB,CAAC;AACD,UAAI,sBAAsB,eAAe,MAAM,EAAE,QAAQ,EAAE,KAAK,SAAU,MAAM;AAC9E,eAAO,WAAW,IAAI;AAAA,MACxB,CAAC;AACD,UAAI,qBAAqB,CAAC,CAAC,cAAc,KAAK,SAAU,MAAM;AAC5D,eAAO,YAAY,IAAI,IAAI;AAAA,MAC7B,CAAC;AACD,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA;AAAA,QAEA;AAAA;AAAA,QAEA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA;AAAA;AAAA,QAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA,kBAAkB,SAAS,iBAAiB,MAAM;AAChD,cAAI,UAAU,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AAClF,cAAI,UAAU,cAAc,QAAQ,IAAI;AACxC,cAAI,UAAU,GAAG;AAOf,gBAAI,SAAS;AACX,qBAAO,eAAe,MAAM,eAAe,QAAQ,IAAI,IAAI,CAAC,EAAE,KAAK,SAAU,IAAI;AAC/E,uBAAO,WAAW,EAAE;AAAA,cACtB,CAAC;AAAA,YACH;AACA,mBAAO,eAAe,MAAM,GAAG,eAAe,QAAQ,IAAI,CAAC,EAAE,QAAQ,EAAE,KAAK,SAAU,IAAI;AACxF,qBAAO,WAAW,EAAE;AAAA,YACtB,CAAC;AAAA,UACH;AACA,iBAAO,cAAc,WAAW,UAAU,IAAI,GAAG;AAAA,QACnD;AAAA,MACF;AAAA,IACF,CAAC;AACD,UAAM,iBAAiB,MAAM,gBAAgB,OAAO,SAAU,OAAO;AACnE,aAAO,MAAM,cAAc,SAAS;AAAA,IACtC,CAAC;AAGD,QAAI,MAAM,eAAe,UAAU,KAAK,CAAC,iBAAiB,eAAe,GACvE;AACA,YAAM,IAAI,MAAM,qGAAqG;AAAA,IACvH;AASA,QAAI,MAAM,gBAAgB,KAAK,SAAU,GAAG;AAC1C,aAAO,EAAE;AAAA,IACX,CAAC,KAAK,MAAM,gBAAgB,SAAS,GAAG;AACtC,YAAM,IAAI,MAAM,+KAA+K;AAAA,IACjM;AAAA,EACF;AAUA,MAAI,oBAAoB,SAAS,iBAAiB,IAAI;AACpD,QAAI,gBAAgB,GAAG;AACvB,QAAI,CAAC,eAAe;AAClB;AAAA,IACF;AACA,QAAI,cAAc,cAAc,cAAc,WAAW,kBAAkB,MAAM;AAC/E,aAAO,kBAAkB,cAAc,UAAU;AAAA,IACnD;AACA,WAAO;AAAA,EACT;AACA,MAAI,YAAY,SAAS,SAAS,MAAM;AACtC,QAAI,SAAS,OAAO;AAClB;AAAA,IACF;AACA,QAAI,SAAS,kBAAkB,QAAQ,GAAG;AACxC;AAAA,IACF;AACA,QAAI,CAAC,QAAQ,CAAC,KAAK,OAAO;AACxB,gBAAU,oBAAoB,CAAC;AAC/B;AAAA,IACF;AACA,SAAK,MAAM;AAAA,MACT,eAAe,CAAC,CAAC,OAAO;AAAA,IAC1B,CAAC;AAED,UAAM,0BAA0B;AAChC,QAAI,kBAAkB,IAAI,GAAG;AAC3B,WAAK,OAAO;AAAA,IACd;AAAA,EACF;AACA,MAAI,qBAAqB,SAASC,oBAAmB,uBAAuB;AAC1E,QAAI,OAAO,iBAAiB,kBAAkB,qBAAqB;AACnE,WAAO,OAAO,OAAO,SAAS,QAAQ,QAAQ;AAAA,EAChD;AAaA,MAAI,kBAAkB,SAASC,iBAAgB,OAAO;AACpD,QAAI,SAAS,MAAM,QACjB,QAAQ,MAAM,OACd,mBAAmB,MAAM,YACzB,aAAa,qBAAqB,SAAS,QAAQ;AACrD,aAAS,UAAU,gBAAgB,KAAK;AACxC,wBAAoB;AACpB,QAAI,kBAAkB;AACtB,QAAI,MAAM,eAAe,SAAS,GAAG;AAInC,UAAI,iBAAiB,mBAAmB,QAAQ,KAAK;AACrD,UAAI,iBAAiB,kBAAkB,IAAI,MAAM,gBAAgB,cAAc,IAAI;AACnF,UAAI,iBAAiB,GAAG;AAGtB,YAAI,YAAY;AAEd,4BAAkB,MAAM,eAAe,MAAM,eAAe,SAAS,CAAC,EAAE;AAAA,QAC1E,OAAO;AAEL,4BAAkB,MAAM,eAAe,CAAC,EAAE;AAAA,QAC5C;AAAA,MACF,WAAW,YAAY;AAIrB,YAAI,oBAAoB,UAAU,MAAM,gBAAgB,SAAU,OAAO;AACvE,cAAI,oBAAoB,MAAM;AAC9B,iBAAO,WAAW;AAAA,QACpB,CAAC;AACD,YAAI,oBAAoB,MAAM,eAAe,cAAc,UAAU,YAAY,QAAQ,OAAO,eAAe,KAAK,CAAC,WAAW,QAAQ,OAAO,eAAe,KAAK,CAAC,eAAe,iBAAiB,QAAQ,KAAK,IAAI;AAOnN,8BAAoB;AAAA,QACtB;AACA,YAAI,qBAAqB,GAAG;AAI1B,cAAI,wBAAwB,sBAAsB,IAAI,MAAM,eAAe,SAAS,IAAI,oBAAoB;AAC5G,cAAI,mBAAmB,MAAM,eAAe,qBAAqB;AACjE,4BAAkB,YAAY,MAAM,KAAK,IAAI,iBAAiB,mBAAmB,iBAAiB;AAAA,QACpG,WAAW,CAAC,WAAW,KAAK,GAAG;AAG7B,4BAAkB,eAAe,iBAAiB,QAAQ,KAAK;AAAA,QACjE;AAAA,MACF,OAAO;AAIL,YAAI,mBAAmB,UAAU,MAAM,gBAAgB,SAAU,OAAO;AACtE,cAAI,mBAAmB,MAAM;AAC7B,iBAAO,WAAW;AAAA,QACpB,CAAC;AACD,YAAI,mBAAmB,MAAM,eAAe,cAAc,UAAU,YAAY,QAAQ,OAAO,eAAe,KAAK,CAAC,WAAW,QAAQ,OAAO,eAAe,KAAK,CAAC,eAAe,iBAAiB,MAAM,IAAI;AAO3M,6BAAmB;AAAA,QACrB;AACA,YAAI,oBAAoB,GAAG;AAIzB,cAAI,yBAAyB,qBAAqB,MAAM,eAAe,SAAS,IAAI,IAAI,mBAAmB;AAC3G,cAAI,oBAAoB,MAAM,eAAe,sBAAsB;AACnE,4BAAkB,YAAY,MAAM,KAAK,IAAI,kBAAkB,oBAAoB,kBAAkB;AAAA,QACvG,WAAW,CAAC,WAAW,KAAK,GAAG;AAG7B,4BAAkB,eAAe,iBAAiB,MAAM;AAAA,QAC1D;AAAA,MACF;AAAA,IACF,OAAO;AAGL,wBAAkB,iBAAiB,eAAe;AAAA,IACpD;AACA,WAAO;AAAA,EACT;AAIA,MAAI,mBAAmB,SAASC,kBAAiB,GAAG;AAClD,QAAI,SAAS,gBAAgB,CAAC;AAC9B,QAAI,mBAAmB,QAAQ,CAAC,KAAK,GAAG;AAEtC;AAAA,IACF;AACA,QAAI,eAAe,OAAO,yBAAyB,CAAC,GAAG;AAErD,WAAK,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOd,aAAa,OAAO;AAAA,MACtB,CAAC;AACD;AAAA,IACF;AAKA,QAAI,eAAe,OAAO,mBAAmB,CAAC,GAAG;AAE/C;AAAA,IACF;AAGA,MAAE,eAAe;AAAA,EACnB;AAMA,MAAI,eAAe,SAASC,cAAa,OAAO;AAC9C,QAAI,SAAS,gBAAgB,KAAK;AAClC,QAAI,kBAAkB,mBAAmB,QAAQ,KAAK,KAAK;AAG3D,QAAI,mBAAmB,kBAAkB,UAAU;AACjD,UAAI,iBAAiB;AACnB,cAAM,0BAA0B;AAAA,MAClC;AAAA,IACF,OAAO;AAEL,YAAM,yBAAyB;AAK/B,UAAI;AACJ,UAAI,sBAAsB;AAC1B,UAAI,MAAM,yBAAyB;AACjC,YAAI,YAAY,MAAM,uBAAuB,IAAI,GAAG;AAElD,cAAI,kBAAkB,mBAAmB,MAAM,uBAAuB;AAKtE,cAAI,gBAAgB,MAAM,gBAAgB,eAAe,EAAE;AAC3D,cAAI,cAAc,SAAS,GAAG;AAE5B,gBAAI,YAAY,cAAc,UAAU,SAAU,MAAM;AACtD,qBAAO,SAAS,MAAM;AAAA,YACxB,CAAC;AACD,gBAAI,aAAa,GAAG;AAClB,kBAAI,OAAO,aAAa,MAAM,cAAc,GAAG;AAC7C,oBAAI,YAAY,IAAI,cAAc,QAAQ;AACxC,6BAAW,cAAc,YAAY,CAAC;AACtC,wCAAsB;AAAA,gBACxB;AAAA,cAGF,OAAO;AACL,oBAAI,YAAY,KAAK,GAAG;AACtB,6BAAW,cAAc,YAAY,CAAC;AACtC,wCAAsB;AAAA,gBACxB;AAAA,cAGF;AAAA,YAEF;AAAA,UACF;AAAA,QAKF,OAAO;AAKL,cAAI,CAAC,MAAM,gBAAgB,KAAK,SAAU,GAAG;AAC3C,mBAAO,EAAE,cAAc,KAAK,SAAU,GAAG;AACvC,qBAAO,YAAY,CAAC,IAAI;AAAA,YAC1B,CAAC;AAAA,UACH,CAAC,GAAG;AAIF,kCAAsB;AAAA,UACxB;AAAA,QACF;AAAA,MACF,OAAO;AAKL,8BAAsB;AAAA,MACxB;AACA,UAAI,qBAAqB;AACvB,mBAAW,gBAAgB;AAAA;AAAA;AAAA,UAGzB,QAAQ,MAAM;AAAA,UACd,YAAY,OAAO,cAAc,MAAM,cAAc;AAAA,QACvD,CAAC;AAAA,MACH;AACA,UAAI,UAAU;AACZ,kBAAU,QAAQ;AAAA,MACpB,OAAO;AACL,kBAAU,MAAM,2BAA2B,oBAAoB,CAAC;AAAA,MAClE;AAAA,IACF;AACA,UAAM,iBAAiB;AAAA,EACzB;AAMA,MAAI,cAAc,SAASC,aAAY,OAAO;AAC5C,QAAI,aAAa,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AACrF,UAAM,iBAAiB;AACvB,QAAI,kBAAkB,gBAAgB;AAAA,MACpC;AAAA,MACA;AAAA,IACF,CAAC;AACD,QAAI,iBAAiB;AACnB,UAAI,WAAW,KAAK,GAAG;AAKrB,cAAM,eAAe;AAAA,MACvB;AACA,gBAAU,eAAe;AAAA,IAC3B;AAAA,EAEF;AACA,MAAI,cAAc,SAASC,aAAY,OAAO;AAC5C,QAAI,OAAO,aAAa,KAAK,KAAK,OAAO,cAAc,KAAK,GAAG;AAC7D,kBAAY,OAAO,OAAO,cAAc,KAAK,CAAC;AAAA,IAChD;AAAA,EACF;AAGA,MAAI,iBAAiB,SAASC,gBAAe,OAAO;AAClD,QAAI,cAAc,KAAK,KAAK,eAAe,OAAO,mBAAmB,KAAK,MAAM,OAAO;AACrF,YAAM,eAAe;AACrB,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AACA,MAAI,aAAa,SAASC,YAAW,GAAG;AACtC,QAAI,SAAS,gBAAgB,CAAC;AAC9B,QAAI,mBAAmB,QAAQ,CAAC,KAAK,GAAG;AACtC;AAAA,IACF;AACA,QAAI,eAAe,OAAO,yBAAyB,CAAC,GAAG;AACrD;AAAA,IACF;AACA,QAAI,eAAe,OAAO,mBAAmB,CAAC,GAAG;AAC/C;AAAA,IACF;AACA,MAAE,eAAe;AACjB,MAAE,yBAAyB;AAAA,EAC7B;AAMA,MAAI,eAAe,SAASC,gBAAe;AACzC,QAAI,CAAC,MAAM,QAAQ;AACjB;AAAA,IACF;AAGA,qBAAiB,aAAa,WAAW,IAAI;AAI7C,UAAM,yBAAyB,OAAO,oBAAoB,MAAM,WAAY;AAC1E,gBAAU,oBAAoB,CAAC;AAAA,IACjC,CAAC,IAAI,UAAU,oBAAoB,CAAC;AACpC,QAAI,iBAAiB,WAAW,cAAc,IAAI;AAClD,QAAI,iBAAiB,aAAa,kBAAkB;AAAA,MAClD,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC;AACD,QAAI,iBAAiB,cAAc,kBAAkB;AAAA,MACnD,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC;AACD,QAAI,iBAAiB,SAAS,YAAY;AAAA,MACxC,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC;AACD,QAAI,iBAAiB,WAAW,aAAa;AAAA,MAC3C,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC;AACD,QAAI,iBAAiB,WAAW,cAAc;AAC9C,WAAO;AAAA,EACT;AACA,MAAI,kBAAkB,SAASC,mBAAkB;AAC/C,QAAI,CAAC,MAAM,QAAQ;AACjB;AAAA,IACF;AACA,QAAI,oBAAoB,WAAW,cAAc,IAAI;AACrD,QAAI,oBAAoB,aAAa,kBAAkB,IAAI;AAC3D,QAAI,oBAAoB,cAAc,kBAAkB,IAAI;AAC5D,QAAI,oBAAoB,SAAS,YAAY,IAAI;AACjD,QAAI,oBAAoB,WAAW,aAAa,IAAI;AACpD,QAAI,oBAAoB,WAAW,cAAc;AACjD,WAAO;AAAA,EACT;AAMA,MAAI,kBAAkB,SAASC,iBAAgB,WAAW;AACxD,QAAI,uBAAuB,UAAU,KAAK,SAAU,UAAU;AAC5D,UAAI,eAAe,MAAM,KAAK,SAAS,YAAY;AACnD,aAAO,aAAa,KAAK,SAAU,MAAM;AACvC,eAAO,SAAS,MAAM;AAAA,MACxB,CAAC;AAAA,IACH,CAAC;AAID,QAAI,sBAAsB;AACxB,gBAAU,oBAAoB,CAAC;AAAA,IACjC;AAAA,EACF;AAIA,MAAI,mBAAmB,OAAO,WAAW,eAAe,sBAAsB,SAAS,IAAI,iBAAiB,eAAe,IAAI;AAC/H,MAAI,sBAAsB,SAASC,uBAAsB;AACvD,QAAI,CAAC,kBAAkB;AACrB;AAAA,IACF;AACA,qBAAiB,WAAW;AAC5B,QAAI,MAAM,UAAU,CAAC,MAAM,QAAQ;AACjC,YAAM,WAAW,IAAI,SAAU,WAAW;AACxC,yBAAiB,QAAQ,WAAW;AAAA,UAClC,SAAS;AAAA,UACT,WAAW;AAAA,QACb,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF;AAMA,SAAO;AAAA,IACL,IAAI,SAAS;AACX,aAAO,MAAM;AAAA,IACf;AAAA,IACA,IAAI,SAAS;AACX,aAAO,MAAM;AAAA,IACf;AAAA,IACA,UAAU,SAAS,SAAS,iBAAiB;AAC3C,UAAI,MAAM,QAAQ;AAChB,eAAO;AAAA,MACT;AACA,UAAI,aAAa,UAAU,iBAAiB,YAAY;AACxD,UAAI,iBAAiB,UAAU,iBAAiB,gBAAgB;AAChE,UAAI,oBAAoB,UAAU,iBAAiB,mBAAmB;AACtE,UAAI,CAAC,mBAAmB;AACtB,4BAAoB;AAAA,MACtB;AACA,YAAM,SAAS;AACf,YAAM,SAAS;AACf,YAAM,8BAA8B,IAAI;AACxC,qBAAe,QAAQ,eAAe,UAAU,WAAW;AAC3D,UAAI,mBAAmB,SAASC,oBAAmB;AACjD,YAAI,mBAAmB;AACrB,8BAAoB;AAAA,QACtB;AACA,qBAAa;AACb,4BAAoB;AACpB,2BAAmB,QAAQ,mBAAmB,UAAU,eAAe;AAAA,MACzE;AACA,UAAI,mBAAmB;AACrB,0BAAkB,MAAM,WAAW,OAAO,CAAC,EAAE,KAAK,kBAAkB,gBAAgB;AACpF,eAAO;AAAA,MACT;AACA,uBAAiB;AACjB,aAAO;AAAA,IACT;AAAA,IACA,YAAY,SAAS,WAAW,mBAAmB;AACjD,UAAI,CAAC,MAAM,QAAQ;AACjB,eAAO;AAAA,MACT;AACA,UAAI,UAAU,eAAe;AAAA,QAC3B,cAAc,OAAO;AAAA,QACrB,kBAAkB,OAAO;AAAA,QACzB,qBAAqB,OAAO;AAAA,MAC9B,GAAG,iBAAiB;AACpB,mBAAa,MAAM,sBAAsB;AACzC,YAAM,yBAAyB;AAC/B,sBAAgB;AAChB,YAAM,SAAS;AACf,YAAM,SAAS;AACf,0BAAoB;AACpB,uBAAiB,eAAe,WAAW,IAAI;AAC/C,UAAI,eAAe,UAAU,SAAS,cAAc;AACpD,UAAI,mBAAmB,UAAU,SAAS,kBAAkB;AAC5D,UAAI,sBAAsB,UAAU,SAAS,qBAAqB;AAClE,UAAI,cAAc,UAAU,SAAS,eAAe,yBAAyB;AAC7E,uBAAiB,QAAQ,iBAAiB,UAAU,aAAa;AACjE,UAAI,qBAAqB,SAASC,sBAAqB;AACrD,cAAM,WAAY;AAChB,cAAI,aAAa;AACf,sBAAU,mBAAmB,MAAM,2BAA2B,CAAC;AAAA,UACjE;AACA,+BAAqB,QAAQ,qBAAqB,UAAU,iBAAiB;AAAA,QAC/E,CAAC;AAAA,MACH;AACA,UAAI,eAAe,qBAAqB;AACtC,4BAAoB,mBAAmB,MAAM,2BAA2B,CAAC,EAAE,KAAK,oBAAoB,kBAAkB;AACtH,eAAO;AAAA,MACT;AACA,yBAAmB;AACnB,aAAO;AAAA,IACT;AAAA,IACA,OAAO,SAAS,MAAM,cAAc;AAClC,UAAI,MAAM,UAAU,CAAC,MAAM,QAAQ;AACjC,eAAO;AAAA,MACT;AACA,UAAI,UAAU,UAAU,cAAc,SAAS;AAC/C,UAAI,cAAc,UAAU,cAAc,aAAa;AACvD,YAAM,SAAS;AACf,kBAAY,QAAQ,YAAY,UAAU,QAAQ;AAClD,sBAAgB;AAChB,0BAAoB;AACpB,sBAAgB,QAAQ,gBAAgB,UAAU,YAAY;AAC9D,aAAO;AAAA,IACT;AAAA,IACA,SAAS,SAAS,QAAQ,gBAAgB;AACxC,UAAI,CAAC,MAAM,UAAU,CAAC,MAAM,QAAQ;AAClC,eAAO;AAAA,MACT;AACA,UAAI,YAAY,UAAU,gBAAgB,WAAW;AACrD,UAAI,gBAAgB,UAAU,gBAAgB,eAAe;AAC7D,YAAM,SAAS;AACf,oBAAc,QAAQ,cAAc,UAAU,UAAU;AACxD,0BAAoB;AACpB,mBAAa;AACb,0BAAoB;AACpB,wBAAkB,QAAQ,kBAAkB,UAAU,cAAc;AACpE,aAAO;AAAA,IACT;AAAA,IACA,yBAAyB,SAAS,wBAAwB,mBAAmB;AAC3E,UAAI,kBAAkB,CAAC,EAAE,OAAO,iBAAiB,EAAE,OAAO,OAAO;AACjE,YAAM,aAAa,gBAAgB,IAAI,SAAU,SAAS;AACxD,eAAO,OAAO,YAAY,WAAW,IAAI,cAAc,OAAO,IAAI;AAAA,MACpE,CAAC;AACD,UAAI,MAAM,QAAQ;AAChB,4BAAoB;AAAA,MACtB;AACA,0BAAoB;AACpB,aAAO;AAAA,IACT;AAAA,EACF;AAGA,OAAK,wBAAwB,QAAQ;AACrC,SAAO;AACT;AAQA,SAAS,iBAAiB,WAAW,SAAS;AAC5C,QAAM;AAAA,IACJ;AAAA,EACF,IAAI;AACJ,QAAM,gBAAgB,SAAS,eAAe;AAC9C,MAAI,CAAC,eAAe;AAClB;AAAA,EACF;AACA,QAAM,mBAAmB;AAAA,IACvB,yBAAyB;AAAA,IACzB,mBAAmB;AAAA,IACnB,eAAe;AAAA,IACf,gBAAgB,CAAAC,QAAM;AACpB,mBAAaA,GAAE;AACf,aAAO;AAAA,IACT;AAAA,KACG,SAAS,mBARW;AAAA;AAAA,IAUvB,UAAU,GAAG;AAAA,IACb;AAAA,IACA,WAAW;AAAA,EACb;AACA,YAAU,YAAY,gBAAgB,eAAe,gBAAgB;AACvE;AAOA,SAAS,kBAAkB,WAAW,SAAS;AAC7C,MAAI,CAAC,UAAU,mBAAmB;AAChC,cAAU,WAAW,SAAS,OAAO;AAAA,EACvC;AACF;AAOA,SAAS,oBAAoB,WAAW,SAAS;AAC/C,YAAU,WAAW,WAAW,OAAO;AACzC;AAaA,SAAS,wBAAwB,WAAW;AAC1C,YAAU,WAAW,wBAAwB,UAAU,EAAE;AAC3D;",
  "names": ["r", "isSelectableInput", "isEscapeEvent", "isTabEvent", "isKeyForward", "isKeyBackward", "delay", "findIndex", "valueOrHandler", "getActualTarget", "createFocusTrap", "getOption", "findContainerIndex", "getNodeForOption", "getInitialFocusNode", "updateTabbableNodes", "getReturnFocusNode", "findNextNavNode", "checkPointerDown", "checkFocusIn", "checkKeyNav", "checkTabKey", "checkEscapeKey", "checkClick", "addListeners", "removeListeners", "checkDomRemoval", "updateObservedNodes", "finishActivation", "finishDeactivation", "el"]
}
