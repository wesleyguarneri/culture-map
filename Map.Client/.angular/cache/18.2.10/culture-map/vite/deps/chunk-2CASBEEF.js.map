{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/ScreenSizeScaling.glsl.js", "../../../../../../node_modules/@arcgis/core/chunks/ShadedColorMaterial.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { addCameraPosition as e } from \"./util/View.glsl.js\";\nimport { FloatPassUniform as i } from \"../shaderModules/FloatPassUniform.js\";\nimport { glsl as r } from \"../shaderModules/interfaces.js\";\nfunction o(o, c) {\n  if (!c.screenSizeEnabled) return;\n  const n = o.vertex;\n  e(n, c), n.uniforms.add(new i(\"perScreenPixelRatio\", (e, i) => i.camera.perScreenPixelRatio), new i(\"screenSizeScale\", e => e.screenSizeScale)), n.code.add(r`float computeRenderPixelSizeAt( vec3 pWorld ){\nvec3 viewForward = - vec3(view[0][2], view[1][2], view[2][2]);\nfloat viewDirectionDistance = abs(dot(viewForward, pWorld - cameraPosition));\nreturn viewDirectionDistance * perScreenPixelRatio;\n}\nvec3 screenSizeScaling(vec3 position, vec3 anchor){\nreturn position * screenSizeScale * computeRenderPixelSizeAt(anchor) + anchor;\n}`);\n}\nexport { o as ScreenSizeScaling };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { create as e } from \"../core/libs/gl-matrix-2/factories/vec4f64.js\";\nimport { ScreenSizeScaling as o } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSizeScaling.glsl.js\";\nimport { ShaderOutput as r } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";\nimport { SliceDraw as i } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as a } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { multipassTerrainTest as d } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { symbolAlphaCutoff as l } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";\nimport { ColorConversion as s } from \"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";\nimport { addProjViewLocalOrigin as n, addViewNormal as t } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float3PassUniform as c } from \"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";\nimport { Float4PassUniform as g } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { glsl as m } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as f } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { TransparencyPassType as v } from \"../views/3d/webgl-engine/lib/TransparencyPassType.js\";\nimport { VertexAttribute as p } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nfunction u(e) {\n  const u = new f(),\n    b = e.multipassEnabled && e.output === r.Color;\n  u.include(a, e), u.include(o, e), u.include(i, e);\n  const {\n    vertex: h,\n    fragment: y\n  } = u;\n  return y.include(s), n(h, e), y.uniforms.add(new g(\"uColor\", e => e.color)), u.attributes.add(p.POSITION, \"vec3\"), u.varyings.add(\"vWorldPosition\", \"vec3\"), b && u.varyings.add(\"depth\", \"float\"), e.screenSizeEnabled && u.attributes.add(p.OFFSET, \"vec3\"), e.shadingEnabled && (t(h), u.attributes.add(p.NORMAL, \"vec3\"), u.varyings.add(\"vViewNormal\", \"vec3\")), h.code.add(m`\n    void main(void) {\n      vWorldPosition = ${e.screenSizeEnabled ? \"screenSizeScaling(offset, position)\" : \"position\"};\n  `), e.shadingEnabled && h.code.add(m`vec3 worldNormal = normal;\nvViewNormal = (viewNormal * vec4(worldNormal, 1)).xyz;`), h.code.add(m`\n    ${b ? \"depth = (view * vec4(vWorldPosition, 1.0)).z;\" : \"\"}\n    gl_Position = transformPosition(proj, view, vWorldPosition);\n  }\n  `), b && u.include(d, e), y.code.add(m`\n    void main() {\n      discardBySlice(vWorldPosition);\n      ${b ? \"terrainDepthTest(depth);\" : \"\"}\n    `), e.shadingEnabled ? (y.uniforms.add(new c(\"shadingDirection\", e => e.shadingDirection)), y.uniforms.add(new g(\"shadedColor\", e => w(e.shadingTint, e.color))), y.code.add(m`vec3 viewNormalNorm = normalize(vViewNormal);\nfloat shadingFactor = 1.0 - clamp(-dot(viewNormalNorm, shadingDirection), 0.0, 1.0);\nvec4 finalColor = mix(uColor, shadedColor, shadingFactor);`)) : y.code.add(m`vec4 finalColor = uColor;`), e.transparencyPassType === v.ColorAlpha && (u.outputs.add(\"fragColor\", \"vec4\", 0), u.outputs.add(\"fragAlpha\", \"float\", 1)), y.code.add(m`\n      ${e.output === r.ObjectAndLayerIdColor ? m`finalColor.a = 1.0;` : \"\"}\n      if (finalColor.a < ${m.float(l)}) {\n        discard;\n      }\n\n      ${e.output === r.Color ? m`fragColor = highlightSlice(finalColor, vWorldPosition); ${e.transparencyPassType === v.ColorAlpha ? m`\n                    fragColor = premultiplyAlpha(fragColor);\n                    fragAlpha = fragColor.a;` : \"\"}` : \"\"}\n    }\n    `), u;\n}\nfunction w(e, o) {\n  const r = 1 - e[3],\n    i = e[3] + o[3] * r;\n  return 0 === i ? (b[3] = i, b) : (b[0] = (e[0] * e[3] + o[0] * o[3] * r) / i, b[1] = (e[1] * e[3] + o[1] * o[3] * r) / i, b[2] = (e[2] * e[3] + o[2] * o[3] * r) / i, b[3] = o[3], b);\n}\nconst b = e(),\n  h = Object.freeze(Object.defineProperty({\n    __proto__: null,\n    build: u\n  }, Symbol.toStringTag, {\n    value: \"Module\"\n  }));\nexport { h as S, u as b };"],
  "mappings": "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",
  "names": ["o", "n", "e", "e", "u", "o", "b", "h"]
}
