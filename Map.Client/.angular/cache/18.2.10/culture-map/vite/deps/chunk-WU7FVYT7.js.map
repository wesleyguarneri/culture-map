{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/geometry/support/Indices.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { isArray as r, nativeArrayMaxSize as n } from \"../../core/typedArrayUtil.js\";\nfunction t(t) {\n  if (r(t)) {\n    if (t.length < n) return t;\n  } else if (t.length < n) return Array.from(t);\n  let i = !0,\n    f = !0;\n  return t.some((r, n) => (i = i && 0 === r, f = f && r === n, !i && !f)), i ? A(t.length) : f ? l(t.length) : r(t) || t.BYTES_PER_ELEMENT !== Uint16Array.BYTES_PER_ELEMENT ? e(t) : t;\n}\nfunction e(n) {\n  let t = !0;\n  for (const e of n) {\n    if (e >= 65536) return r(n) ? new Uint32Array(n) : n;\n    e >= 256 && (t = !1);\n  }\n  return t ? new Uint8Array(n) : new Uint16Array(n);\n}\nfunction i(r) {\n  return r <= n ? new Array(r) : r <= 65536 ? new Uint16Array(r) : new Uint32Array(r);\n}\nfunction f(r) {\n  return r <= n ? new Array(r) : new Uint32Array(r);\n}\nlet a = (() => {\n  const r = new Uint32Array(131072);\n  for (let n = 0; n < r.length; ++n) r[n] = n;\n  return r;\n})();\nconst u = [0],\n  o = (() => {\n    const r = new Uint16Array(65536);\n    for (let n = 0; n < r.length; ++n) r[n] = n;\n    return r;\n  })();\nfunction l(r) {\n  if (1 === r) return u;\n  if (r < n) return Array.from(new Uint16Array(o.buffer, 0, r));\n  if (r < o.length) return new Uint16Array(o.buffer, 0, r);\n  if (r > a.length) {\n    const n = Math.max(2 * a.length, r);\n    a = new Uint32Array(n);\n    for (let r = 0; r < a.length; r++) a[r] = r;\n  }\n  return new Uint32Array(a.buffer, 0, r);\n}\nlet y = new Uint8Array(65536);\nfunction A(r) {\n  if (1 === r) return u;\n  if (r < n) return new Array(r).fill(0);\n  if (r > y.length) {\n    const n = Math.max(2 * y.length, r);\n    y = new Uint8Array(n);\n  }\n  return new Uint8Array(y.buffer, 0, r);\n}\nexport { t as compactIndices, l as getContinuousIndexArray, A as getZeroIndexArray, i as newIndexArray, f as newIntArray };"],
  "mappings": ";;;;;;AAKA,SAAS,EAAEA,IAAG;AACZ,MAAI,EAAEA,EAAC,GAAG;AACR,QAAIA,GAAE,SAAS,EAAG,QAAOA;AAAA,EAC3B,WAAWA,GAAE,SAAS,EAAG,QAAO,MAAM,KAAKA,EAAC;AAC5C,MAAIC,KAAI,MACNC,KAAI;AACN,SAAOF,GAAE,KAAK,CAAC,GAAG,OAAOC,KAAIA,MAAK,MAAM,GAAGC,KAAIA,MAAK,MAAM,GAAG,CAACD,MAAK,CAACC,GAAE,GAAGD,KAAI,EAAED,GAAE,MAAM,IAAIE,KAAI,EAAEF,GAAE,MAAM,IAAI,EAAEA,EAAC,KAAKA,GAAE,sBAAsB,YAAY,oBAAoB,EAAEA,EAAC,IAAIA;AACtL;AACA,SAAS,EAAE,GAAG;AACZ,MAAIA,KAAI;AACR,aAAWG,MAAK,GAAG;AACjB,QAAIA,MAAK,MAAO,QAAO,EAAE,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI;AACnD,IAAAA,MAAK,QAAQH,KAAI;AAAA,EACnB;AACA,SAAOA,KAAI,IAAI,WAAW,CAAC,IAAI,IAAI,YAAY,CAAC;AAClD;AACA,SAAS,EAAE,GAAG;AACZ,SAAO,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC;AACpF;AACA,SAAS,EAAE,GAAG;AACZ,SAAO,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,YAAY,CAAC;AAClD;AACA,IAAI,KAAK,MAAM;AACb,QAAM,IAAI,IAAI,YAAY,MAAM;AAChC,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,EAAG,GAAE,CAAC,IAAI;AAC1C,SAAO;AACT,GAAG;AACH,IAAM,IAAI,CAAC,CAAC;AAAZ,IACE,KAAK,MAAM;AACT,QAAM,IAAI,IAAI,YAAY,KAAK;AAC/B,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,EAAG,GAAE,CAAC,IAAI;AAC1C,SAAO;AACT,GAAG;AACL,SAAS,EAAE,GAAG;AACZ,MAAI,MAAM,EAAG,QAAO;AACpB,MAAI,IAAI,EAAG,QAAO,MAAM,KAAK,IAAI,YAAY,EAAE,QAAQ,GAAG,CAAC,CAAC;AAC5D,MAAI,IAAI,EAAE,OAAQ,QAAO,IAAI,YAAY,EAAE,QAAQ,GAAG,CAAC;AACvD,MAAI,IAAI,EAAE,QAAQ;AAChB,UAAM,IAAI,KAAK,IAAI,IAAI,EAAE,QAAQ,CAAC;AAClC,QAAI,IAAI,YAAY,CAAC;AACrB,aAASI,KAAI,GAAGA,KAAI,EAAE,QAAQA,KAAK,GAAEA,EAAC,IAAIA;AAAA,EAC5C;AACA,SAAO,IAAI,YAAY,EAAE,QAAQ,GAAG,CAAC;AACvC;AACA,IAAIC,KAAI,IAAI,WAAW,KAAK;AAC5B,SAAS,EAAE,GAAG;AACZ,MAAI,MAAM,EAAG,QAAO;AACpB,MAAI,IAAI,EAAG,QAAO,IAAI,MAAM,CAAC,EAAE,KAAK,CAAC;AACrC,MAAI,IAAIA,GAAE,QAAQ;AAChB,UAAM,IAAI,KAAK,IAAI,IAAIA,GAAE,QAAQ,CAAC;AAClC,IAAAA,KAAI,IAAI,WAAW,CAAC;AAAA,EACtB;AACA,SAAO,IAAI,WAAWA,GAAE,QAAQ,GAAG,CAAC;AACtC;",
  "names": ["t", "i", "f", "e", "r", "y"]
}
