{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/layers/save/imageryUtils.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { save as e, saveAs as t } from \"./utils.js\";\nimport { getWGS84ExtentForItem as r, removeTypeKeyword as a, typeKeyword as i, addTypeKeyword as s } from \"../../portal/support/portalItemUtils.js\";\nconst l = \"Image Service\",\n  y = \"imagery-layer-save\",\n  n = \"imagery-layer-save-as\",\n  o = \"imagery-tile-layer-save\",\n  m = \"imagery-tile-layer-save-as\";\nfunction c(e) {\n  if (\"imagery\" === e.type) return {\n    isValid: !0\n  };\n  const {\n      raster: t\n    } = e,\n    r = \"Function\" === t?.datasetFormat ? t.primaryRasters?.rasters[0] : t;\n  return {\n    isValid: \"RasterTileServer\" === r?.datasetFormat && (\"Raster\" === r.tileType || \"Map\" === r.tileType),\n    errorMessage: \"imagery tile layer should be created from a tiled image service.\"\n  };\n}\nfunction p(e) {\n  const t = e.layerJSON;\n  return Promise.resolve(t && Object.keys(t).length ? t : null);\n}\nasync function u(e, t) {\n  const {\n    parsedUrl: l,\n    title: y,\n    fullExtent: n\n  } = e;\n  t.url = l.path, t.title ||= y;\n  try {\n    t.extent = await r(n);\n  } catch {\n    t.extent = void 0;\n  }\n  a(t, i.METADATA), \"imagery-tile\" === e.type && s(t, i.TILED_IMAGERY);\n}\nasync function g(t, r) {\n  const a = \"imagery\" === t.type ? y : o;\n  return e({\n    layer: t,\n    itemType: l,\n    validateLayer: c,\n    createItemData: p,\n    errorNamePrefix: a\n  }, r);\n}\nasync function v(e, r, a) {\n  const i = \"imagery\" === e.type ? n : m;\n  return t({\n    layer: e,\n    itemType: l,\n    validateLayer: c,\n    createItemData: p,\n    errorNamePrefix: i,\n    newItem: r,\n    setItemProperties: u\n  }, a);\n}\nexport { g as save, v as saveAs };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAMA,KAAI;AAAV,IACE,IAAI;AADN,IAEE,IAAI;AAFN,IAGE,IAAI;AAHN,IAIE,IAAI;AACN,SAAS,EAAE,GAAG;AACZ,MAAI,cAAc,EAAE,KAAM,QAAO;AAAA,IAC/B,SAAS;AAAA,EACX;AACA,QAAM;AAAA,IACF,QAAQ;AAAA,EACV,IAAI,GACJ,IAAI,eAAe,GAAG,gBAAgB,EAAE,gBAAgB,QAAQ,CAAC,IAAI;AACvE,SAAO;AAAA,IACL,SAAS,uBAAuB,GAAG,kBAAkB,aAAa,EAAE,YAAY,UAAU,EAAE;AAAA,IAC5F,cAAc;AAAA,EAChB;AACF;AACA,SAAS,EAAE,GAAG;AACZ,QAAM,IAAI,EAAE;AACZ,SAAO,QAAQ,QAAQ,KAAK,OAAO,KAAK,CAAC,EAAE,SAAS,IAAI,IAAI;AAC9D;AACA,SAAe,EAAE,GAAG,GAAG;AAAA;AACrB,UAAM;AAAA,MACJ,WAAWA;AAAA,MACX,OAAOC;AAAA,MACP,YAAYC;AAAA,IACd,IAAI;AACJ,MAAE,MAAMF,GAAE,MAAM,EAAE,UAAUC;AAC5B,QAAI;AACF,QAAE,SAAS,MAAM,EAAEC,EAAC;AAAA,IACtB,QAAQ;AACN,QAAE,SAAS;AAAA,IACb;AACA,MAAE,GAAG,EAAE,QAAQ,GAAG,mBAAmB,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa;AAAA,EACrE;AAAA;AACA,SAAe,EAAE,GAAG,GAAG;AAAA;AACrB,UAAMC,KAAI,cAAc,EAAE,OAAO,IAAI;AACrC,WAAO,EAAE;AAAA,MACP,OAAO;AAAA,MACP,UAAUH;AAAA,MACV,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,iBAAiBG;AAAA,IACnB,GAAG,CAAC;AAAA,EACN;AAAA;AACA,SAAe,EAAE,GAAG,GAAGA,IAAG;AAAA;AACxB,UAAMC,KAAI,cAAc,EAAE,OAAO,IAAI;AACrC,WAAO,EAAE;AAAA,MACP,OAAO;AAAA,MACP,UAAUJ;AAAA,MACV,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,iBAAiBI;AAAA,MACjB,SAAS;AAAA,MACT,mBAAmB;AAAA,IACrB,GAAGD,EAAC;AAAA,EACN;AAAA;",
  "names": ["l", "y", "n", "a", "i"]
}
