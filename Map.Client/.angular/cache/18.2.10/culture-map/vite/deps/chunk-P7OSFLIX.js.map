{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/webgl/GLObjectType.js", "../../../../../../node_modules/@arcgis/core/views/webgl/TextureDescriptor.js", "../../../../../../node_modules/@arcgis/core/views/webgl/ValidatedTextureDescriptor.js", "../../../../../../node_modules/@arcgis/core/views/webgl/Texture.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nvar e;\n!function (e) {\n  e[e.Texture = 0] = \"Texture\", e[e.RenderBuffer = 1] = \"RenderBuffer\";\n}(e || (e = {}));\nexport { e as GLObjectType };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { TextureType as t, PixelFormat as i, PixelType as h, TextureSamplingMode as s, TextureWrapMode as a } from \"./enums.js\";\nimport { getBytesPerElementFormat as p } from \"./Util.js\";\nclass e {\n  constructor(p = 0, e = p) {\n    this.width = p, this.height = e, this.target = t.TEXTURE_2D, this.pixelFormat = i.RGBA, this.dataType = h.UNSIGNED_BYTE, this.samplingMode = s.LINEAR, this.wrapMode = a.REPEAT, this.maxAnisotropy = 1, this.flipped = !1, this.hasMipmap = !1, this.isOpaque = !1, this.unpackAlignment = 4, this.preMultiplyAlpha = !1, this.depth = 1, this.isImmutable = !1;\n  }\n}\nfunction r(t) {\n  return t.width <= 0 || t.height <= 0 ? 0 : Math.round(t.width * t.height * (t.hasMipmap ? 4 / 3 : 1) * (null == t.internalFormat ? 4 : p(t.internalFormat)));\n}\nexport { e as TextureDescriptor, r as estimateMemory };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { SizedPixelFormat as s, PixelFormat as e } from \"./enums.js\";\nimport { TextureDescriptor as t } from \"./TextureDescriptor.js\";\nclass a extends t {\n  constructor(t, a) {\n    switch (super(), this.context = t, Object.assign(this, a), this.internalFormat) {\n      case s.R16F:\n      case s.R16I:\n      case s.R16UI:\n      case s.R32F:\n      case s.R32I:\n      case s.R32UI:\n      case s.R8_SNORM:\n      case s.R8:\n      case s.R8I:\n      case s.R8UI:\n        this.pixelFormat = e.RED;\n    }\n  }\n  static validate(s, e) {\n    return new a(s, e);\n  }\n}\nexport { a as ValidatedTextureDescriptor };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport t from \"../../core/Error.js\";\nimport \"../../core/has.js\";\nimport { checkWebGLError as e } from \"./checkWebGLError.js\";\nimport { TextureType as i, ResourceType as r, TextureSamplingMode as s, PixelFormat as o, PixelType as a, SizedPixelFormat as n, CompressedTextureFormat as l } from \"./enums.js\";\nimport { GLObjectType as h } from \"./GLObjectType.js\";\nimport { estimateMemory as p } from \"./TextureDescriptor.js\";\nimport { ValidatedTextureDescriptor as d } from \"./ValidatedTextureDescriptor.js\";\nconst _ = 4,\n  m = null;\nlet c = class l {\n  constructor(e, r = null, s = null) {\n    if (this.type = h.Texture, this._glName = null, this._samplingModeDirty = !1, this._wrapModeDirty = !1, this._wasImmutablyAllocated = !1, \"context\" in e) this._descriptor = e, s = r;else {\n      const i = d.validate(e, r);\n      if (!i) throw new t(\"Texture descriptor invalid\");\n      this._descriptor = i;\n    }\n    this._descriptor.target === i.TEXTURE_CUBE_MAP ? this._setDataCubeMap(s) : this.setData(s);\n  }\n  get glName() {\n    return this._glName;\n  }\n  get descriptor() {\n    return this._descriptor;\n  }\n  get usedMemory() {\n    return p(this._descriptor);\n  }\n  get isDirty() {\n    return this._samplingModeDirty || this._wrapModeDirty;\n  }\n  dispose() {\n    this._glName && this._descriptor.context.instanceCounter.decrement(r.Texture, this), this._descriptor.context.gl && this._glName && (this._descriptor.context.unbindTexture(this), this._descriptor.context.gl.deleteTexture(this._glName), this._glName = null);\n  }\n  release() {\n    this.dispose();\n  }\n  resize(e, r) {\n    const s = this._descriptor;\n    if (s.width !== e || s.height !== r) {\n      if (this._wasImmutablyAllocated) throw new t(\"Immutable textures can't be resized!\");\n      s.width = e, s.height = r, this._descriptor.target === i.TEXTURE_CUBE_MAP ? this._setDataCubeMap(null) : this.setData(null);\n    }\n  }\n  _setDataCubeMap(t = null) {\n    for (let e = i.TEXTURE_CUBE_MAP_POSITIVE_X; e <= i.TEXTURE_CUBE_MAP_NEGATIVE_Z; e++) this._setData(t, e);\n  }\n  setData(t) {\n    this._setData(t);\n  }\n  _setData(i, s) {\n    if (!this._descriptor.context?.gl) return;\n    const o = this._descriptor.context.gl;\n    e(o), this._glName || (this._glName = o.createTexture(), this._glName && this._descriptor.context.instanceCounter.increment(r.Texture, this)), void 0 === i && (i = null);\n    const a = this._descriptor,\n      n = s ?? a.target,\n      h = R(n);\n    null === i && (a.width = a.width || _, a.height = a.height || _, h && (a.depth = a.depth ?? 1));\n    const p = this._descriptor.context.bindTexture(this, l.TEXTURE_UNIT_FOR_UPDATES);\n    this._descriptor.context.setActiveTexture(l.TEXTURE_UNIT_FOR_UPDATES), u(a), this._configurePixelStorage(), e(o);\n    const d = this._deriveInternalFormat();\n    if (f(i)) {\n      let t = \"width\" in i ? i.width : i.codedWidth,\n        r = \"height\" in i ? i.height : i.codedHeight;\n      const s = 1;\n      i instanceof HTMLVideoElement && (t = i.videoWidth, r = i.videoHeight), a.width && a.height, h && a.depth, a.isImmutable && !this._wasImmutablyAllocated && this._texStorage(n, d, a.hasMipmap, t, r, s), this._texImage(n, 0, d, t, r, s, i), e(o), a.hasMipmap && this.generateMipmap(), a.width || (a.width = t), a.height || (a.height = r), h && !a.depth && (a.depth = s);\n    } else {\n      const {\n        width: r,\n        height: s,\n        depth: l\n      } = a;\n      if (null == r || null == s) throw new t(\"Width and height must be specified!\");\n      if (h && null == l) throw new t(\"Depth must be specified!\");\n      if (a.isImmutable && !this._wasImmutablyAllocated && this._texStorage(n, d, a.hasMipmap, r, s, l), A(i)) {\n        const e = i.levels,\n          h = w(n, r, s, l),\n          p = Math.min(h - 1, e.length - 1);\n        o.texParameteri(a.target, this._descriptor.context.gl.TEXTURE_MAX_LEVEL, p);\n        const _ = d;\n        if (!M(_)) throw new t(\"Attempting to use compressed data with an uncompressed format!\");\n        this._forEachMipmapLevel((t, i, r, s) => {\n          const o = e[Math.min(t, e.length - 1)];\n          this._compressedTexImage(n, t, _, i, r, s, o);\n        }, p);\n      } else this._texImage(n, 0, d, r, s, l, i), e(o), a.hasMipmap && this.generateMipmap();\n    }\n    T(o, this._descriptor), g(o, this._descriptor), E(this._descriptor.context, this._descriptor), e(o), this._descriptor.context.bindTexture(p, l.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  updateData(e, i, r, s, o, a, n = 0) {\n    a || console.error(\"An attempt to use uninitialized data!\"), this._glName || console.error(\"An attempt to update uninitialized texture!\");\n    const h = this._descriptor,\n      p = this._deriveInternalFormat(),\n      {\n        context: d,\n        pixelFormat: _,\n        dataType: m,\n        target: c,\n        isImmutable: u\n      } = h;\n    if (u && !this._wasImmutablyAllocated) throw new t(\"Cannot update immutable texture before allocation!\");\n    const T = d.bindTexture(this, l.TEXTURE_UNIT_FOR_UPDATES, !0);\n    (i < 0 || r < 0 || i + s > h.width || r + o > h.height) && console.error(\"An attempt to update out of bounds of the texture!\"), this._configurePixelStorage();\n    const {\n      gl: g\n    } = d;\n    n && g.pixelStorei(g.UNPACK_SKIP_ROWS, n), f(a) ? g.texSubImage2D(c, e, i, r, s, o, _, m, a) : A(a) ? g.compressedTexSubImage2D(c, e, i, r, s, o, p, a.levels[e]) : g.texSubImage2D(c, e, i, r, s, o, _, m, a), n && g.pixelStorei(g.UNPACK_SKIP_ROWS, 0), d.bindTexture(T, l.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  updateData3D(e, i, r, s, o, a, n, h) {\n    h || console.error(\"An attempt to use uninitialized data!\"), this._glName || console.error(\"An attempt to update uninitialized texture!\");\n    const p = this._descriptor,\n      d = this._deriveInternalFormat(),\n      {\n        context: _,\n        pixelFormat: m,\n        dataType: c,\n        isImmutable: u,\n        target: T\n      } = p;\n    if (u && !this._wasImmutablyAllocated) throw new t(\"Cannot update immutable texture before allocation!\");\n    R(T) || console.warn(\"Attempting to set 3D texture data on a non-3D texture\");\n    const g = _.bindTexture(this, l.TEXTURE_UNIT_FOR_UPDATES);\n    _.setActiveTexture(l.TEXTURE_UNIT_FOR_UPDATES), (i < 0 || r < 0 || s < 0 || i + o > p.width || r + a > p.height || s + n > p.depth) && console.error(\"An attempt to update out of bounds of the texture!\"), this._configurePixelStorage();\n    const {\n      gl: E\n    } = _;\n    if (A(h)) h = h.levels[e], E.compressedTexSubImage3D(T, e, i, r, s, o, a, n, d, h);else {\n      const t = h;\n      E.texSubImage3D(T, e, i, r, s, o, a, n, m, c, t);\n    }\n    _.bindTexture(g, l.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  generateMipmap() {\n    const e = this._descriptor;\n    if (!e.hasMipmap) {\n      if (this._wasImmutablyAllocated) throw new t(\"Cannot add mipmaps to immutable texture after allocation\");\n      e.hasMipmap = !0, this._samplingModeDirty = !0, u(e);\n    }\n    e.samplingMode === s.LINEAR ? (this._samplingModeDirty = !0, e.samplingMode = s.LINEAR_MIPMAP_NEAREST) : e.samplingMode === s.NEAREST && (this._samplingModeDirty = !0, e.samplingMode = s.NEAREST_MIPMAP_NEAREST);\n    const i = this._descriptor.context.bindTexture(this, l.TEXTURE_UNIT_FOR_UPDATES);\n    this._descriptor.context.setActiveTexture(l.TEXTURE_UNIT_FOR_UPDATES), this._descriptor.context.gl.generateMipmap(e.target), this._descriptor.context.bindTexture(i, l.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  clearMipmap() {\n    const e = this._descriptor;\n    if (e.hasMipmap) {\n      if (this._wasImmutablyAllocated) throw new t(\"Cannot delete mipmaps to immutable texture after allocation\");\n      e.hasMipmap = !1, this._samplingModeDirty = !0, u(e);\n    }\n    e.samplingMode === s.LINEAR_MIPMAP_NEAREST ? (this._samplingModeDirty = !0, e.samplingMode = s.LINEAR) : e.samplingMode === s.NEAREST_MIPMAP_NEAREST && (this._samplingModeDirty = !0, e.samplingMode = s.NEAREST);\n  }\n  setSamplingMode(t) {\n    t !== this._descriptor.samplingMode && (this._descriptor.samplingMode = t, this._samplingModeDirty = !0);\n  }\n  setWrapMode(t) {\n    t !== this._descriptor.wrapMode && (this._descriptor.wrapMode = t, u(this._descriptor), this._wrapModeDirty = !0);\n  }\n  applyChanges() {\n    const t = this._descriptor,\n      e = t.context.gl;\n    this._samplingModeDirty && (T(e, t), this._samplingModeDirty = !1), this._wrapModeDirty && (g(e, t), this._wrapModeDirty = !1);\n  }\n  _deriveInternalFormat() {\n    if (null != this._descriptor.internalFormat) return this._descriptor.internalFormat === o.DEPTH_STENCIL && (this._descriptor.internalFormat = o.DEPTH24_STENCIL8), this._descriptor.internalFormat;\n    switch (this._descriptor.dataType) {\n      case a.FLOAT:\n        switch (this._descriptor.pixelFormat) {\n          case o.RGBA:\n            return this._descriptor.internalFormat = n.RGBA32F;\n          case o.RGB:\n            return this._descriptor.internalFormat = n.RGB32F;\n          default:\n            throw new t(\"Unable to derive format\");\n        }\n      case a.UNSIGNED_BYTE:\n        switch (this._descriptor.pixelFormat) {\n          case o.RGBA:\n            return this._descriptor.internalFormat = n.RGBA8;\n          case o.RGB:\n            return this._descriptor.internalFormat = n.RGB8;\n        }\n    }\n    return this._descriptor.internalFormat = this._descriptor.pixelFormat === o.DEPTH_STENCIL ? o.DEPTH24_STENCIL8 : this._descriptor.pixelFormat;\n  }\n  _configurePixelStorage() {\n    const t = this._descriptor.context.gl,\n      {\n        unpackAlignment: e,\n        flipped: i,\n        preMultiplyAlpha: r\n      } = this._descriptor;\n    t.pixelStorei(t.UNPACK_ALIGNMENT, e), t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, i ? 1 : 0), t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r ? 1 : 0);\n  }\n  _texStorage(e, i, r, s, o, a) {\n    const {\n      gl: n\n    } = this._descriptor.context;\n    if (!x(i)) throw new t(\"Immutable textures must have a sized internal format\");\n    if (!this._descriptor.isImmutable) return;\n    const l = r ? w(e, s, o, a) : 1;\n    if (R(e)) {\n      if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n      n.texStorage3D(e, l, i, s, o, a);\n    } else n.texStorage2D(e, l, i, s, o);\n    this._wasImmutablyAllocated = !0;\n  }\n  _texImage(e, i, r, s, o, a, n) {\n    const l = this._descriptor.context.gl,\n      h = R(e),\n      {\n        isImmutable: p,\n        pixelFormat: d,\n        dataType: _\n      } = this._descriptor;\n    if (p) {\n      if (null != n) {\n        const r = n;\n        if (h) {\n          if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n          l.texSubImage3D(e, i, 0, 0, 0, s, o, a, d, _, r);\n        } else l.texSubImage2D(e, i, 0, 0, s, o, d, _, r);\n      }\n    } else {\n      const p = n;\n      if (h) {\n        if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n        l.texImage3D(e, i, r, s, o, a, 0, d, _, p);\n      } else l.texImage2D(e, i, r, s, o, 0, d, _, p);\n    }\n  }\n  _compressedTexImage(e, i, r, s, o, a, n) {\n    const l = this._descriptor.context.gl,\n      h = R(e);\n    if (this._descriptor.isImmutable) {\n      if (null != n) if (h) {\n        if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n        l.compressedTexSubImage3D(e, i, 0, 0, 0, s, o, a, r, n);\n      } else l.compressedTexSubImage2D(e, i, 0, 0, s, o, r, n);\n    } else if (h) {\n      if (null == a) throw new t(\"Missing depth dimension for 3D texture upload\");\n      l.compressedTexImage3D(e, i, r, s, o, a, 0, n);\n    } else l.compressedTexImage2D(e, i, r, s, o, 0, n);\n  }\n  _forEachMipmapLevel(e, r = 1 / 0) {\n    let {\n      width: s,\n      height: o,\n      depth: a,\n      hasMipmap: n,\n      target: l\n    } = this._descriptor;\n    const h = l === i.TEXTURE_3D;\n    if (null == s || null == o || h && null == a) throw new t(\"Missing texture dimensions for mipmap calculation\");\n    for (let t = 0; e(t, s, o, a), n && (1 !== s || 1 !== o || h && 1 !== a) && !(t >= r); ++t) s = Math.max(1, s >> 1), o = Math.max(1, o >> 1), h && (a = Math.max(1, a >> 1));\n  }\n};\nfunction u(t) {\n  (null != t.width && t.width < 0 || null != t.height && t.height < 0 || null != t.depth && t.depth < 0) && console.error(\"Negative dimension parameters are not allowed!\");\n}\nfunction T(t, e) {\n  let i = e.samplingMode,\n    r = e.samplingMode;\n  i === s.LINEAR_MIPMAP_NEAREST || i === s.LINEAR_MIPMAP_LINEAR ? (i = s.LINEAR, e.hasMipmap || (r = s.LINEAR)) : i !== s.NEAREST_MIPMAP_NEAREST && i !== s.NEAREST_MIPMAP_LINEAR || (i = s.NEAREST, e.hasMipmap || (r = s.NEAREST)), t.texParameteri(e.target, t.TEXTURE_MAG_FILTER, i), t.texParameteri(e.target, t.TEXTURE_MIN_FILTER, r);\n}\nfunction g(t, e) {\n  \"number\" == typeof e.wrapMode ? (t.texParameteri(e.target, t.TEXTURE_WRAP_S, e.wrapMode), t.texParameteri(e.target, t.TEXTURE_WRAP_T, e.wrapMode)) : (t.texParameteri(e.target, t.TEXTURE_WRAP_S, e.wrapMode.s), t.texParameteri(e.target, t.TEXTURE_WRAP_T, e.wrapMode.t));\n}\nfunction E(t, e) {\n  const i = t.capabilities.textureFilterAnisotropic;\n  if (!i) return;\n  t.gl.texParameterf(e.target, i.TEXTURE_MAX_ANISOTROPY, e.maxAnisotropy ?? 1);\n}\nfunction x(t) {\n  return t in n;\n}\nfunction M(t) {\n  return t in l;\n}\nfunction A(t) {\n  return null != t && \"type\" in t && \"compressed\" === t.type;\n}\nfunction I(t) {\n  return null != t && \"byteLength\" in t;\n}\nfunction f(t) {\n  return null != t && !A(t) && !I(t);\n}\nfunction R(t) {\n  return t === i.TEXTURE_3D || t === i.TEXTURE_2D_ARRAY;\n}\nfunction w(t, e, r, s = 1) {\n  let o = Math.max(e, r);\n  return t === i.TEXTURE_3D && (o = Math.max(o, s)), Math.round(Math.log(o) / Math.LN2) + 1;\n}\nc.TEXTURE_UNIT_FOR_UPDATES = 0;\nexport { c as Texture, m as tracer };"],
  "mappings": "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",
  "names": ["e", "e", "u", "e", "a", "s", "c", "e", "r", "s", "a", "u", "l", "h", "p", "_", "M", "i", "o", "T", "g", "E"]
}
