{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js", "../../../../../../node_modules/@arcgis/core/chunks/WaterSurface.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { set as e } from \"../../../../../../core/libs/gl-matrix-2/math/vec2.js\";\nimport { create as t } from \"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";\nimport { s as r } from \"../../../../../../chunks/vec42.js\";\nimport { create as a } from \"../../../../../../core/libs/gl-matrix-2/factories/vec4f64.js\";\nimport { FoamIntensity as o } from \"./FoamRendering.glsl.js\";\nimport { ReadShadowMapPassParameters as m } from \"./ReadShadowMap.glsl.js\";\nimport { Float2PassUniform as s } from \"../../shaderModules/Float2PassUniform.js\";\nimport { Float4PassUniform as v } from \"../../shaderModules/Float4PassUniform.js\";\nimport { glsl as l } from \"../../shaderModules/interfaces.js\";\nimport { Texture2DPassUniform as i } from \"../../shaderModules/Texture2DPassUniform.js\";\nfunction u(t) {\n  t.fragment.uniforms.add(new i(\"texWaveNormal\", e => e.waveNormal), new i(\"texWavePerturbation\", e => e.wavePerturbation), new v(\"waveParams\", e => r(c, e.waveStrength, e.waveTextureRepeat, e.flowStrength, e.flowOffset)), new s(\"waveDirection\", t => e(n, t.waveDirection[0] * t.waveVelocity, t.waveDirection[1] * t.waveVelocity))), t.include(o), t.fragment.code.add(l`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`);\n}\nclass f extends m {}\nconst c = a(),\n  n = t();\nexport { u as WaterDistortion, f as WaterDistortionPassParameters };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { ForwardLinearDepth as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { ShaderOutput as o } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";\nimport { SliceDraw as r } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as i } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { ObjectAndLayerIdColor as a } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";\nimport { OutputHighlight as s } from \"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";\nimport { EvaluateAmbientLighting as n } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientLighting.glsl.js\";\nimport { MainLighting as t, addMainLightDirection as d, addMainLightIntensity as l } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";\nimport { multipassTerrainTest as v } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { NormalUtils as g } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js\";\nimport { PBRMode as c } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadShadowMapDraw as m } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { Water as p } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js\";\nimport { WaterDistortion as u } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js\";\nimport { symbolAlphaCutoff as w } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";\nimport { ColorConversion as f } from \"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";\nimport { addProjViewLocalOrigin as h, addCameraPosition as b } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float4PassUniform as y } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { FloatPassUniform as j } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as C } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as L } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { TransparencyPassType as P } from \"../views/3d/webgl-engine/lib/TransparencyPassType.js\";\nimport { VertexAttribute as x } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nfunction S(S) {\n  const M = new L(),\n    {\n      vertex: A,\n      fragment: N\n    } = M;\n  h(A, S), M.include(i, S), M.attributes.add(x.POSITION, \"vec3\"), M.attributes.add(x.UV0, \"vec2\");\n  const O = new y(\"waterColor\", e => e.color);\n  if (S.output === o.Color && S.draped) return M.varyings.add(\"vpos\", \"vec3\"), A.uniforms.add(O), A.code.add(C`\n        void main(void) {\n          if (waterColor.a < ${C.float(w)}) {\n            // Discard this vertex\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n            return;\n          }\n\n          vpos = position;\n          gl_Position = transformPosition(proj, view, vpos);\n        }\n    `), N.uniforms.add(O), N.code.add(C`void main() {\nfragColor = waterColor;\n}`), M;\n  switch (S.output === o.Color && (M.include(g, S), M.include(e, S), M.varyings.add(\"vuv\", \"vec2\"), M.varyings.add(\"vpos\", \"vec3\"), M.varyings.add(\"vnormal\", \"vec3\"), M.varyings.add(\"vtbnMatrix\", \"mat3\"), S.multipassEnabled && M.varyings.add(\"depth\", \"float\"), A.uniforms.add(O), A.code.add(C`\n      void main(void) {\n        if (waterColor.a < ${C.float(w)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vuv = uv0;\n        vpos = position;\n\n        vnormal = getLocalUp(vpos, localOrigin);\n        vtbnMatrix = getTBNMatrix(vnormal);\n\n        ${S.multipassEnabled ? \"depth = (view * vec4(vpos, 1.0)).z;\" : \"\"}\n\n        gl_Position = transformPosition(proj, view, vpos);\n        ${S.output === o.Color ? \"forwardLinearDepth();\" : \"\"}\n      }\n    `)), M.include(v, S), S.output) {\n    case o.Color:\n      M.include(t), M.include(n, {\n        pbrMode: c.Disabled,\n        lightingSphericalHarmonicsOrder: 2\n      }), M.include(u), M.include(r, S), M.include(m, S), M.include(p, S), N.uniforms.add(O, new j(\"timeElapsed\", e => e.timeElapsed), A.uniforms.get(\"view\"), A.uniforms.get(\"localOrigin\")), b(N, S), N.include(f), S.transparencyPassType === P.ColorAlpha && (M.outputs.add(\"fragColor\", \"vec4\", 0), M.outputs.add(\"fragAlpha\", \"float\", 1)), d(N), l(N), N.code.add(C`\n      void main() {\n        discardBySlice(vpos);\n        ${S.multipassEnabled ? \"terrainDepthTest(depth);\" : \"\"}\n        vec3 localUp = vnormal;\n        // the created normal is in tangent space\n        vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);\n\n        // we rotate the normal according to the tangent-bitangent-normal-Matrix\n        vec3 n = normalize(vtbnMatrix * tangentNormalFoam.xyz);\n        vec3 v = -normalize(vpos - cameraPosition);\n        float shadow = ${S.receiveShadows ? C`1.0 - readShadowMap(vpos, linearDepth)` : \"1.0\"};\n        vec4 vPosView = view * vec4(vpos, 1.0);\n        vec4 final = vec4(getSeaColor(n, v, mainLightDirection, waterColor.rgb, mainLightIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz, vpos + localOrigin), waterColor.w);\n\n        // gamma correction\n        fragColor = delinearizeGamma(final);\n        fragColor = highlightSlice(fragColor, vpos);\n        ${S.transparencyPassType === P.ColorAlpha ? C`\n                fragColor = premultiplyAlpha(fragColor);\n                fragAlpha = fragColor.a;` : \"\"}\n      }\n    `);\n      break;\n    case o.Normal:\n      M.include(g, S), M.include(u, S), M.include(r, S), M.varyings.add(\"vpos\", \"vec3\"), M.varyings.add(\"vuv\", \"vec2\"), A.uniforms.add(O), A.code.add(C`\n        void main(void) {\n          if (waterColor.a < ${C.float(w)}) {\n            // Discard this vertex\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n            return;\n          }\n\n          vuv = uv0;\n          vpos = position;\n\n          gl_Position = transformPosition(proj, view, vpos);\n        }\n    `), N.uniforms.add(new j(\"timeElapsed\", e => e.timeElapsed)), N.code.add(C`void main() {\ndiscardBySlice(vpos);\nvec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);\ntangentNormalFoam.xyz = normalize(tangentNormalFoam.xyz);\nfragColor = vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);\n}`);\n      break;\n    case o.Highlight:\n      M.include(s, S), M.varyings.add(\"vpos\", \"vec3\"), A.uniforms.add(O), A.code.add(C`\n      void main(void) {\n        if (waterColor.a < ${C.float(w)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vpos = position;\n        gl_Position = transformPosition(proj, view, vpos);\n      }\n    `), M.include(r, S), N.code.add(C`void main() {\ndiscardBySlice(vpos);\noutputHighlight();\n}`);\n      break;\n    case o.ObjectAndLayerIdColor:\n      M.include(a, S), M.varyings.add(\"vpos\", \"vec3\"), A.uniforms.add(O), A.code.add(C`\n      void main(void) {\n        if (waterColor.a < ${C.float(w)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vpos = position;\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardObjectAndLayerIdColor();\n      }\n    `), M.include(r, S), N.code.add(C`void main() {\ndiscardBySlice(vpos);\noutputObjectAndLayerIdColor();\n}`);\n  }\n  return M;\n}\nconst M = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: S\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { M as W, S as b };"],
  "mappings": "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",
  "names": ["t", "s", "e", "c", "o", "n", "c", "n", "S", "M", "o", "e", "r", "n", "a", "f", "t", "d"]
}
