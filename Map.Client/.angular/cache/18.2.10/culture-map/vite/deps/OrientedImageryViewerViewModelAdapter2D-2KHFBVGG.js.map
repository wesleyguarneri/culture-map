{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/widgets/OrientedImageryViewer/adapters/OrientedImageryViewerViewModelAdapter2D.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport \"../../../geometry.js\";\nimport e from \"../../../Graphic.js\";\nimport { isSome as t } from \"../../../core/arrayUtils.js\";\nimport i from \"../../../core/Logger.js\";\nimport { waitTick as o, throwIfAborted as r, isAbortError as s } from \"../../../core/promiseUtils.js\";\nimport { transformPoints as a } from \"../../../layers/orientedImagery/transformations/imageToGroundUtils.js\";\nimport { convertOrientationToPixelLocation as n } from \"../../../layers/orientedImagery/transformations/utils.js\";\nimport { activePolygonSymbol as l, polygonSymbol as m } from \"../symbols.js\";\nimport c from \"../../../geometry/Polygon.js\";\nclass p {\n  constructor(p) {\n    this.viewModel = p, this.createFootprints = async t => {\n      await o(t);\n      const {\n        coveragePolygons: i,\n        currentBestFeature: r,\n        isAdditionalCoverageVisible: s\n      } = this.viewModel;\n      for (const o of i) o?.imageID === r.attributes.objectId ? this.viewModel.bestFeatureFootprint = new e({\n        attributes: {\n          imageID: o?.imageID\n        },\n        geometry: o,\n        symbol: l,\n        visible: !1\n      }) : this.viewModel.additionalFootprints.push(new e({\n        attributes: {\n          imageID: o?.imageID\n        },\n        geometry: o,\n        symbol: m.clone(),\n        visible: s\n      }));\n    }, this.updateFootprint = async (o, n) => {\n      const {\n          activeViewer: m,\n          currentBestFeature: p,\n          currentCoverageVisible: g,\n          footprintExtent: u\n        } = this.viewModel,\n        f = m?.imageSize;\n      if (p && f && u) try {\n        const i = await a(o, {\n          feature: p,\n          imageProperties: {\n            width: f[0],\n            height: f[1]\n          },\n          options: n,\n          footprintExtent: u\n        });\n        r(n);\n        const s = i.filter(t);\n        if (!s.length) return;\n        const m = [s.map(({\n          x: e,\n          y: t\n        }) => [e, t, 1])];\n        m[0].push(m[0][0]);\n        const d = new c({\n          rings: m,\n          spatialReference: s[0].spatialReference\n        });\n        this.viewModel.updateCurrentCoveragePolygon(new e({\n          geometry: d,\n          attributes: {\n            imageID: p.attributes.objectId\n          },\n          symbol: l,\n          visible: g\n        }));\n      } catch (d) {\n        s(d) || i.getLogger(this.viewModel).error(\"update-footprint\", d);\n      }\n    }, this.updateFootprintPanorama = async (t, i) => {\n      const {\n          horizontalFieldOfView: o,\n          pitch: s,\n          verticalFieldOfView: m,\n          yaw: p\n        } = t,\n        {\n          activeViewer: g,\n          currentBestFeature: u,\n          currentCoverageVisible: f,\n          footprintExtent: d\n        } = this.viewModel,\n        h = g?.imageSize;\n      if (!u || !h || !d) return;\n      const {\n        cameraPitch: y,\n        objectId: w\n      } = u.attributes;\n      if (s + y - m / 2 > 180) return void this.viewModel.updateCurrentCoveragePolygon(null);\n      let v = [];\n      if (s + y + m / 2 < 180) {\n        v = [[-o / 2, m / 2], [o / 2, m / 2], ...(s - m / 2 < 0 ? [[-o / 2, -m / 2], [o / 2, -m / 2]] : [[o / 2, -m / 2], [-o / 2, -m / 2]])];\n      } else if (s + y - m / 2 < 180 && s + y + m / 2 > 180) {\n        v = [[-o / 2, -m / 2]];\n        const e = Math.floor(o / 6),\n          t = o / e;\n        for (let i = 0; i <= e; i++) v.push([i * t - o / 2, 90 - s]);\n        v.push([o / 2, -m / 2]);\n      }\n      const b = v.map(([e, t]) => n(p + e, s + t, h[0], h[1])),\n        j = await a(b, {\n          feature: u,\n          imageProperties: {\n            width: h[0],\n            height: h[1]\n          },\n          options: i,\n          footprintExtent: d\n        });\n      r(i);\n      const I = [j.map(({\n        x: e,\n        y: t\n      }) => [e, t, 1])];\n      I[0].push(I[0][0]);\n      const F = new c({\n        rings: I,\n        spatialReference: j[0].spatialReference\n      });\n      this.viewModel.updateCurrentCoveragePolygon(new e({\n        geometry: F,\n        attributes: {\n          imageID: w\n        },\n        symbol: l.clone(),\n        visible: f\n      }));\n    };\n  }\n}\nexport { p as default };"],
  "mappings": "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",
  "names": ["p", "s", "b", "n", "m", "d", "t", "i", "j", "I"]
}
