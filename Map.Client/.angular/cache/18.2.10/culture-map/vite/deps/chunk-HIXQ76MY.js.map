{
  "version": 3,
  "sources": ["../../../../../../node_modules/@esri/calcite-components/dist/components/form.js"],
  "sourcesContent": ["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { h } from '@stencil/core/internal/client';\nimport { q as queryElementRoots, c as closestElementCrossShadowBoundary } from './dom.js';\n\n/**\n * Any form <Component> with a `calcite<Component>Input` event needs to be included in this array.\n */\nconst componentsWithInputEvent = [\"calcite-input\", \"calcite-input-number\", \"calcite-input-text\", \"calcite-text-area\"];\n/**\n * Get the event name to listen for that, when emitted, will clear the\n * validation message that displays after form submission. Only validation\n * messages that are set by the browser will be cleared. If a user sets\n * validationMessage to a custom value, they are responsible for clearing it.\n *\n * Exported for testing purposes.\n *\n * @param componentTag the tag of the component, e.g. \"calcite-input\"\n * @returns the event name\n */\nfunction getClearValidationEventName(componentTag) {\n  const componentTagCamelCase = componentTag.split(\"-\").map((part, index) => index === 0 ? part : `${part[0].toUpperCase()}${part.slice(1)}`).join(\"\");\n  const clearValidationEvent = `${componentTagCamelCase}${componentsWithInputEvent.includes(componentTag) ? \"Input\" : \"Change\"}`;\n  return clearValidationEvent;\n}\n/**\n * Exported for testing purposes.\n */\nconst hiddenFormInputSlotName = \"hidden-form-input\";\nfunction isCheckable(component) {\n  return \"checked\" in component;\n}\nconst onFormResetMap = new WeakMap();\nconst formComponentSet = new WeakSet();\n/**\n * This helps determine if our form component is part of a composite form-associated component.\n *\n * @param form\n * @param formComponentEl\n */\nfunction hasRegisteredFormComponentParent(form, formComponentEl) {\n  // if we have a parent component using the form ID attribute, we assume it is form-associated\n  const hasParentComponentWithFormIdSet = closestElementCrossShadowBoundary(formComponentEl.parentElement, \"[form]\");\n  if (hasParentComponentWithFormIdSet) {\n    return true;\n  }\n  // we use events as a way to test for nested form-associated components across shadow bounds\n  const formComponentRegisterEventName = \"calciteInternalFormComponentRegister\";\n  let hasRegisteredFormComponentParent = false;\n  form.addEventListener(formComponentRegisterEventName, event => {\n    hasRegisteredFormComponentParent = event.composedPath().some(element => formComponentSet.has(element));\n    event.stopPropagation();\n  }, {\n    once: true\n  });\n  formComponentEl.dispatchEvent(new CustomEvent(formComponentRegisterEventName, {\n    bubbles: true,\n    composed: true\n  }));\n  return hasRegisteredFormComponentParent;\n}\nfunction displayValidationMessage(component, {\n  status,\n  message,\n  icon\n}) {\n  if (\"status\" in component) {\n    component.status = status;\n  }\n  if (\"validationIcon\" in component && typeof component.validationIcon !== \"string\") {\n    component.validationIcon = icon;\n  }\n  if (\"validationMessage\" in component && !component.validationMessage) {\n    component.validationMessage = message;\n  }\n}\nfunction getValidationComponent(el) {\n  // radio-button is formAssociated, but the validation props are on the parent group\n  if (el.nodeName === \"CALCITE-RADIO-BUTTON\") {\n    return closestElementCrossShadowBoundary(el, \"calcite-radio-button-group\");\n  }\n  return el;\n}\nconst invalidEvent = new CustomEvent(\"calciteInvalid\", {\n  bubbles: true,\n  composed: true\n});\nfunction invalidHandler(event) {\n  // target is the hidden input, which is slotted in the actual form component\n  const hiddenInput = event?.target;\n  const hiddenInputMessage = hiddenInput?.validationMessage;\n  // not necessarily a calcite-input, but we don't have an HTMLCalciteFormAssociatedElement type\n  const formComponent = getValidationComponent(hiddenInput?.parentElement);\n  if (!formComponent) {\n    return;\n  }\n  const componentTag = formComponent?.nodeName?.toLowerCase();\n  const componentTagParts = componentTag?.split(\"-\");\n  if (componentTagParts.length < 2 || componentTagParts[0] !== \"calcite\") {\n    return;\n  }\n  // prevent the browser from showing the native validation popover\n  event?.preventDefault();\n  if (\"validity\" in formComponent) {\n    formComponent.validity = hiddenInput?.validity;\n  }\n  // dispatch a \"calciteInvalid\" so users can set custom validation messages\n  formComponent.dispatchEvent(invalidEvent);\n  displayValidationMessage(formComponent, {\n    message: hiddenInputMessage,\n    icon: true,\n    status: \"invalid\"\n  });\n  const clearValidationEvent = getClearValidationEventName(componentTag);\n  formComponent.addEventListener(clearValidationEvent, () => {\n    if (\"status\" in formComponent) {\n      formComponent.status = \"idle\";\n    }\n    if (\"validationIcon\" in formComponent && !formComponent.validationIcon) {\n      formComponent.validationIcon = false;\n    }\n    if (\"validationMessage\" in formComponent && formComponent.validationMessage === hiddenInputMessage) {\n      formComponent.validationMessage = \"\";\n    }\n    if (\"validity\" in formComponent) {\n      formComponent.validity = hiddenInput?.validity;\n    }\n  }, {\n    once: true\n  });\n}\n/**\n * Helper to submit a form.\n *\n * @param component\n * @returns true if its associated form was submitted, false otherwise.\n */\nfunction submitForm(component) {\n  const {\n    formEl\n  } = component;\n  if (!formEl) {\n    return false;\n  }\n  formEl.addEventListener(\"invalid\", invalidHandler, true);\n  formEl.requestSubmit();\n  formEl.removeEventListener(\"invalid\", invalidHandler, true);\n  requestAnimationFrame(() => {\n    const invalidEls = formEl.querySelectorAll(\"[status=invalid]\");\n    // focus the first invalid element that has a validation message\n    for (const el of invalidEls) {\n      if (el?.validationMessage) {\n        el?.setFocus();\n        break;\n      }\n    }\n  });\n  return true;\n}\n/**\n * Helper to reset a form.\n *\n * @param component\n */\nfunction resetForm(component) {\n  component.formEl?.reset();\n}\n/**\n * Helper to set up form interactions on connectedCallback.\n *\n * @param component\n */\nfunction connectForm(component) {\n  const {\n    el,\n    value\n  } = component;\n  const associatedForm = findAssociatedForm(component);\n  if (!associatedForm || hasRegisteredFormComponentParent(associatedForm, el)) {\n    return;\n  }\n  component.formEl = associatedForm;\n  component.defaultValue = value;\n  if (isCheckable(component)) {\n    component.defaultChecked = component.checked;\n  }\n  const boundOnFormReset = (component.onFormReset || onFormReset).bind(component);\n  associatedForm.addEventListener(\"reset\", boundOnFormReset);\n  onFormResetMap.set(component.el, boundOnFormReset);\n  formComponentSet.add(el);\n}\n/**\n * Utility method to find a form-component's associated form element.\n *\n * @param component\n */\nfunction findAssociatedForm(component) {\n  const {\n    el,\n    form\n  } = component;\n  return form ? queryElementRoots(el, {\n    id: form\n  }) : closestElementCrossShadowBoundary(el, \"form\");\n}\nfunction onFormReset() {\n  if (\"status\" in this) {\n    this.status = \"idle\";\n  }\n  if (\"validationIcon\" in this) {\n    this.validationIcon = false;\n  }\n  if (\"validationMessage\" in this) {\n    this.validationMessage = \"\";\n  }\n  if (isCheckable(this)) {\n    this.checked = this.defaultChecked;\n    return;\n  }\n  this.value = this.defaultValue;\n}\n/**\n * Helper to tear down form interactions on disconnectedCallback.\n *\n * @param component\n */\nfunction disconnectForm(component) {\n  const {\n    el,\n    formEl\n  } = component;\n  if (!formEl) {\n    return;\n  }\n  const boundOnFormReset = onFormResetMap.get(el);\n  formEl.removeEventListener(\"reset\", boundOnFormReset);\n  onFormResetMap.delete(el);\n  component.formEl = null;\n  formComponentSet.delete(el);\n}\n/**\n * Helper for setting the default value on initialization after connectedCallback.\n *\n * Note that this is only needed if the default value cannot be determined on connectedCallback.\n *\n * @param component\n * @param value\n */\nfunction afterConnectDefaultValueSet(component, value) {\n  component.defaultValue = value;\n}\nconst internalHiddenInputInputEvent = \"calciteInternalHiddenInputInput\";\nconst hiddenInputInputHandler = event => {\n  event.target.dispatchEvent(new CustomEvent(internalHiddenInputInputEvent, {\n    bubbles: true\n  }));\n};\nconst removeHiddenInputChangeEventListener = input => input.removeEventListener(\"input\", hiddenInputInputHandler);\n/**\n * Helper for maintaining a form-associated's hidden input in sync with the component.\n *\n * Based on Ionic's approach: https://github.com/ionic-team/ionic-framework/blob/e4bf052794af9aac07f887013b9250d2a045eba3/core/src/utils/helpers.ts#L198\n *\n * @param component\n */\nfunction syncHiddenFormInput(component) {\n  const {\n    el,\n    formEl,\n    name,\n    value\n  } = component;\n  const {\n    ownerDocument\n  } = el;\n  const inputs = el.querySelectorAll(`input[slot=\"${hiddenFormInputSlotName}\"]`);\n  if (!formEl || !name) {\n    inputs.forEach(input => {\n      removeHiddenInputChangeEventListener(input);\n      input.remove();\n    });\n    return;\n  }\n  const values = Array.isArray(value) ? value : [value];\n  const extra = [];\n  const seen = new Set();\n  inputs.forEach(input => {\n    const valueMatch = values.find(val => /* intentional non-strict equality check */\n    val == input.value);\n    if (valueMatch != null) {\n      seen.add(valueMatch);\n      defaultSyncHiddenFormInput(component, input, valueMatch);\n    } else {\n      extra.push(input);\n    }\n  });\n  let docFrag;\n  values.forEach(value => {\n    if (seen.has(value)) {\n      return;\n    }\n    let input = extra.pop();\n    if (!input) {\n      input = ownerDocument.createElement(\"input\");\n      input.slot = hiddenFormInputSlotName;\n    }\n    if (!docFrag) {\n      docFrag = ownerDocument.createDocumentFragment();\n    }\n    docFrag.append(input);\n    // emits when hidden input is autofilled\n    input.addEventListener(\"input\", hiddenInputInputHandler);\n    defaultSyncHiddenFormInput(component, input, value);\n  });\n  if (docFrag) {\n    el.append(docFrag);\n  }\n  extra.forEach(input => {\n    removeHiddenInputChangeEventListener(input);\n    input.remove();\n  });\n}\nfunction defaultSyncHiddenFormInput(component, input, value) {\n  const {\n    defaultValue,\n    disabled,\n    form,\n    name,\n    required\n  } = component;\n  // keep in sync to prevent losing reset value\n  input.defaultValue = defaultValue;\n  input.disabled = disabled;\n  input.name = name;\n  input.required = required;\n  input.tabIndex = -1;\n  // we set the attr as the prop is read-only\n  if (form) {\n    input.setAttribute(\"form\", form);\n  } else {\n    input.removeAttribute(\"form\");\n  }\n  if (isCheckable(component)) {\n    input.checked = component.checked;\n    // keep in sync to prevent losing reset value\n    input.defaultChecked = component.defaultChecked;\n    // heuristic to support default/on mode from https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n    input.value = component.checked ? value || \"on\" : \"\";\n  } else {\n    input.value = value || \"\";\n  }\n  component.syncHiddenFormInput?.(input);\n  const validationComponent = getValidationComponent(component.el);\n  if (validationComponent && \"validity\" in validationComponent) {\n    // mutate the component's validity object to prevent a rerender\n    // https://stenciljs.com/docs/properties#mutable-arrays-and-objects\n    for (const key in {\n      ...input?.validity\n    }) {\n      validationComponent.validity[key] = input.validity[key];\n    }\n  }\n}\n/**\n * Helper to render the slot for form-associated component's hidden input.\n *\n * If the component has a default slot, this must be placed at the bottom of the component's root container to ensure it is the last child.\n *\n * render(): VNode {\n *   <Host>\n *     <div class={CSS.container}>\n *     // ...\n *     <HiddenFormInputSlot component={this} />\n *     </div>\n *   </Host>\n * }\n *\n * Note that the hidden-form-input Sass mixin must be added to the component's style to apply specific styles.\n *\n * @param root0\n * @param root0.component\n */\nconst HiddenFormInputSlot = ({\n  component\n}) => {\n  syncHiddenFormInput(component);\n  return h(\"slot\", {\n    name: hiddenFormInputSlotName\n  });\n};\nexport { HiddenFormInputSlot as H, afterConnectDefaultValueSet as a, connectForm as c, disconnectForm as d, findAssociatedForm as f, internalHiddenInputInputEvent as i, resetForm as r, submitForm as s };\n\n"],
  "mappings": "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",
  "names": ["hasRegisteredFormComponentParent", "value"]
}
