{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/ShadowCastAccumulate.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { invert as e, translate as a } from \"../core/libs/gl-matrix-2/math/mat4.js\";\nimport { create as r } from \"../core/libs/gl-matrix-2/factories/mat4f64.js\";\nimport { ScreenSpacePass as o } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";\nimport { ReadDepth as i } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js\";\nimport { ReadShadowMapPass as s } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { CameraSpace as t } from \"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";\nimport { RgbaFloatEncoding as d } from \"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";\nimport { glsl as l } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { Matrix4PassUniform as n } from \"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";\nimport { ShaderBuilder as c } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as p } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nconst h = 255,\n  m = 1 / h;\nfunction w(r) {\n  const h = new c(),\n    w = h.fragment;\n  return w.include(d), w.include(i), h.include(t), h.include(o), h.include(s, r), w.uniforms.add(new p(\"shadowMap\", (e, a) => a.shadowMap.depthTexture), new p(\"depthMap\", (e, a) => a.depth?.attachment), new n(\"inverseViewMatrix\", (r, o) => e(u, a(u, o.camera.viewMatrix, o.camera.center)))), w.constants.add(\"sampleValue\", \"float\", m), h.outputs.add(\"sampleCount\", \"float\"), w.code.add(l`void main(void) {\nfloat depth = depthFromTexture(depthMap, uv);\nif (depth >= 1.0 || depth <= 0.0) {\ndiscard;\n}\nfloat currentPixelDepth = linearizeDepth(depth);\nvec4 currentPixelPos = vec4(reconstructPosition(gl_FragCoord.xy, currentPixelDepth), 1.0);\nvec4 worldSpacePos = inverseViewMatrix * currentPixelPos;\nmat4 shadowMatrix;\nfloat linearDepth = -currentPixelDepth;\nint i = chooseCascade(linearDepth, shadowMatrix);\nif (i >= numCascades) {\ndiscard;\n}\nvec3 lvpos = lightSpacePosition(worldSpacePos.xyz, shadowMatrix);\nif (lvpos.z >= 1.0 || lvpos.x < 0.0 || lvpos.x > 1.0 || lvpos.y < 0.0 || lvpos.y > 1.0) {\ndiscard;\n}\nivec2 texSize = textureSize(shadowMap, 0);\nivec2 uvShadow = ivec2(cascadeCoordinates(i, texSize, lvpos) * vec2(texSize));\nfloat depthShadow = readShadowMapDepth(uvShadow, shadowMap);\nbool shadow = depthShadow < lvpos.z;\nif (!shadow) {\ndiscard;\n}\nsampleCount = sampleValue;\n}`), h;\n}\nconst u = r(),\n  g = Object.freeze(Object.defineProperty({\n    __proto__: null,\n    ShadowCastMaxSamples: h,\n    build: w\n  }, Symbol.toStringTag, {\n    value: \"Module\"\n  }));\nexport { h as S, g as a, w as b };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,KAAI;AAAV,IACEC,KAAI,IAAID;AACV,SAAS,EAAE,GAAG;AACZ,QAAMA,KAAI,IAAIE,GAAE,GACdC,KAAIH,GAAE;AACR,SAAOG,GAAE,QAAQ,CAAC,GAAGA,GAAE,QAAQ,CAAC,GAAGH,GAAE,QAAQ,CAAC,GAAGA,GAAE,QAAQE,EAAC,GAAGF,GAAE,QAAQ,GAAG,CAAC,GAAGG,GAAE,SAAS,IAAI,IAAI,EAAE,aAAa,CAACC,IAAGC,OAAMA,GAAE,UAAU,YAAY,GAAG,IAAI,EAAE,YAAY,CAACD,IAAGC,OAAMA,GAAE,OAAO,UAAU,GAAG,IAAID,GAAE,qBAAqB,CAACE,IAAGJ,OAAM,EAAE,GAAG,EAAE,GAAGA,GAAE,OAAO,YAAYA,GAAE,OAAO,MAAM,CAAC,CAAC,CAAC,GAAGC,GAAE,UAAU,IAAI,eAAe,SAASF,EAAC,GAAGD,GAAE,QAAQ,IAAI,eAAe,OAAO,GAAGG,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BhY,GAAGH;AACL;AACA,IAAM,IAAI,EAAE;AAAZ,IACE,IAAI,OAAO,OAAO,OAAO,eAAe;AAAA,EACtC,WAAW;AAAA,EACX,sBAAsBA;AAAA,EACtB,OAAO;AACT,GAAG,OAAO,aAAa;AAAA,EACrB,OAAO;AACT,CAAC,CAAC;",
  "names": ["h", "m", "o", "w", "e", "a", "r"]
}
