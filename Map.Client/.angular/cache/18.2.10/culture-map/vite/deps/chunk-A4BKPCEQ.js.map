{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/sources/shaderRepository.js", "../../../../../../node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/sources/resolver.js", "../../../../../../node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/Programs.js", "../../../../../../node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLMaterialManager.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nconst e = {\n  background: {\n    \"background.frag\": \"#ifdef PATTERN\\nuniform lowp float u_opacity;\\nuniform lowp sampler2D u_texture;\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_tileTextureCoord;\\n#else\\nuniform lowp vec4 u_color;\\n#endif\\nvoid main() {\\n#ifdef PATTERN\\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\ngl_FragColor = u_opacity * color;\\n#else\\ngl_FragColor = u_color;\\n#endif\\n}\",\n    \"background.vert\": \"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_coord_range;\\nuniform mediump float u_depth;\\n#ifdef PATTERN\\nuniform mediump mat3 u_pattern_matrix;\\nvarying mediump vec2 v_tileTextureCoord;\\nuniform mediump vec4 u_tlbr;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump vec4 v_tlbr;\\n#endif\\nvoid main() {\\ngl_Position = vec4((u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0)).xy, u_depth, 1.0);\\n#ifdef PATTERN\\nv_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\\nv_tlbr             = u_tlbr / u_mosaicSize.xyxy;\\n#endif\\n}\"\n  },\n  circle: {\n    \"circle.frag\": \"precision lowp float;\\nvarying lowp vec4 v_color;\\nvarying lowp vec4 v_stroke_color;\\nvarying mediump float v_blur;\\nvarying mediump float v_stroke_width;\\nvarying mediump float v_radius;\\nvarying mediump vec2 v_offset;\\nvoid main()\\n{\\nmediump float dist = length(v_offset);\\nmediump float alpha = smoothstep(0.0, -v_blur, dist - 1.0);\\nlowp float color_mix_ratio = v_stroke_width < 0.01 ? 0.0 : smoothstep(-v_blur, 0.0, dist - v_radius / (v_radius + v_stroke_width));\\ngl_FragColor = alpha * mix(v_color, v_stroke_color, color_mix_ratio);\\n}\",\n    \"circle.vert\": \"precision mediump float;\\nattribute vec2 a_pos;\\n#pragma header\\nvarying lowp vec4 v_color;\\nvarying lowp vec4 v_stroke_color;\\nvarying mediump float v_blur;\\nvarying mediump float v_stroke_width;\\nvarying mediump float v_radius;\\nvarying mediump vec2 v_offset;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump vec2 u_circleTranslation;\\nuniform mediump float u_depth;\\nuniform mediump float u_antialiasingWidth;\\nvoid main()\\n{\\n#pragma main\\nv_color = color * opacity;\\nv_stroke_color = stroke_color * stroke_opacity;\\nv_stroke_width = stroke_width;\\nv_radius = radius;\\nv_blur = max(blur, u_antialiasingWidth / (radius + stroke_width));\\nmediump vec2 offset = vec2(mod(a_pos, 2.0) * 2.0 - 1.0);\\nv_offset = offset;\\nmediump vec3 pos = u_dvsMat3 * vec3(a_pos * 0.5, 1.0) + u_displayMat3 * vec3((v_radius + v_stroke_width) * offset + u_circleTranslation, 0.0);\\ngl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"\n  },\n  fill: {\n    \"fill.frag\": \"precision lowp float;\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\nvarying mediump vec2 v_tileTextureCoord;\\nvarying mediump vec4 v_tlbr;\\n#endif\\nvarying lowp vec4 v_color;\\nvec4 mixColors(vec4 color1, vec4 color2) {\\nfloat compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\\nvec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\\nreturn vec4(compositeColor, compositeAlpha);\\n}\\nvoid main()\\n{\\n#ifdef PATTERN\\nmediump vec2 normalizedTextureCoord = fract(v_tileTextureCoord);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\ngl_FragColor = v_color[3] * color;\\n#else\\ngl_FragColor = v_color;\\n#endif\\n}\",\n    \"fill.vert\": \"precision mediump float;\\nattribute vec2 a_pos;\\n#pragma header\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_fillTranslation;\\n#ifdef PATTERN\\n#include <util/util.glsl>\\nuniform mediump vec2 u_mosaicSize;\\nuniform mediump float u_patternFactor;\\nvarying mediump vec2 v_tileTextureCoord;\\nvarying mediump vec4 v_tlbr;\\n#endif\\nvarying lowp vec4 v_color;\\nvoid main()\\n{\\n#pragma main\\nv_color = color * opacity;\\n#ifdef PATTERN\\nfloat patternWidth = nextPOT(tlbr.z - tlbr.x);\\nfloat patternHeight = nextPOT(tlbr.w - tlbr.y);\\nfloat scaleX = 1.0 / (patternWidth * u_patternFactor);\\nfloat scaleY = 1.0 / (patternHeight * u_patternFactor);\\nmat3 patterMat = mat3(scaleX, 0.0,    0.0,\\n0.0,    -scaleY, 0.0,\\n0.0,    0.0,    1.0);\\nv_tileTextureCoord = (patterMat * vec3(a_pos, 1.0)).xy;\\nv_tlbr             = tlbr / u_mosaicSize.xyxy;\\n#endif\\nvec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(u_fillTranslation, 0.0);\\ngl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"\n  },\n  icon: {\n    \"icon.frag\": \"precision mediump float;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nuniform lowp vec4 u_color;\\nuniform lowp vec4 u_outlineColor;\\n#endif\\nvarying mediump vec2 v_tex;\\nvarying lowp float v_opacity;\\nvarying mediump vec2 v_size;\\nvarying lowp vec4 v_color;\\n#ifdef SDF\\nvarying mediump flaot v_halo_width;\\n#endif\\n#include <util/encoding.glsl>\\nvec4 mixColors(vec4 color1, vec4 color2) {\\nfloat compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\\nvec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\\nreturn vec4(compositeColor, compositeAlpha);\\n}\\nvoid main()\\n{\\n#ifdef SDF\\nlowp vec4 fillPixelColor = v_color;\\nfloat d = rgba2float(texture2D(u_texture, v_tex)) - 0.5;\\nconst float softEdgeRatio = 0.248062016;\\nfloat size = max(v_size.x, v_size.y);\\nfloat dist = d * softEdgeRatio * size;\\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\nif (v_halo_width > 0.25) {\\nlowp vec4 outlinePixelColor = u_outlineColor;\\nconst float outlineLimitRatio = (16.0 / 86.0);\\nfloat clampedOutlineSize = softEdgeRatio * min(v_halo_width, outlineLimitRatio * max(v_size.x, v_size.y));\\noutlinePixelColor *= clamp(0.5 - (abs(dist) - clampedOutlineSize), 0.0, 1.0);\\ngl_FragColor = v_opacity * mixColors(fillPixelColor, outlinePixelColor);\\n}\\nelse {\\ngl_FragColor = v_opacity * fillPixelColor;\\n}\\n#else\\nlowp vec4 texColor = texture2D(u_texture, v_tex);\\ngl_FragColor = v_opacity * texColor;\\n#endif\\n}\",\n    \"icon.vert\": \"attribute vec2 a_pos;\\nattribute vec2 a_vertexOffset;\\nattribute vec4 a_texAngleRange;\\nattribute vec4 a_levelInfo;\\nattribute float a_opacityInfo;\\n#pragma header\\nvarying lowp vec4 v_color;\\n#ifdef SDF\\nvarying mediump float v_halo_width;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump vec2 u_iconTranslation;\\nuniform vec2 u_mosaicSize;\\nuniform mediump float u_depth;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_level;\\nuniform lowp float u_keepUpright;\\nuniform mediump float u_fadeDuration;\\nvarying mediump vec2 v_tex;\\nvarying lowp float v_opacity;\\nvarying mediump vec2 v_size;\\nconst float C_OFFSET_PRECISION = 1.0 / 8.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float tileCoordRatio = 1.0 / 8.0;\\nuniform highp float u_time;\\nvoid main()\\n{\\n#pragma main\\nv_color = color;\\nv_opacity = opacity;\\n#ifdef SDF\\nv_halo_width = halo_width;\\n#endif\\nfloat modded = mod(a_opacityInfo, 128.0);\\nfloat targetOpacity = (a_opacityInfo - modded) / 128.0;\\nfloat startOpacity = modded / 127.0;\\nfloat interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\\nv_opacity *= interpolatedOpacity;\\nmediump float a_angle         = a_levelInfo[1];\\nmediump float a_minLevel      = a_levelInfo[2];\\nmediump float a_maxLevel      = a_levelInfo[3];\\nmediump vec2 a_tex            = a_texAngleRange.xy;\\nmediump float delta_z = 0.0;\\nmediump float rotated = mod(a_angle + u_mapRotation, 256.0);\\ndelta_z += (1.0 - step(u_keepUpright, 0.0)) * step(64.0, rotated) * (1.0 - step(192.0, rotated));\\ndelta_z += 1.0 - step(a_minLevel, u_level);\\ndelta_z += step(a_maxLevel, u_level);\\ndelta_z += step(v_opacity, 0.0);\\nvec2 offset = C_OFFSET_PRECISION * a_vertexOffset;\\nv_size = abs(offset);\\n#ifdef SDF\\noffset = (120.0 / 86.0) * offset;\\n#endif\\nmediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayViewMat3 * vec3(size * offset, 0.0) + u_displayMat3 * vec3(u_iconTranslation, 0.0);\\ngl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\\nv_tex = a_tex.xy / u_mosaicSize;\\n}\"\n  },\n  line: {\n    \"line.frag\": \"precision lowp float;\\nvarying mediump vec2 v_normal;\\nvarying highp float v_accumulatedDistance;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp vec4 v_color;\\nvarying mediump float v_blur;\\n#if defined (PATTERN) || defined(SDF)\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\nvarying mediump float v_widthRatio;\\nuniform sampler2D u_texture;\\nuniform mediump float u_antialiasing;\\n#endif\\n#ifdef SDF\\n#include <util/encoding.glsl>\\n#endif\\nvoid main()\\n{\\nmediump float fragDist = length(v_normal) * v_lineHalfWidth;\\nlowp float alpha = clamp((v_lineHalfWidth - fragDist) / v_blur, 0.0, 1.0);\\n#ifdef PATTERN\\nmediump float relativeTexX = fract(v_accumulatedDistance / (v_patternSize.x * v_widthRatio));\\nmediump float relativeTexY = 0.5 + v_normal.y * v_lineHalfWidth / (v_patternSize.y * v_widthRatio);\\nmediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\\nlowp vec4 color = texture2D(u_texture, texCoord);\\ngl_FragColor = alpha * v_color[3] * color;\\n#elif defined(SDF)\\nmediump float relativeTexX = fract((v_accumulatedDistance * 0.5) / (v_patternSize.x * v_widthRatio));\\nmediump float relativeTexY =  0.5 + 0.25 * v_normal.y;\\nmediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\nfloat dist = d * (v_lineHalfWidth + u_antialiasing / 2.0);\\ngl_FragColor = alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\\n#else\\ngl_FragColor = alpha * v_color;\\n#endif\\n}\",\n    \"line.vert\": \"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec4 a_extrude_offset;\\nattribute vec4 a_dir_normal;\\nattribute vec2 a_accumulatedDistance;\\n#pragma header\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump float u_zoomFactor;\\nuniform mediump vec2 u_lineTranslation;\\nuniform mediump float u_antialiasing;\\nuniform mediump float u_depth;\\nvarying mediump vec2 v_normal;\\nvarying highp float v_accumulatedDistance;\\nconst float scale = 1.0 / 31.0;\\nconst mediump float tileCoordRatio = 8.0;\\n#if defined (SDF)\\nconst mediump float sdfPatternHalfWidth = 15.5;\\n#endif\\n#if defined (PATTERN) || defined(SDF)\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\nvarying mediump float v_widthRatio;\\n#endif\\nvarying lowp vec4 v_color;\\nvarying mediump float v_lineHalfWidth;\\nvarying mediump float v_blur;\\nvoid main()\\n{\\n#pragma main\\nv_color = color * opacity;\\nv_blur = blur + u_antialiasing;\\nv_normal = a_dir_normal.zw * scale;\\n#if defined (PATTERN) || defined(SDF)\\nv_tlbr          = tlbr / u_mosaicSize.xyxy;\\nv_patternSize   = vec2(tlbr.z - tlbr.x, tlbr.y - tlbr.w);\\n#if defined (PATTERN)\\nv_widthRatio = width / v_patternSize.y;\\n#else\\nv_widthRatio = width / sdfPatternHalfWidth / 2.0;\\n#endif\\n#endif\\nv_lineHalfWidth = (width + u_antialiasing) * 0.5;\\nmediump vec2 dir = a_dir_normal.xy * scale;\\nmediump vec2 offset_ = a_extrude_offset.zw * scale * offset;\\nmediump vec2 dist = v_lineHalfWidth * scale * a_extrude_offset.xy;\\nmediump vec3 pos = u_dvsMat3 * vec3(a_pos + offset_ * tileCoordRatio / u_zoomFactor, 1.0) + u_displayViewMat3 * vec3(dist, 0.0) + u_displayMat3 * vec3(u_lineTranslation, 0.0);\\ngl_Position = vec4(pos.xy, u_depth, 1.0);\\n#if defined (PATTERN) || defined(SDF)\\nv_accumulatedDistance = a_accumulatedDistance.x * u_zoomFactor / tileCoordRatio + dot(dir, dist + offset_);\\n#endif\\n}\"\n  },\n  outline: {\n    \"outline.frag\": \"varying lowp vec4 v_color;\\nvarying mediump vec2 v_normal;\\nvoid main()\\n{\\nlowp float dist = abs(v_normal.y);\\nlowp float alpha = smoothstep(1.0, 0.0, dist);\\ngl_FragColor = alpha * v_color;\\n}\",\n    \"outline.vert\": \"attribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_xnormal;\\n#pragma header\\nvarying lowp vec4 v_color;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump vec2 u_fillTranslation;\\nuniform mediump float u_depth;\\nuniform mediump float u_outline_width;\\nvarying lowp vec2 v_normal;\\nconst float scale = 1.0 / 15.0;\\nvoid main()\\n{\\n#pragma main\\nv_color = color * opacity;\\nv_normal = a_xnormal;\\nmediump vec2 dist = u_outline_width * scale * a_offset;\\nmediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(dist + u_fillTranslation, 0.0);\\ngl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"\n  },\n  text: {\n    \"text.frag\": \"uniform lowp sampler2D u_texture;\\nvarying lowp vec2 v_tex;\\nvarying lowp vec4 v_color;\\nvarying mediump float v_edgeWidth;\\nvarying mediump float v_edgeDistance;\\nvoid main()\\n{\\nlowp float dist = texture2D(u_texture, v_tex).a;\\nmediump float alpha = smoothstep(v_edgeDistance - v_edgeWidth, v_edgeDistance + v_edgeWidth, dist);\\ngl_FragColor = alpha * v_color;\\n}\",\n    \"text.vert\": \"attribute vec2 a_pos;\\nattribute vec2 a_vertexOffset;\\nattribute vec4 a_texAngleRange;\\nattribute vec4 a_levelInfo;\\nattribute float a_opacityInfo;\\n#pragma header\\nvarying lowp vec4 v_color;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump vec2 u_textTranslation;\\nuniform vec2 u_mosaicSize;\\nuniform mediump float u_depth;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_level;\\nuniform lowp float u_keepUpright;\\nuniform mediump float u_fadeDuration;\\nvarying lowp vec2 v_tex;\\nconst float offsetPrecision = 1.0 / 8.0;\\nconst mediump float edgePos = 0.75;\\nuniform mediump float u_antialiasingWidth;\\nvarying mediump float v_edgeDistance;\\nvarying mediump float v_edgeWidth;\\nuniform lowp float u_halo;\\nconst float sdfFontScale = 1.0 / 24.0;\\nconst float sdfPixel = 3.0;\\nuniform highp float u_time;\\nvoid main()\\n{\\n#pragma main\\nif (u_halo > 0.5)\\n{\\nv_color = halo_color * opacity;\\nhalo_width *= sdfPixel;\\nhalo_blur *= sdfPixel;\\n}\\nelse\\n{\\nv_color = color * opacity;\\nhalo_width = 0.0;\\nhalo_blur = 0.0;\\n}\\nfloat modded = mod(a_opacityInfo, 128.0);\\nfloat targetOpacity = (a_opacityInfo - modded) / 128.0;\\nfloat startOpacity = modded / 127.0;\\nfloat interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\\nv_color *= interpolatedOpacity;\\nmediump float a_angle       = a_levelInfo[1];\\nmediump float a_minLevel    = a_levelInfo[2];\\nmediump float a_maxLevel    = a_levelInfo[3];\\nmediump vec2 a_tex          = a_texAngleRange.xy;\\nmediump float a_visMinAngle    = a_texAngleRange.z;\\nmediump float a_visMaxAngle    = a_texAngleRange.w;\\nmediump float delta_z = 0.0;\\nmediump float angle = mod(a_angle + u_mapRotation, 256.0);\\nif (a_visMinAngle < a_visMaxAngle)\\n{\\ndelta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) + (1.0 - step(a_visMinAngle, angle)));\\n}\\nelse\\n{\\ndelta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) * (1.0 - step(a_visMinAngle, angle)));\\n}\\ndelta_z += 1.0 - step(a_minLevel, u_level);\\ndelta_z += step(a_maxLevel, u_level);\\ndelta_z += step(v_color[3], 0.0);\\nv_tex = a_tex.xy / u_mosaicSize;\\nv_edgeDistance = edgePos - halo_width / size;\\nv_edgeWidth = (u_antialiasingWidth + halo_blur) / size;\\nmediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + sdfFontScale * u_displayViewMat3 * vec3(offsetPrecision * size * a_vertexOffset, 0.0) + u_displayMat3 * vec3(u_textTranslation, 0.0);\\ngl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\\n}\"\n  },\n  util: {\n    \"encoding.glsl\": \"const vec4 rgba2float_factors = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, rgba2float_factors);\\n}\",\n    \"util.glsl\": \"float nextPOT(in float x) {\\nreturn pow(2.0, ceil(log2(abs(x))));\\n}\"\n  }\n};\nexport { e as default };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport r from \"./shaderRepository.js\";\nimport { ShaderCompiler as e } from \"../../../../../webgl/ShaderCompiler.js\";\nfunction o(e) {\n  let o = r;\n  return e.split(\"/\").forEach(r => {\n    o && (o = o[r]);\n  }), o;\n}\nconst t = new e(o);\nfunction n(r) {\n  return t.resolveIncludes(r);\n}\nexport { n as resolveIncludes };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { resolveIncludes as e } from \"./sources/resolver.js\";\nimport { glslifyDefineMap as r } from \"../../../../webgl/programUtils.js\";\nconst t = e => r({\n    PATTERN: e.pattern\n  }),\n  a = {\n    shaders: r => ({\n      vertexShader: t(r) + e(\"background/background.vert\"),\n      fragmentShader: t(r) + e(\"background/background.frag\")\n    })\n  },\n  d = {\n    shaders: r => ({\n      vertexShader: e(\"circle/circle.vert\"),\n      fragmentShader: e(\"circle/circle.frag\")\n    })\n  },\n  n = e => r({\n    PATTERN: e.pattern\n  }),\n  i = {\n    shaders: r => ({\n      vertexShader: n(r) + e(\"fill/fill.vert\"),\n      fragmentShader: n(r) + e(\"fill/fill.frag\")\n    })\n  },\n  l = {\n    shaders: r => ({\n      vertexShader: e(\"outline/outline.vert\"),\n      fragmentShader: e(\"outline/outline.frag\")\n    })\n  },\n  s = e => r({\n    SDF: e.sdf\n  }),\n  f = {\n    shaders: r => ({\n      vertexShader: s(r) + e(\"icon/icon.vert\"),\n      fragmentShader: s(r) + e(\"icon/icon.frag\")\n    })\n  },\n  h = e => r({\n    PATTERN: e.pattern,\n    SDF: e.sdf\n  }),\n  o = {\n    shaders: r => ({\n      vertexShader: h(r) + e(\"line/line.vert\"),\n      fragmentShader: h(r) + e(\"line/line.frag\")\n    })\n  },\n  g = {\n    shaders: r => ({\n      vertexShader: e(\"text/text.vert\"),\n      fragmentShader: e(\"text/text.frag\")\n    })\n  };\nexport { a as background, d as circle, i as fill, f as icon, o as line, l as outline, g as text };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { ShaderProgramType as e } from \"../enums.js\";\nimport { text as r, outline as t, line as a, icon as s, fill as n, circle as c, background as o } from \"./Programs.js\";\nclass p {\n  constructor() {\n    this._programByKey = new Map();\n  }\n  dispose() {\n    this._programByKey.forEach(e => e.dispose()), this._programByKey.clear();\n  }\n  getMaterialProgram(e, r, t) {\n    const a = r.key << 3 | this._getMaterialOptionsValue(r.type, t);\n    if (this._programByKey.has(a)) return this._programByKey.get(a);\n    const s = this._getProgramTemplate(r.type),\n      {\n        shaders: n\n      } = s,\n      {\n        vertexShader: c,\n        fragmentShader: o\n      } = n(t),\n      p = r.getShaderHeader(),\n      u = r.getShaderMain(),\n      i = c.replace(\"#pragma header\", p).replace(\"#pragma main\", u),\n      g = e.programCache.acquire(i, o, r.getAttributeLocations());\n    return this._programByKey.set(a, g), g;\n  }\n  _getMaterialOptionsValue(r, t) {\n    switch (r) {\n      case e.BACKGROUND:\n        return (t.pattern ? 1 : 0) << 1;\n      case e.FILL:\n        return (t.pattern ? 1 : 0) << 1;\n      case e.OUTLINE:\n        return 0;\n      case e.LINE:\n        {\n          const e = t;\n          return (e.sdf ? 1 : 0) << 2 | (e.pattern ? 1 : 0) << 1;\n        }\n      case e.ICON:\n        return (t.sdf ? 1 : 0) << 1;\n      case e.CIRCLE:\n      case e.TEXT:\n      default:\n        return 0;\n    }\n  }\n  _getProgramTemplate(p) {\n    switch (p) {\n      case e.BACKGROUND:\n        return o;\n      case e.CIRCLE:\n        return c;\n      case e.FILL:\n        return n;\n      case e.ICON:\n        return s;\n      case e.LINE:\n        return a;\n      case e.OUTLINE:\n        return t;\n      case e.TEXT:\n        return r;\n      default:\n        return null;\n    }\n  }\n}\nexport { p as default };"],
  "mappings": "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",
  "names": ["e", "e", "o", "n", "t", "e", "n", "o", "e", "t", "a", "s", "n", "o", "p", "i", "g"]
}
