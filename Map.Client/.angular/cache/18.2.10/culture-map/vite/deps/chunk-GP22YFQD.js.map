{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/layers/TiledLayerView3D.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { _ as e } from \"../../../chunks/tslib.es6.js\";\nimport t from \"../../../core/Error.js\";\nimport { whenOnce as i } from \"../../../core/reactiveUtils.js\";\nimport { property as a } from \"../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../core/has.js\";\nimport \"../../../core/Logger.js\";\nimport \"../../../core/RandomLCG.js\";\nimport { subclass as r } from \"../../../core/accessorSupport/decorators/subclass.js\";\nimport { LayerViewPerformanceInfo as l } from \"./support/LayerViewPerformanceInfo.js\";\nimport { updatingProgress as s, updatingProgressValue as n } from \"../support/updatingProperties.js\";\nimport { checkIfTileInfoSupportedForView as o } from \"../terrain/terrainUtils.js\";\nimport { isScaleRangeActive as c, validateScaleRange as h } from \"../../support/layerViewUtils.js\";\nconst p = p => {\n  let m = class extends p {\n    constructor() {\n      super(...arguments), this.hasMixedImageFormats = !0;\n    }\n    get imageFormatIsOpaque() {\n      return !1;\n    }\n    get fullExtent() {\n      return this.layer.fullExtent;\n    }\n    get isOpaque() {\n      return this.fullOpacity >= 1 && this.imageFormatIsOpaque;\n    }\n    get visibleAtCurrentScale() {\n      if (!c(this.layer.minScale, this.layer.maxScale) || !this.view.terrainScale) return !0;\n      const e = Math.round(this.view.basemapTerrain.tilingScheme.levelAtScale(this.view.terrainScale));\n      return e >= this.displayLevelRange.minLevel && e <= this.displayLevelRange.maxLevel;\n    }\n    get dataScaleRange() {\n      const e = this.tileInfo.lods;\n      let t = e[0].scale,\n        i = e[e.length - 1].scale;\n      if (\"tilemapCache\" in this.layer && this.layer.tilemapCache) {\n        const {\n          effectiveMinLOD: e,\n          effectiveMaxLOD: a\n        } = this.layer.tilemapCache;\n        t = this.tileInfo.lodAt(e).scale, i = this.tileInfo.lodAt(a).scale;\n      }\n      return {\n        minScale: t,\n        maxScale: i\n      };\n    }\n    canResume() {\n      const e = this.layer && \"effectiveScaleRange\" in this.layer ? this.layer.effectiveScaleRange : null;\n      return this.visible && this.layer?.loaded && !this.parent?.suspended && this.view?.ready && h(e) && this.visibleAtCurrentTimeExtent || !1;\n    }\n    get dataLevelRange() {\n      const {\n        minScale: e,\n        maxScale: t\n      } = this.dataScaleRange;\n      return this.levelRangeFromScaleRange(e, t);\n    }\n    get displayLevelRange() {\n      const e = this.layer.minScale || this.dataScaleRange.minScale,\n        t = this.layer.maxScale || this.dataScaleRange.maxScale,\n        i = this.levelRangeFromScaleRange(e, t);\n      return this.layer.maxScale && i.maxLevel++, i;\n    }\n    get performanceInfo() {\n      return new l(this.view.basemapTerrain.getUsedMemoryForLayerView(this));\n    }\n    getTileUrl(e) {\n      return this.layer.getTileUrl(e[0], e[1], e[2]);\n    }\n    _addTilingSchemeMatchPromise() {\n      if (null == this.fullExtent) return this.addResolvingPromise(Promise.reject(new t(\"tilingscheme:extent-not-defined\", \"This layer doesn't define a fullExtent.\")));\n      const e = this._getTileInfoSupportError(this.tileInfo, this.fullExtent);\n      if (e) return this.addResolvingPromise(Promise.reject(e));\n      this.addResolvingPromise(i(() => this.view?.basemapTerrain?.tilingSchemeLocked).then(() => {\n        const e = this.view.basemapTerrain.tilingScheme,\n          t = \"tilemapCache\" in this.layer ? this.layer.tilemapCache?.effectiveMaxLOD : void 0,\n          i = this._getTileInfoCompatibilityError(this.tileInfo, e, t);\n        if (i) throw i;\n      }));\n    }\n    _getTileInfoSupportError(e, i) {\n      const a = o(e, i, this.view.spatialReference, this.view.state.viewingMode, \"tilemapCache\" in this.layer ? this.layer.tilemapCache?.effectiveMaxLOD : void 0);\n      if (!a) return;\n      const r = {\n        layer: this.layer,\n        error: a\n      };\n      switch (a.name) {\n        case \"tilingscheme:spatial-reference-mismatch\":\n        case \"tilingscheme:global-unsupported-spatial-reference\":\n        case \"tilingscheme:local-unsupported-spatial-reference\":\n          return new t(\"layerview:spatial-reference-incompatible\", \"The spatial reference of this layer does not meet the requirements of the view\", r);\n        default:\n          return new t(\"layerview:tiling-scheme-unsupported\", \"The tiling scheme of this layer is not supported by SceneView\", r);\n      }\n    }\n    _getTileInfoCompatibilityError(e, i, a) {\n      return null != e && i.compatibleWith(e, a) ? null : new t(\"layerview:tiling-scheme-incompatible\", \"The tiling scheme of this layer is incompatible with the tiling scheme of the surface\");\n    }\n    levelRangeFromScaleRange(e, t) {\n      const i = {\n          minLevel: 0,\n          maxLevel: 1 / 0\n        },\n        a = this.view && this.view.basemapTerrain && this.view.basemapTerrain.tilingScheme;\n      if (!a) return i;\n      const r = a.levels[0],\n        l = e => {\n          const t = Math.log(r.scale / e) / Math.LN2;\n          return .5 - Math.abs(.5 - t % 1) < 1e-9 ? Math.round(t) : Math.ceil(t);\n        };\n      return null != e && e > 0 && (i.minLevel = Math.max(0, l(e))), null != t && t > 0 && (i.maxLevel = Math.max(0, l(t))), i;\n    }\n    isUpdating() {\n      return !!(this.view && this.view.basemapTerrain && this.view.basemapTerrain.updating);\n    }\n  };\n  return e([a({\n    readOnly: !0\n  })], m.prototype, \"imageFormatIsOpaque\", null), e([a({\n    readOnly: !0\n  })], m.prototype, \"updating\", void 0), e([a(s)], m.prototype, \"updatingProgress\", void 0), e([a(n)], m.prototype, \"updatingProgressValue\", void 0), e([a()], m.prototype, \"hasMixedImageFormats\", void 0), e([a()], m.prototype, \"fullExtent\", null), e([a({\n    readOnly: !0\n  })], m.prototype, \"isOpaque\", null), e([a({\n    readOnly: !0\n  })], m.prototype, \"visibleAtCurrentScale\", null), e([a()], m.prototype, \"dataScaleRange\", null), e([a({\n    readOnly: !0\n  })], m.prototype, \"dataLevelRange\", null), e([a({\n    readOnly: !0\n  })], m.prototype, \"displayLevelRange\", null), e([a()], m.prototype, \"layer\", void 0), m = e([r(\"esri.views.3d.layers.TiledLayerView3D\")], m), m;\n};\nexport { p as TiledLayerView3D };"],
  "mappings": "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",
  "names": ["p", "e", "t", "i", "a"]
}
