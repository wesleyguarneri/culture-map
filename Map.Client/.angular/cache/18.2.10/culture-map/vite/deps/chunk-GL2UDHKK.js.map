{
  "version": 3,
  "sources": ["../../../../../../node_modules/@esri/calcite-components/dist/components/input.js"],
  "sourcesContent": ["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\n/**\n * Exported for testing purposes only\n */\nconst minMaxStepTypes = [\"date\", \"datetime-local\", \"month\", \"number\", \"range\", \"time\", \"week\"];\n/**\n * Exported for testing purposes only\n */\nconst patternTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"url\"];\n/**\n * Exported for testing purposes only\n */\nconst minMaxLengthTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"textarea\", \"url\"];\nfunction updateConstraintValidation(inputComponent, input, propName, matchesType) {\n  const attributeName = propName.toLowerCase();\n  const value = inputComponent[propName];\n  if (matchesType && value != null) {\n    input.setAttribute(attributeName, `${value}`);\n  } else {\n    // we remove the attribute to ensure validation-constraints are properly reset\n    input.removeAttribute(attributeName);\n  }\n}\n/**\n * Synchronizes the hidden form input with the validation-related input properties.\n *\n * Note: loss of precision is expected due to the hidden input's value and validation-constraint props being strings.\n *\n * @param type - The input type.\n * @param inputComponent\n * @param hiddenFormInput\n */\nfunction syncHiddenFormInput(type, inputComponent, hiddenFormInput) {\n  hiddenFormInput.type = type === \"textarea\" ? \"text\" : type;\n  const isMinMaxStepType = minMaxStepTypes.includes(type);\n  const numericInputComponent = inputComponent;\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"min\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"max\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"step\", isMinMaxStepType);\n  const isMinMaxLengthType = minMaxLengthTypes.includes(type);\n  const textualInputComponent = inputComponent;\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"minLength\", isMinMaxLengthType);\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"maxLength\", isMinMaxLengthType);\n  const isPatternType = patternTypes.includes(type);\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"pattern\", isPatternType);\n}\nexport { syncHiddenFormInput as s };\n\n"],
  "mappings": ";AAQA,IAAM,kBAAkB,CAAC,QAAQ,kBAAkB,SAAS,UAAU,SAAS,QAAQ,MAAM;AAI7F,IAAM,eAAe,CAAC,SAAS,YAAY,UAAU,OAAO,QAAQ,KAAK;AAIzE,IAAM,oBAAoB,CAAC,SAAS,YAAY,UAAU,OAAO,QAAQ,YAAY,KAAK;AAC1F,SAAS,2BAA2B,gBAAgB,OAAO,UAAU,aAAa;AAChF,QAAM,gBAAgB,SAAS,YAAY;AAC3C,QAAM,QAAQ,eAAe,QAAQ;AACrC,MAAI,eAAe,SAAS,MAAM;AAChC,UAAM,aAAa,eAAe,GAAG,KAAK,EAAE;AAAA,EAC9C,OAAO;AAEL,UAAM,gBAAgB,aAAa;AAAA,EACrC;AACF;AAUA,SAAS,oBAAoB,MAAM,gBAAgB,iBAAiB;AAClE,kBAAgB,OAAO,SAAS,aAAa,SAAS;AACtD,QAAM,mBAAmB,gBAAgB,SAAS,IAAI;AACtD,QAAM,wBAAwB;AAC9B,6BAA2B,uBAAuB,iBAAiB,OAAO,gBAAgB;AAC1F,6BAA2B,uBAAuB,iBAAiB,OAAO,gBAAgB;AAC1F,6BAA2B,uBAAuB,iBAAiB,QAAQ,gBAAgB;AAC3F,QAAM,qBAAqB,kBAAkB,SAAS,IAAI;AAC1D,QAAM,wBAAwB;AAC9B,6BAA2B,uBAAuB,iBAAiB,aAAa,kBAAkB;AAClG,6BAA2B,uBAAuB,iBAAiB,aAAa,kBAAkB;AAClG,QAAM,gBAAgB,aAAa,SAAS,IAAI;AAChD,6BAA2B,uBAAuB,iBAAiB,WAAW,aAAa;AAC7F;",
  "names": []
}
