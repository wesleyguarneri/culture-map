{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/layers/support/fetchTile.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from \"../../../../core/Logger.js\";\nimport { isAborted as r, createAbortError as t } from \"../../../../core/promiseUtils.js\";\nimport { isRefreshableLayer as s } from \"../../../../layers/mixins/RefreshableLayer.js\";\nimport { useFetchTileForLayer as o } from \"../../terrain/terrainUtils.js\";\nasync function i(i, a, l) {\n  const m = i.layer;\n  if (o(m)) {\n    const s = await m.fetchTile(a[0], a[1], a[2], l);\n    if (r(l)) throw e.getLogger(i).warnOnce(\"A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true.\"), t();\n    return s;\n  }\n  let n = i.getTileUrl(a);\n  s(m) && m.refreshTimestamp && (n += `${n.includes(\"?\") ? \"&\" : \"?\"}_ts=${m.refreshTimestamp}`);\n  const f = i.hasMixedImageFormats ? \"image+type\" : \"image\";\n  return l.requester.request(n, f, l);\n}\nexport { i as fetchTile };"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAQA,SAAe,EAAEA,IAAG,GAAG,GAAG;AAAA;AACxB,UAAMC,KAAID,GAAE;AACZ,QAAI,EAAEC,EAAC,GAAG;AACR,YAAM,IAAI,MAAMA,GAAE,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;AAC/C,UAAI,EAAE,CAAC,EAAG,OAAM,EAAE,UAAUD,EAAC,EAAE,SAAS,mIAAmI,GAAG,EAAE;AAChL,aAAO;AAAA,IACT;AACA,QAAIE,KAAIF,GAAE,WAAW,CAAC;AACtB,MAAEC,EAAC,KAAKA,GAAE,qBAAqBC,MAAK,GAAGA,GAAE,SAAS,GAAG,IAAI,MAAM,GAAG,OAAOD,GAAE,gBAAgB;AAC3F,UAAM,IAAID,GAAE,uBAAuB,eAAe;AAClD,WAAO,EAAE,UAAU,QAAQE,IAAG,GAAG,CAAC;AAAA,EACpC;AAAA;",
  "names": ["i", "m", "n"]
}
