{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/layers/graphics/sources/support/uploads.js", "../../../../../../node_modules/@arcgis/core/layers/graphics/sources/support/uploadAssets.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from \"../../../../request.js\";\nimport { throwIfAborted as o } from \"../../../../core/promiseUtils.js\";\nimport { join as t } from \"../../../../core/urlUtils.js\";\nimport { isHostedAgolService as r } from \"../../../support/arcgisLayerUrl.js\";\nimport { makeProgressManager as s, estimatedTransferTime as a } from \"../../../../support/progressUtils.js\";\nconst n = 1e6,\n  i = 20 * n,\n  p = 2e9,\n  l = 3;\nasync function m({\n  data: m,\n  name: f,\n  description: d\n}, u, h) {\n  let w = null;\n  try {\n    const y = t(u, \"uploads\"),\n      j = t(y, \"info\"),\n      {\n        data: g\n      } = await e(j, {\n        query: {\n          f: \"json\"\n        },\n        responseType: \"json\"\n      });\n    o(h);\n    const q = r(u),\n      z = g.maxUploadFileSize * n,\n      T = q ? p : z,\n      U = q ? Math.min(i, z) : i;\n    if (m.size > T) throw new Error(\"Data too large\");\n    const A = t(y, \"register\"),\n      {\n        data: E\n      } = await e(A, {\n        query: {\n          f: \"json\",\n          itemName: c(f),\n          description: d\n        },\n        responseType: \"json\",\n        method: \"post\"\n      });\n    if (o(h), !E.success) throw new Error(\"Registration failed\");\n    const {\n      itemID: P\n    } = E.item;\n    w = t(y, P);\n    const D = t(w, \"uploadPart\"),\n      I = Math.ceil(m.size / U),\n      M = new Array();\n    for (let e = 0; e < I; ++e) M.push(m.slice(e * U, Math.min((e + 1) * U, m.size)));\n    const v = M.slice().reverse(),\n      x = new Array(),\n      F = s(I, h?.onProgress, \"uploadItem\"),\n      _ = async () => {\n        for (; 0 !== v.length;) {\n          const t = M.length - v.length,\n            r = v.pop(),\n            s = new FormData(),\n            n = F.simulate(t, a(r.size));\n          try {\n            s.append(\"f\", \"json\"), s.append(\"file\", r), s.append(\"partId\", `${t}`);\n            const {\n              data: a\n            } = await e(D, {\n              timeout: 0,\n              body: s,\n              responseType: \"json\",\n              method: \"post\"\n            });\n            if (o(h), !a.success) throw new Error(\"Part upload failed\");\n          } finally {\n            n.remove();\n          }\n        }\n      };\n    for (let e = 0; e < l && 0 !== v.length; ++e) x.push(_());\n    await Promise.all(x);\n    const b = t(w, \"commit\"),\n      {\n        data: C\n      } = await e(b, {\n        query: {\n          f: \"json\",\n          parts: M.map((e, o) => o).join(\",\")\n        },\n        responseType: \"json\",\n        method: \"post\"\n      });\n    if (o(h), !C.success) throw new Error(\"Commit failed\");\n    return C.item;\n  } catch (y) {\n    if (null != w) {\n      const o = t(w, \"delete\");\n      await e(o, {\n        query: {\n          f: \"json\"\n        },\n        responseType: \"json\",\n        method: \"post\"\n      });\n    }\n    throw y;\n  }\n}\nfunction c(e) {\n  return e.replaceAll(\"/\", \"_\").replaceAll(\"\\\\\", \"_\");\n}\nexport { m as uploadItem };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport s from \"../../../../request.js\";\nimport \"../../../../core/has.js\";\nimport e from \"../../../../core/Logger.js\";\nimport { throwIfAborted as t, after as r, throwIfAbortError as o } from \"../../../../core/promiseUtils.js\";\nimport { Milliseconds as n } from \"../../../../core/time.js\";\nimport { join as a, parseData as i } from \"../../../../core/urlUtils.js\";\nimport { generateBracedUUID as c } from \"../../../../core/uuid.js\";\nimport { externalIsOnService as u, assetFormatId as l, ServiceAsset as p, ServiceAssetPart as m, externalSourceToMultiPart as f } from \"../../../../geometry/support/meshUtils/External.js\";\nimport { UnsupportedError as g, NoSupportedSourceError as d, BadResponseError as y, UploadFailedError as w, UnsupportedFormatUploadedError as h, Convert3DFailedError as P, NoGlbSupportError as T, NotBase64Error as b, UnableToPrepareOptionsError as j } from \"./uploadAssetErrors.js\";\nimport { uploadProgressWeights as A } from \"./uploadProgressWeights.js\";\nimport { uploadItem as F } from \"./uploads.js\";\nimport { getFormatIdMimeType as U, getMimeTypeFormatId as S, getFilenameFormatId as x } from \"../../../support/infoFor3D.js\";\nimport { makeProgressManager as E, estimatedConversionTime as N, simulateProgress as D } from \"../../../../support/progressUtils.js\";\nasync function O(s, e, t) {\n  const r = s.length;\n  if (!r) return t?.onProgress?.(1), [];\n  const o = E(r, t?.onProgress, \"uploadAssets\");\n  return Promise.all(s.map((s, r) => v(s, e, {\n    ...t,\n    onProgress: o.makeOnProgress(r)\n  })));\n}\nasync function v(s, {\n  layer: e,\n  ongoingUploads: t\n}, r) {\n  const o = t.get(s);\n  if (o) return o;\n  if (!Z(e)) throw new g();\n  if (I(s, e)) return r?.onProgress?.(1), s;\n  const n = k(s, e, r);\n  t.set(s, n);\n  try {\n    await n;\n  } finally {\n    t.delete(s);\n  }\n  return s;\n}\nfunction I(s, e) {\n  const {\n    parsedUrl: t\n  } = e;\n  return null != t && s.metadata.externalSources.some(s => u(s, t));\n}\nasync function k(s, e, r) {\n  const {\n      metadata: o\n    } = s,\n    {\n      displaySource: n\n    } = o,\n    a = H(n?.source, e),\n    i = !!a,\n    c = o.externalSources.length > 0,\n    u = i ? B(a, e, r) : c ? R(s, e, r) : C(s, e, r),\n    l = await u;\n  return t(r), s.addExternalSources([l]), s;\n}\nasync function B(s, e, t) {\n  return {\n    source: await G(s, e, t),\n    original: !0\n  };\n}\nasync function R(s, e, t) {\n  const r = _(e),\n    {\n      externalSources: o\n    } = s.metadata,\n    n = q(o, e);\n  if (!n) throw new d();\n  const a = E(A.uploadConvertibleSource, t?.onProgress, \"uploadConvertibleSource\"),\n    i = await G(n, e, {\n      onProgress: a.makeOnProgress(\"uploadEditSource\")\n    });\n  s.addExternalSources([{\n    source: i,\n    original: !0\n  }]);\n  const c = n.reduce((s, {\n      asset: e\n    }) => e instanceof File ? s + e.size : s, 0),\n    u = a.simulate(\"serviceAssetsToGlb\", N(c));\n  try {\n    return {\n      source: await V(i, e, r)\n    };\n  } finally {\n    u.remove();\n  }\n}\nasync function C(s, e, t) {\n  const r = E(A.uploadLocalMesh, t?.onProgress, \"uploadLocalMesh\"),\n    o = L(s, e, {\n      ...t,\n      onProgress: r.makeOnProgress(\"meshToAssetBlob\")\n    });\n  return {\n    source: await J([o], e, {\n      ...t,\n      onProgress: r.makeOnProgress(\"uploadAssetBlobs\")\n    }),\n    extent: s.extent.clone(),\n    original: !0\n  };\n}\nasync function L(s, e, r) {\n  const o = _(e),\n    n = await s.load(r),\n    a = await n.toBinaryGLTF({\n      origin: n.origin,\n      signal: r?.signal,\n      ignoreLocalTransform: !0\n    });\n  return t(r), {\n    blob: new Blob([a], {\n      type: \"model/gltf-binary\"\n    }),\n    assetName: `${c()}.glb`,\n    assetType: o\n  };\n}\nfunction q(s, e) {\n  for (const t of s) {\n    const s = H(t.source, e);\n    if (s) return s;\n  }\n  return null;\n}\nfunction H(s, e) {\n  if (!s) return null;\n  const {\n      infoFor3D: {\n        supportedFormats: t,\n        editFormats: r\n      }\n    } = e,\n    o = f(s),\n    n = new Array();\n  let a = !1;\n  for (let i = 0; i < o.length; ++i) {\n    const s = $(o[i], t);\n    if (!s) return null;\n    r.includes(s.assetType) && (a = !0), n.push(s);\n  }\n  return a ? n : null;\n}\nfunction $(s, e) {\n  const t = l(s, e);\n  return t ? {\n    asset: s,\n    assetType: t\n  } : null;\n}\nasync function G(s, e, t) {\n  return J(s.map(s => M(s, t)), e, t);\n}\nasync function J(s, e, r) {\n  const o = E(A.uploadAssetBlobs, r?.onProgress, \"uploadAssetBlobs\"),\n    n = await z(s, e, {\n      ...r,\n      onProgress: o.makeOnProgress(\"prepareAssetItems\")\n    });\n  t(r);\n  const a = n.map(({\n      item: s\n    }) => s),\n    {\n      uploadResults: i\n    } = await K(a, e, {\n      ...r,\n      onProgress: o.makeOnProgress(\"uploadAssetItems\")\n    });\n  return t(r), s.map((s, t) => Q(n[t], i[t], e));\n}\nasync function M(s, e) {\n  const {\n    asset: r,\n    assetType: o\n  } = s;\n  if (r instanceof File) return {\n    blob: r,\n    assetName: r.name,\n    assetType: o\n  };\n  const n = await r.toBlob(e);\n  return t(e), {\n    blob: n,\n    assetName: r.assetName,\n    assetType: o\n  };\n}\nasync function W(s, e, r) {\n  const {\n    blob: n,\n    assetType: a,\n    assetName: c\n  } = s;\n  let u = null;\n  try {\n    const s = await F({\n      data: n,\n      name: c\n    }, e.url, r);\n    t(r), u = {\n      assetType: a,\n      assetUploadId: s.itemID\n    };\n  } catch (l) {\n    o(l), ss().warnOnce(`Service ${e.url} does not support the REST Uploads API.`);\n  }\n  if (!u) {\n    const s = await i(n);\n    if (t(r), !s.isBase64) throw new b();\n    u = {\n      assetType: a,\n      assetData: s.data\n    };\n  }\n  if (!u) throw new j();\n  return {\n    item: u,\n    assetName: c\n  };\n}\nfunction z(s, e, r) {\n  const o = E(s.length, r?.onProgress, \"prepareAssetItems\");\n  return Promise.all(s.map(async (s, n) => {\n    const a = W(await s, e, {\n      ...r,\n      onProgress: o.makeOnProgress(n)\n    });\n    return t(r), a;\n  }));\n}\nasync function K(e, r, o) {\n  const n = D(o?.onProgress);\n  try {\n    const n = await s(a(r.parsedUrl.path, \"uploadAssets\"), {\n      timeout: 0,\n      query: {\n        f: \"json\",\n        assets: JSON.stringify(e)\n      },\n      method: \"post\",\n      responseType: \"json\"\n    });\n    if (t(o), n.data.uploadResults.length !== e.length) throw new y(e.length, n.data.uploadResults.length);\n    return n.data;\n  } finally {\n    n.remove();\n  }\n}\nfunction Q(s, e, t) {\n  const {\n    success: r\n  } = e;\n  if (!r) {\n    const {\n      error: t\n    } = e;\n    throw new w(s.assetName, t);\n  }\n  const {\n      assetHash: o\n    } = e,\n    {\n      assetName: n,\n      item: {\n        assetType: a\n      }\n    } = s,\n    {\n      infoFor3D: {\n        supportedFormats: i\n      }\n    } = t,\n    c = U(a, i);\n  if (!c) throw new h(a);\n  return new p(n, c, [new m(`${t.parsedUrl.path}/assets/${o}`, o)]);\n}\nasync function V(s, e, t) {\n  const r = s.map(({\n      assetName: s,\n      parts: e\n    }) => ({\n      assetName: s,\n      assetHash: e[0].partHash\n    })),\n    o = e.capabilities?.operations.supportsAsyncConvert3D,\n    n = {\n      f: \"json\",\n      assets: JSON.stringify(r),\n      transportType: \"esriTransportTypeUrl\",\n      targetFormat: t,\n      async: o\n    },\n    i = a(e.parsedUrl.path, \"convert3D\");\n  let c;\n  try {\n    c = (await (o ? Y : X)(i, {\n      query: n,\n      responseType: \"json\",\n      timeout: 0\n    })).data;\n  } catch (l) {\n    throw new P();\n  }\n  const {\n    supportedFormats: u\n  } = e.infoFor3D;\n  return c.assets.map(s => {\n    const e = S(s.contentType, u);\n    if (!e) throw new h(e);\n    return new p(s.assetName, s.contentType, [new m(s.assetURL, s.assetHash)]);\n  });\n}\nfunction X(e, t) {\n  return s(e, t);\n}\nasync function Y(e, t) {\n  const o = (await s(e, t)).data.statusUrl;\n  for (;;) {\n    const e = (await s(o, {\n      query: {\n        f: \"json\"\n      },\n      responseType: \"json\"\n    })).data;\n    switch (e.status) {\n      case \"Completed\":\n        return s(e.resultUrl, {\n          query: {\n            f: \"json\"\n          },\n          responseType: \"json\"\n        });\n      case \"CompletedWithErrors\":\n        throw new Error(e.status);\n      case \"Failed ImportChanges\":\n      case \"InProgress\":\n      case \"Pending\":\n      case \"ExportAttachments\":\n      case \"ExportChanges\":\n      case \"ExportingData\":\n      case \"ExportingSnapshot\":\n      case \"ImportAttachments\":\n      case \"ProvisioningReplica\":\n      case \"UnRegisteringReplica\":\n        break;\n      default:\n        throw new Error();\n    }\n    await r(es);\n  }\n}\nfunction Z(s) {\n  return !!s.infoFor3D && !!s.url;\n}\nfunction _(s) {\n  const {\n      infoFor3D: e\n    } = s,\n    t = S(\"model/gltf-binary\", e.supportedFormats) ?? x(\"glb\", e.supportedFormats);\n  if (!t) throw new T();\n  return t;\n}\nfunction ss() {\n  return e.getLogger(\"esri.layers.graphics.sources.support.uploadAssets\");\n}\nconst es = n(1e3);\nexport { O as uploadAssets };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,KAAI;AAAV,IACEC,KAAI,KAAKD;AADX,IAEEE,KAAI;AAFN,IAGEC,KAAI;AACN,SAAeC,GAAE,IAId,IAAG,IAAG;AAAA,6CAJQ;AAAA,IACf,MAAMA;AAAA,IACN,MAAM;AAAA,IACN,aAAaC;AAAA,EACf,GAAGC,IAAGC,IAAG;AACP,QAAI,IAAI;AACR,QAAI;AACF,YAAM,IAAI,EAAED,IAAG,SAAS,GACtB,IAAI,EAAE,GAAG,MAAM,GACf;AAAA,QACE,MAAME;AAAA,MACR,IAAI,MAAM,EAAE,GAAG;AAAA,QACb,OAAO;AAAA,UACL,GAAG;AAAA,QACL;AAAA,QACA,cAAc;AAAA,MAChB,CAAC;AACH,QAAED,EAAC;AACH,YAAME,KAAI,EAAEH,EAAC,GACXI,KAAIF,GAAE,oBAAoBR,IAC1B,IAAIS,KAAIP,KAAIQ,IACZC,KAAIF,KAAI,KAAK,IAAIR,IAAGS,EAAC,IAAIT;AAC3B,UAAIG,GAAE,OAAO,EAAG,OAAM,IAAI,MAAM,gBAAgB;AAChD,YAAMQ,KAAI,EAAE,GAAG,UAAU,GACvB;AAAA,QACE,MAAM;AAAA,MACR,IAAI,MAAM,EAAEA,IAAG;AAAA,QACb,OAAO;AAAA,UACL,GAAG;AAAA,UACH,UAAUC,GAAE,CAAC;AAAA,UACb,aAAaR;AAAA,QACf;AAAA,QACA,cAAc;AAAA,QACd,QAAQ;AAAA,MACV,CAAC;AACH,UAAI,EAAEE,EAAC,GAAG,CAAC,EAAE,QAAS,OAAM,IAAI,MAAM,qBAAqB;AAC3D,YAAM;AAAA,QACJ,QAAQ;AAAA,MACV,IAAI,EAAE;AACN,UAAI,EAAE,GAAG,CAAC;AACV,YAAM,IAAI,EAAE,GAAG,YAAY,GACzBO,KAAI,KAAK,KAAKV,GAAE,OAAOO,EAAC,GACxBI,KAAI,IAAI,MAAM;AAChB,eAASC,KAAI,GAAGA,KAAIF,IAAG,EAAEE,GAAG,CAAAD,GAAE,KAAKX,GAAE,MAAMY,KAAIL,IAAG,KAAK,KAAKK,KAAI,KAAKL,IAAGP,GAAE,IAAI,CAAC,CAAC;AAChF,YAAMa,KAAIF,GAAE,MAAM,EAAE,QAAQ,GAC1B,IAAI,IAAI,MAAM,GACd,IAAId,GAAEa,IAAGP,IAAG,YAAY,YAAY,GACpCW,KAAI,MAAY;AACd,eAAO,MAAMD,GAAE,UAAS;AACtB,gBAAME,KAAIJ,GAAE,SAASE,GAAE,QACrBG,KAAIH,GAAE,IAAI,GACVI,KAAI,IAAI,SAAS,GACjBrB,KAAI,EAAE,SAASmB,IAAGZ,GAAEa,GAAE,IAAI,CAAC;AAC7B,cAAI;AACF,YAAAC,GAAE,OAAO,KAAK,MAAM,GAAGA,GAAE,OAAO,QAAQD,EAAC,GAAGC,GAAE,OAAO,UAAU,GAAGF,EAAC,EAAE;AACrE,kBAAM;AAAA,cACJ,MAAMG;AAAA,YACR,IAAI,MAAM,EAAE,GAAG;AAAA,cACb,SAAS;AAAA,cACT,MAAMD;AAAA,cACN,cAAc;AAAA,cACd,QAAQ;AAAA,YACV,CAAC;AACD,gBAAI,EAAEd,EAAC,GAAG,CAACe,GAAE,QAAS,OAAM,IAAI,MAAM,oBAAoB;AAAA,UAC5D,UAAE;AACA,YAAAtB,GAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF;AACF,eAASgB,KAAI,GAAGA,KAAIb,MAAK,MAAMc,GAAE,QAAQ,EAAED,GAAG,GAAE,KAAKE,GAAE,CAAC;AACxD,YAAM,QAAQ,IAAI,CAAC;AACnB,YAAM,IAAI,EAAE,GAAG,QAAQ,GACrB;AAAA,QACE,MAAMK;AAAA,MACR,IAAI,MAAM,EAAE,GAAG;AAAA,QACb,OAAO;AAAA,UACL,GAAG;AAAA,UACH,OAAOR,GAAE,IAAI,CAACC,IAAGQ,OAAMA,EAAC,EAAE,KAAK,GAAG;AAAA,QACpC;AAAA,QACA,cAAc;AAAA,QACd,QAAQ;AAAA,MACV,CAAC;AACH,UAAI,EAAEjB,EAAC,GAAG,CAACgB,GAAE,QAAS,OAAM,IAAI,MAAM,eAAe;AACrD,aAAOA,GAAE;AAAA,IACX,SAAS,GAAG;AACV,UAAI,QAAQ,GAAG;AACb,cAAMC,KAAI,EAAE,GAAG,QAAQ;AACvB,cAAM,EAAEA,IAAG;AAAA,UACT,OAAO;AAAA,YACL,GAAG;AAAA,UACL;AAAA,UACA,cAAc;AAAA,UACd,QAAQ;AAAA,QACV,CAAC;AAAA,MACH;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AACA,SAASX,GAAEG,IAAG;AACZ,SAAOA,GAAE,WAAW,KAAK,GAAG,EAAE,WAAW,MAAM,GAAG;AACpD;;;AChGA,SAAe,EAAES,IAAGC,IAAGC,IAAG;AAAA;AACxB,UAAMC,KAAIH,GAAE;AACZ,QAAI,CAACG,GAAG,QAAOD,IAAG,aAAa,CAAC,GAAG,CAAC;AACpC,UAAME,KAAIC,GAAEF,IAAGD,IAAG,YAAY,cAAc;AAC5C,WAAO,QAAQ,IAAIF,GAAE,IAAI,CAACA,IAAGG,OAAM,EAAEH,IAAGC,IAAG,iCACtCC,KADsC;AAAA,MAEzC,YAAYE,GAAE,eAAeD,EAAC;AAAA,IAChC,EAAC,CAAC,CAAC;AAAA,EACL;AAAA;AACA,SAAe,EAAE,IAAG,IAGjB,IAAG;AAAA,6CAHWH,IAAG;AAAA,IAClB,OAAOC;AAAA,IACP,gBAAgBC;AAAA,EAClB,GAAGC,IAAG;AACJ,UAAMC,KAAIF,GAAE,IAAIF,EAAC;AACjB,QAAII,GAAG,QAAOA;AACd,QAAI,CAAC,EAAEH,EAAC,EAAG,OAAM,IAAIE,GAAE;AACvB,QAAI,EAAEH,IAAGC,EAAC,EAAG,QAAOE,IAAG,aAAa,CAAC,GAAGH;AACxC,UAAMM,KAAI,EAAEN,IAAGC,IAAGE,EAAC;AACnB,IAAAD,GAAE,IAAIF,IAAGM,EAAC;AACV,QAAI;AACF,YAAMA;AAAA,IACR,UAAE;AACA,MAAAJ,GAAE,OAAOF,EAAC;AAAA,IACZ;AACA,WAAOA;AAAA,EACT;AAAA;AACA,SAAS,EAAEA,IAAGC,IAAG;AACf,QAAM;AAAA,IACJ,WAAWC;AAAA,EACb,IAAID;AACJ,SAAO,QAAQC,MAAKF,GAAE,SAAS,gBAAgB,KAAK,CAAAA,OAAK,EAAEA,IAAGE,EAAC,CAAC;AAClE;AACA,SAAe,EAAEF,IAAGC,IAAGE,IAAG;AAAA;AACxB,UAAM;AAAA,MACF,UAAUC;AAAA,IACZ,IAAIJ,IACJ;AAAA,MACE,eAAeM;AAAA,IACjB,IAAIF,IACJG,KAAI,EAAED,IAAG,QAAQL,EAAC,GAClBI,KAAI,CAAC,CAACE,IACNC,KAAIJ,GAAE,gBAAgB,SAAS,GAC/BK,KAAIJ,KAAI,EAAEE,IAAGN,IAAGE,EAAC,IAAIK,KAAI,EAAER,IAAGC,IAAGE,EAAC,IAAI,EAAEH,IAAGC,IAAGE,EAAC,GAC/CO,KAAI,MAAMD;AACZ,WAAO,EAAEN,EAAC,GAAGH,GAAE,mBAAmB,CAACU,EAAC,CAAC,GAAGV;AAAA,EAC1C;AAAA;AACA,SAAe,EAAEA,IAAGC,IAAGC,IAAG;AAAA;AACxB,WAAO;AAAA,MACL,QAAQ,MAAM,EAAEF,IAAGC,IAAGC,EAAC;AAAA,MACvB,UAAU;AAAA,IACZ;AAAA,EACF;AAAA;AACA,SAAe,EAAEF,IAAGC,IAAGC,IAAG;AAAA;AACxB,UAAMC,KAAI,EAAEF,EAAC,GACX;AAAA,MACE,iBAAiBG;AAAA,IACnB,IAAIJ,GAAE,UACNM,KAAI,EAAEF,IAAGH,EAAC;AACZ,QAAI,CAACK,GAAG,OAAM,IAAIA,GAAE;AACpB,UAAMC,KAAIF,GAAE,EAAE,yBAAyBH,IAAG,YAAY,yBAAyB,GAC7EG,KAAI,MAAM,EAAEC,IAAGL,IAAG;AAAA,MAChB,YAAYM,GAAE,eAAe,kBAAkB;AAAA,IACjD,CAAC;AACH,IAAAP,GAAE,mBAAmB,CAAC;AAAA,MACpB,QAAQK;AAAA,MACR,UAAU;AAAA,IACZ,CAAC,CAAC;AACF,UAAMG,KAAIF,GAAE,OAAO,CAACN,IAAG;AAAA,MACnB,OAAOC;AAAA,IACT,MAAMA,cAAa,OAAOD,KAAIC,GAAE,OAAOD,IAAG,CAAC,GAC3CS,KAAIF,GAAE,SAAS,sBAAsB,EAAEC,EAAC,CAAC;AAC3C,QAAI;AACF,aAAO;AAAA,QACL,QAAQ,MAAMG,GAAEN,IAAGJ,IAAGE,EAAC;AAAA,MACzB;AAAA,IACF,UAAE;AACA,MAAAM,GAAE,OAAO;AAAA,IACX;AAAA,EACF;AAAA;AACA,SAAe,EAAET,IAAGC,IAAGC,IAAG;AAAA;AACxB,UAAMC,KAAIE,GAAE,EAAE,iBAAiBH,IAAG,YAAY,iBAAiB,GAC7DE,KAAI,EAAEJ,IAAGC,IAAG,iCACPC,KADO;AAAA,MAEV,YAAYC,GAAE,eAAe,iBAAiB;AAAA,IAChD,EAAC;AACH,WAAO;AAAA,MACL,QAAQ,MAAM,EAAE,CAACC,EAAC,GAAGH,IAAG,iCACnBC,KADmB;AAAA,QAEtB,YAAYC,GAAE,eAAe,kBAAkB;AAAA,MACjD,EAAC;AAAA,MACD,QAAQH,GAAE,OAAO,MAAM;AAAA,MACvB,UAAU;AAAA,IACZ;AAAA,EACF;AAAA;AACA,SAAe,EAAEA,IAAGC,IAAGE,IAAG;AAAA;AACxB,UAAMC,KAAI,EAAEH,EAAC,GACXK,KAAI,MAAMN,GAAE,KAAKG,EAAC,GAClBI,KAAI,MAAMD,GAAE,aAAa;AAAA,MACvB,QAAQA,GAAE;AAAA,MACV,QAAQH,IAAG;AAAA,MACX,sBAAsB;AAAA,IACxB,CAAC;AACH,WAAO,EAAEA,EAAC,GAAG;AAAA,MACX,MAAM,IAAI,KAAK,CAACI,EAAC,GAAG;AAAA,QAClB,MAAM;AAAA,MACR,CAAC;AAAA,MACD,WAAW,GAAG,EAAE,CAAC;AAAA,MACjB,WAAWH;AAAA,IACb;AAAA,EACF;AAAA;AACA,SAAS,EAAEJ,IAAGC,IAAG;AACf,aAAWC,MAAKF,IAAG;AACjB,UAAMA,KAAI,EAAEE,GAAE,QAAQD,EAAC;AACvB,QAAID,GAAG,QAAOA;AAAA,EAChB;AACA,SAAO;AACT;AACA,SAAS,EAAEA,IAAGC,IAAG;AACf,MAAI,CAACD,GAAG,QAAO;AACf,QAAM;AAAA,IACF,WAAW;AAAA,MACT,kBAAkBE;AAAA,MAClB,aAAaC;AAAA,IACf;AAAA,EACF,IAAIF,IACJG,KAAIQ,GAAEZ,EAAC,GACPM,KAAI,IAAI,MAAM;AAChB,MAAIC,KAAI;AACR,WAASF,KAAI,GAAGA,KAAID,GAAE,QAAQ,EAAEC,IAAG;AACjC,UAAML,KAAI,EAAEI,GAAEC,EAAC,GAAGH,EAAC;AACnB,QAAI,CAACF,GAAG,QAAO;AACf,IAAAG,GAAE,SAASH,GAAE,SAAS,MAAMO,KAAI,OAAKD,GAAE,KAAKN,EAAC;AAAA,EAC/C;AACA,SAAOO,KAAID,KAAI;AACjB;AACA,SAAS,EAAEN,IAAGC,IAAG;AACf,QAAMC,KAAI,EAAEF,IAAGC,EAAC;AAChB,SAAOC,KAAI;AAAA,IACT,OAAOF;AAAA,IACP,WAAWE;AAAA,EACb,IAAI;AACN;AACA,SAAe,EAAEF,IAAGC,IAAGC,IAAG;AAAA;AACxB,WAAO,EAAEF,GAAE,IAAI,CAAAA,OAAK,EAAEA,IAAGE,EAAC,CAAC,GAAGD,IAAGC,EAAC;AAAA,EACpC;AAAA;AACA,SAAe,EAAEF,IAAGC,IAAGE,IAAG;AAAA;AACxB,UAAMC,KAAIC,GAAE,EAAE,kBAAkBF,IAAG,YAAY,kBAAkB,GAC/DG,KAAI,MAAM,EAAEN,IAAGC,IAAG,iCACbE,KADa;AAAA,MAEhB,YAAYC,GAAE,eAAe,mBAAmB;AAAA,IAClD,EAAC;AACH,MAAED,EAAC;AACH,UAAMI,KAAID,GAAE,IAAI,CAAC;AAAA,MACb,MAAMN;AAAA,IACR,MAAMA,EAAC,GACP;AAAA,MACE,eAAeK;AAAA,IACjB,IAAI,MAAM,EAAEE,IAAGN,IAAG,iCACbE,KADa;AAAA,MAEhB,YAAYC,GAAE,eAAe,kBAAkB;AAAA,IACjD,EAAC;AACH,WAAO,EAAED,EAAC,GAAGH,GAAE,IAAI,CAACA,IAAGE,OAAM,EAAEI,GAAEJ,EAAC,GAAGG,GAAEH,EAAC,GAAGD,EAAC,CAAC;AAAA,EAC/C;AAAA;AACA,SAAe,EAAED,IAAGC,IAAG;AAAA;AACrB,UAAM;AAAA,MACJ,OAAOE;AAAA,MACP,WAAWC;AAAA,IACb,IAAIJ;AACJ,QAAIG,cAAa,KAAM,QAAO;AAAA,MAC5B,MAAMA;AAAA,MACN,WAAWA,GAAE;AAAA,MACb,WAAWC;AAAA,IACb;AACA,UAAME,KAAI,MAAMH,GAAE,OAAOF,EAAC;AAC1B,WAAO,EAAEA,EAAC,GAAG;AAAA,MACX,MAAMK;AAAA,MACN,WAAWH,GAAE;AAAA,MACb,WAAWC;AAAA,IACb;AAAA,EACF;AAAA;AACA,SAAe,EAAEJ,IAAGC,IAAGE,IAAG;AAAA;AACxB,UAAM;AAAA,MACJ,MAAMG;AAAA,MACN,WAAWC;AAAA,MACX,WAAWC;AAAA,IACb,IAAIR;AACJ,QAAIS,KAAI;AACR,QAAI;AACF,YAAMT,KAAI,MAAMa,GAAE;AAAA,QAChB,MAAMP;AAAA,QACN,MAAME;AAAA,MACR,GAAGP,GAAE,KAAKE,EAAC;AACX,QAAEA,EAAC,GAAGM,KAAI;AAAA,QACR,WAAWF;AAAA,QACX,eAAeP,GAAE;AAAA,MACnB;AAAA,IACF,SAASU,IAAG;AACV,QAAEA,EAAC,GAAG,GAAG,EAAE,SAAS,WAAWT,GAAE,GAAG,yCAAyC;AAAA,IAC/E;AACA,QAAI,CAACQ,IAAG;AACN,YAAMT,KAAI,MAAM,GAAEM,EAAC;AACnB,UAAI,EAAEH,EAAC,GAAG,CAACH,GAAE,SAAU,OAAM,IAAIS,GAAE;AACnC,MAAAA,KAAI;AAAA,QACF,WAAWF;AAAA,QACX,WAAWP,GAAE;AAAA,MACf;AAAA,IACF;AACA,QAAI,CAACS,GAAG,OAAM,IAAI,EAAE;AACpB,WAAO;AAAA,MACL,MAAMA;AAAA,MACN,WAAWD;AAAA,IACb;AAAA,EACF;AAAA;AACA,SAAS,EAAER,IAAGC,IAAGE,IAAG;AAClB,QAAMC,KAAIC,GAAEL,GAAE,QAAQG,IAAG,YAAY,mBAAmB;AACxD,SAAO,QAAQ,IAAIH,GAAE,IAAI,CAAOA,IAAGM,OAAM;AACvC,UAAMC,KAAI,EAAE,MAAMP,IAAGC,IAAG,iCACnBE,KADmB;AAAA,MAEtB,YAAYC,GAAE,eAAeE,EAAC;AAAA,IAChC,EAAC;AACD,WAAO,EAAEH,EAAC,GAAGI;AAAA,EACf,EAAC,CAAC;AACJ;AACA,SAAe,EAAEN,IAAGE,IAAGC,IAAG;AAAA;AACxB,UAAME,KAAIC,GAAEH,IAAG,UAAU;AACzB,QAAI;AACF,YAAME,KAAI,MAAM,EAAE,EAAEH,GAAE,UAAU,MAAM,cAAc,GAAG;AAAA,QACrD,SAAS;AAAA,QACT,OAAO;AAAA,UACL,GAAG;AAAA,UACH,QAAQ,KAAK,UAAUF,EAAC;AAAA,QAC1B;AAAA,QACA,QAAQ;AAAA,QACR,cAAc;AAAA,MAChB,CAAC;AACD,UAAI,EAAEG,EAAC,GAAGE,GAAE,KAAK,cAAc,WAAWL,GAAE,OAAQ,OAAM,IAAIM,GAAEN,GAAE,QAAQK,GAAE,KAAK,cAAc,MAAM;AACrG,aAAOA,GAAE;AAAA,IACX,UAAE;AACA,MAAAA,GAAE,OAAO;AAAA,IACX;AAAA,EACF;AAAA;AACA,SAAS,EAAEN,IAAGC,IAAGC,IAAG;AAClB,QAAM;AAAA,IACJ,SAASC;AAAA,EACX,IAAIF;AACJ,MAAI,CAACE,IAAG;AACN,UAAM;AAAA,MACJ,OAAOD;AAAA,IACT,IAAID;AACJ,UAAM,IAAI,EAAED,GAAE,WAAWE,EAAC;AAAA,EAC5B;AACA,QAAM;AAAA,IACF,WAAWE;AAAA,EACb,IAAIH,IACJ;AAAA,IACE,WAAWK;AAAA,IACX,MAAM;AAAA,MACJ,WAAWC;AAAA,IACb;AAAA,EACF,IAAIP,IACJ;AAAA,IACE,WAAW;AAAA,MACT,kBAAkBK;AAAA,IACpB;AAAA,EACF,IAAIH,IACJM,KAAIR,GAAEO,IAAGF,EAAC;AACZ,MAAI,CAACG,GAAG,OAAM,IAAI,EAAED,EAAC;AACrB,SAAO,IAAIF,GAAEC,IAAGE,IAAG,CAAC,IAAI,EAAE,GAAGN,GAAE,UAAU,IAAI,WAAWE,EAAC,IAAIA,EAAC,CAAC,CAAC;AAClE;AACA,SAAeO,GAAEX,IAAGC,IAAGC,IAAG;AAAA;AACxB,UAAMC,KAAIH,GAAE,IAAI,CAAC;AAAA,MACb,WAAWA;AAAA,MACX,OAAOC;AAAA,IACT,OAAO;AAAA,MACL,WAAWD;AAAA,MACX,WAAWC,GAAE,CAAC,EAAE;AAAA,IAClB,EAAE,GACFG,KAAIH,GAAE,cAAc,WAAW,wBAC/BK,KAAI;AAAA,MACF,GAAG;AAAA,MACH,QAAQ,KAAK,UAAUH,EAAC;AAAA,MACxB,eAAe;AAAA,MACf,cAAcD;AAAA,MACd,OAAOE;AAAA,IACT,GACAC,KAAI,EAAEJ,GAAE,UAAU,MAAM,WAAW;AACrC,QAAIO;AACJ,QAAI;AACF,MAAAA,MAAK,OAAOJ,KAAI,IAAI,GAAGC,IAAG;AAAA,QACxB,OAAOC;AAAA,QACP,cAAc;AAAA,QACd,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,IACN,SAASI,IAAG;AACV,YAAM,IAAI,EAAE;AAAA,IACd;AACA,UAAM;AAAA,MACJ,kBAAkBD;AAAA,IACpB,IAAIR,GAAE;AACN,WAAOO,GAAE,OAAO,IAAI,CAAAR,OAAK;AACvB,YAAMC,KAAI,EAAED,GAAE,aAAaS,EAAC;AAC5B,UAAI,CAACR,GAAG,OAAM,IAAI,EAAEA,EAAC;AACrB,aAAO,IAAII,GAAEL,GAAE,WAAWA,GAAE,aAAa,CAAC,IAAI,EAAEA,GAAE,UAAUA,GAAE,SAAS,CAAC,CAAC;AAAA,IAC3E,CAAC;AAAA,EACH;AAAA;AACA,SAAS,EAAEC,IAAGC,IAAG;AACf,SAAO,EAAED,IAAGC,EAAC;AACf;AACA,SAAe,EAAED,IAAGC,IAAG;AAAA;AACrB,UAAME,MAAK,MAAM,EAAEH,IAAGC,EAAC,GAAG,KAAK;AAC/B,eAAS;AACP,YAAMD,MAAK,MAAM,EAAEG,IAAG;AAAA,QACpB,OAAO;AAAA,UACL,GAAG;AAAA,QACL;AAAA,QACA,cAAc;AAAA,MAChB,CAAC,GAAG;AACJ,cAAQH,GAAE,QAAQ;AAAA,QAChB,KAAK;AACH,iBAAO,EAAEA,GAAE,WAAW;AAAA,YACpB,OAAO;AAAA,cACL,GAAG;AAAA,YACL;AAAA,YACA,cAAc;AAAA,UAChB,CAAC;AAAA,QACH,KAAK;AACH,gBAAM,IAAI,MAAMA,GAAE,MAAM;AAAA,QAC1B,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH;AAAA,QACF;AACE,gBAAM,IAAI,MAAM;AAAA,MACpB;AACA,YAAM,EAAE,EAAE;AAAA,IACZ;AAAA,EACF;AAAA;AACA,SAAS,EAAED,IAAG;AACZ,SAAO,CAAC,CAACA,GAAE,aAAa,CAAC,CAACA,GAAE;AAC9B;AACA,SAAS,EAAEA,IAAG;AACZ,QAAM;AAAA,IACF,WAAWC;AAAA,EACb,IAAID,IACJE,KAAI,EAAE,qBAAqBD,GAAE,gBAAgB,KAAK,EAAE,OAAOA,GAAE,gBAAgB;AAC/E,MAAI,CAACC,GAAG,OAAM,IAAI,EAAE;AACpB,SAAOA;AACT;AACA,SAAS,KAAK;AACZ,SAAO,EAAE,UAAU,mDAAmD;AACxE;AACA,IAAM,KAAKI,GAAE,GAAG;",
  "names": ["n", "i", "p", "l", "m", "d", "u", "h", "g", "q", "z", "U", "A", "c", "I", "M", "e", "v", "_", "t", "r", "s", "a", "C", "o", "s", "e", "t", "r", "o", "i", "n", "a", "c", "u", "l", "V", "A", "m"]
}
