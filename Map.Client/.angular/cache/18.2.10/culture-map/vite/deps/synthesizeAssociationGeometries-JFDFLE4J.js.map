{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/rest/networks/support/AssociationGeometriesResult.js", "../../../../../../node_modules/@arcgis/core/rest/networks/synthesizeAssociationGeometries.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { _ as o } from \"../../../chunks/tslib.es6.js\";\nimport { JSONSupport as s } from \"../../../core/JSONSupport.js\";\nimport { property as r } from \"../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../core/has.js\";\nimport \"../../../core/Logger.js\";\nimport \"../../../core/RandomLCG.js\";\nimport { subclass as t } from \"../../../core/accessorSupport/decorators/subclass.js\";\nimport e from \"./Association.js\";\nlet p = class extends s {\n  constructor(o) {\n    super(o), this.maxGeometryCountExceeded = !1, this.associations = [];\n  }\n};\no([r({\n  type: Boolean,\n  json: {\n    write: !0\n  }\n})], p.prototype, \"maxGeometryCountExceeded\", void 0), o([r({\n  type: [e],\n  json: {\n    write: !0\n  }\n})], p.prototype, \"associations\", void 0), p = o([t(\"esri.rest.networks.support.AssociationGeometriesResult\")], p);\nconst i = p;\nexport { i as default };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport o from \"../../request.js\";\nimport { parseUrl as t, encode as e, asValidOptions as s } from \"../utils.js\";\nimport r from \"./support/AssociationGeometriesResult.js\";\nasync function n(r, n, c) {\n  const a = t(r),\n    f = {\n      ...n.toJSON(),\n      f: \"json\"\n    },\n    m = e({\n      ...a.query,\n      ...f\n    });\n  c ? c.method = \"post\" : c = {\n    method: \"post\"\n  };\n  const p = s(m, c),\n    u = `${a.path}/synthesizeAssociationGeometries`;\n  return o(u, p).then(o => i(o, n.outSpatialReference));\n}\nfunction i(o, t) {\n  const {\n      data: e\n    } = o,\n    s = r.fromJSON(e);\n  if (t) for (const r of s.associations) r.geometry.spatialReference = t.clone();\n  return s;\n}\nexport { n as synthesizeAssociationGeometries };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAI,IAAI,cAAc,EAAE;AAAA,EACtB,YAAY,GAAG;AACb,UAAM,CAAC,GAAG,KAAK,2BAA2B,OAAI,KAAK,eAAe,CAAC;AAAA,EACrE;AACF;AACA,EAAE,CAAC,EAAE;AAAA,EACH,MAAM;AAAA,EACN,MAAM;AAAA,IACJ,OAAO;AAAA,EACT;AACF,CAAC,CAAC,GAAG,EAAE,WAAW,4BAA4B,MAAM,GAAG,EAAE,CAAC,EAAE;AAAA,EAC1D,MAAM,CAAC,CAAC;AAAA,EACR,MAAM;AAAA,IACJ,OAAO;AAAA,EACT;AACF,CAAC,CAAC,GAAG,EAAE,WAAW,gBAAgB,MAAM,GAAG,IAAI,EAAE,CAAC,EAAE,wDAAwD,CAAC,GAAG,CAAC;AACjH,IAAMA,KAAI;;;ACrBV,SAAe,EAAE,GAAGC,IAAG,GAAG;AAAA;AACxB,UAAMC,KAAIC,GAAE,CAAC,GACXA,KAAI,iCACCF,GAAE,OAAO,IADV;AAAA,MAEF,GAAG;AAAA,IACL,IACA,IAAI,EAAE,kCACDC,GAAE,QACFC,GACJ;AACH,QAAI,EAAE,SAAS,SAAS,IAAI;AAAA,MAC1B,QAAQ;AAAA,IACV;AACA,UAAMC,KAAI,EAAE,GAAG,CAAC,GACd,IAAI,GAAGF,GAAE,IAAI;AACf,WAAO,EAAE,GAAGE,EAAC,EAAE,KAAK,OAAKC,GAAE,GAAGJ,GAAE,mBAAmB,CAAC;AAAA,EACtD;AAAA;AACA,SAASI,GAAE,GAAG,GAAG;AACf,QAAM;AAAA,IACF,MAAMC;AAAA,EACR,IAAI,GACJC,KAAIF,GAAE,SAASC,EAAC;AAClB,MAAI,EAAG,YAAW,KAAKC,GAAE,aAAc,GAAE,SAAS,mBAAmB,EAAE,MAAM;AAC7E,SAAOA;AACT;",
  "names": ["i", "n", "a", "f", "p", "i", "e", "s"]
}
