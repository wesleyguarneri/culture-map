{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/SlicePlaneMaterial.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { addProjViewLocalOrigin as e } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float4PassUniform as r } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { FloatPassUniform as d } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as o } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as i } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { VertexAttribute as a } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nfunction t(t) {\n  const g = new i(),\n    {\n      vertex: l,\n      fragment: s,\n      attributes: n,\n      varyings: c\n    } = g;\n  return e(l, t), n.add(a.POSITION, \"vec3\"), n.add(a.UV0, \"vec2\"), c.add(\"vUV\", \"vec2\"), l.code.add(o`void main(void) {\nvUV = uv0;\ngl_Position = proj * view * vec4(position, 1.0);\n}`), s.uniforms.add(new r(\"backgroundColor\", e => e.backgroundColor), new r(\"gridColor\", e => e.gridColor), new d(\"gridWidth\", e => e.gridWidth)), s.code.add(o`void main() {\nconst float LINE_WIDTH = 1.0;\nvec2 uvScaled = vUV * gridWidth;\nvec2 gridUV = (fract(uvScaled + 0.5) - 0.5) / (LINE_WIDTH * fwidth(uvScaled));\nvec2 grid = (1.0 - step(0.5, gridUV)) * step(-0.5, gridUV);\ngrid.x *= step(0.5, uvScaled.x) * step(uvScaled.x, gridWidth - 0.5);\ngrid.y *= step(0.5, uvScaled.y) * step(uvScaled.y, gridWidth - 0.5);\nfloat gridFade = max(grid.x, grid.y);\nfloat gridAlpha = gridColor.a * gridFade;\nfragColor =\nvec4(backgroundColor.rgb * backgroundColor.a, backgroundColor.a) * (1.0 - gridAlpha) +\nvec4(gridColor.rgb, 1.0) * gridAlpha;\n}`), g;\n}\nconst g = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: t\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { g as S, t as b };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAUA,SAAS,EAAEA,IAAG;AACZ,QAAMC,KAAI,IAAIC,GAAE,GACd;AAAA,IACE,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,UAAU;AAAA,EACZ,IAAID;AACN,SAAO,EAAE,GAAGD,EAAC,GAAG,EAAE,IAAI,EAAE,UAAU,MAAM,GAAG,EAAE,IAAI,EAAE,KAAK,MAAM,GAAG,EAAE,IAAI,OAAO,MAAM,GAAG,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA,EAGlG,GAAG,EAAE,SAAS,IAAI,IAAIG,GAAE,mBAAmB,CAAAA,OAAKA,GAAE,eAAe,GAAG,IAAIA,GAAE,aAAa,CAAAA,OAAKA,GAAE,SAAS,GAAG,IAAID,GAAE,aAAa,CAAAC,OAAKA,GAAE,SAAS,CAAC,GAAG,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY5J,GAAGF;AACL;AACA,IAAM,IAAI,OAAO,OAAO,OAAO,eAAe;AAAA,EAC5C,WAAW;AAAA,EACX,OAAO;AACT,GAAG,OAAO,aAAa;AAAA,EACrB,OAAO;AACT,CAAC,CAAC;",
  "names": ["t", "g", "o", "e"]
}
