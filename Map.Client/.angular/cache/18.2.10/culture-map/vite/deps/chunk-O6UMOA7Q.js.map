{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/layers/support/labelFormatUtils.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from \"../../core/Error.js\";\nimport r from \"../../core/Logger.js\";\nimport { parseWhereClause as t } from \"../../core/sql.js\";\nimport { formatDate as n, convertDateFormatToIntlOptions as o } from \"../../intl/date.js\";\nimport { formatNumber as a } from \"../../intl/number.js\";\nimport { getDomainRange as l } from \"./domainUtils.js\";\nimport { isDateField as i, isNumericField as s } from \"./fieldUtils.js\";\nimport { getLabelExpression as u, getSingleFieldArcadeExpression as c } from \"./labelUtils.js\";\nimport { createLabelExpression as f } from \"../../support/arcadeOnDemand.js\";\nconst m = () => r.getLogger(\"esri.layers.support.labelFormatUtils\"),\n  p = {\n    type: \"simple\",\n    evaluate: () => null\n  },\n  d = {\n    getAttribute: (e, r) => e.field(r)\n  };\nasync function w(r, n, o) {\n  if (!r || !r.symbol || !n) return p;\n  const a = r.where,\n    l = u(r);\n  let i;\n  if (\"arcade\" === l.type) {\n    const r = await f(l.expression, o, n);\n    if (null == r) return p;\n    i = {\n      type: \"arcade\",\n      evaluate(t, n) {\n        try {\n          const e = \"attributes\" in t ? r.repurposeFeature(t) : t;\n          e.contextTimeZone = n ?? null;\n          const o = r.evaluate({\n            $view: {\n              timeZone: n\n            },\n            $feature: e\n          }, r.services);\n          if (null != o) return o.toString();\n        } catch (o) {\n          m().error(new e(\"arcade-expression-error\", \"Encountered an error when evaluating label expression for feature\", {\n            error: o,\n            feature: t,\n            expression: l\n          }));\n        }\n        return null;\n      },\n      needsHydrationToEvaluate: () => null == c(l.expression)\n    };\n  } else i = {\n    type: \"simple\",\n    evaluate: e => l.expression.replaceAll(/{[^}]*}/g, r => {\n      const t = r.slice(1, -1),\n        o = n.get(t);\n      if (!o) return r;\n      let a = null;\n      if (\"attributes\" in e) {\n        e && e.attributes && (a = e.attributes[o.name]);\n      } else a = e.field(o.name);\n      return null == a ? \"\" : g(a, o);\n    })\n  };\n  if (a) {\n    let r;\n    try {\n      r = await t(a, n);\n    } catch (s) {\n      return m().error(new e(\"bad-where-clause\", \"Encountered an error when evaluating where clause, ignoring\", {\n        where: a,\n        error: s\n      })), p;\n    }\n    const o = i.evaluate;\n    i.evaluate = (t, n) => {\n      const l = \"attributes\" in t ? void 0 : d;\n      try {\n        if (r.testFeature(t, l)) return o(t, n);\n      } catch (s) {\n        m().error(new e(\"bad-where-clause\", \"Encountered an error when evaluating where clause for feature\", {\n          where: a,\n          feature: t,\n          error: s\n        }));\n      }\n      return null;\n    };\n  }\n  return i;\n}\nfunction g(e, r) {\n  if (null == e) return \"\";\n  const t = r.domain;\n  if (t) if (\"codedValue\" === t.type || \"coded-value\" === t.type) {\n    const r = e;\n    for (const e of t.codedValues) if (e.code === r) return e.name;\n  } else if (\"range\" === t.type) {\n    const {\n        max: n,\n        min: o\n      } = l(r),\n      a = +e;\n    if (null != o && null != n && o <= a && a <= n) return t.name;\n  }\n  let u = e;\n  return i(r) ? u = n(u, o(\"short-date\")) : s(r) && (u = a(+u)), u || \"\";\n}\nexport { w as createLabelFunction, g as formatField };"],
  "mappings": "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",
  "names": ["m", "e", "n", "l", "r", "o", "a", "s"]
}
