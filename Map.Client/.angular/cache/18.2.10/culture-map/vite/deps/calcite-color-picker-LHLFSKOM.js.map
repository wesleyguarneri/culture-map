{
  "version": 3,
  "sources": ["../../../../../../node_modules/@esri/calcite-components/dist/components/color-picker-hex-input.js", "../../../../../../node_modules/@esri/calcite-components/dist/components/calcite-color-picker.js"],
  "sourcesContent": ["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';\nimport { c as Color, s as isLonghandHex, u as isShorthandHex, i as isValidHex, v as rgbToHex, n as normalizeHex, o as opacityToAlpha, a as hexify, w as hexChar, O as OPACITY_LIMITS, e as alphaToOpacity } from './utils.js';\nimport { e as focusElement } from './dom.js';\nimport { s as setUpLoadableComponent, a as setComponentLoaded, c as componentFocusable } from './loadable.js';\nimport { d as defineCustomElement$5 } from './icon.js';\nimport { d as defineCustomElement$4 } from './input-message.js';\nimport { d as defineCustomElement$3 } from './input-number.js';\nimport { d as defineCustomElement$2 } from './input-text.js';\nimport { d as defineCustomElement$1 } from './progress.js';\nconst CSS = {\n  container: \"container\",\n  hexInput: \"hex-input\",\n  opacityInput: \"opacity-input\"\n};\nconst colorPickerHexInputCss = \":host{display:block}.container{display:flex;inline-size:100%;flex-wrap:nowrap;align-items:center}.hex-input{flex-grow:1;text-transform:uppercase}.opacity-input{inline-size:68px;margin-inline-start:-1px}:host([scale=s]) .container{flex-wrap:wrap;row-gap:0.125rem}:host([scale=s]) .opacity-input{inline-size:unset;margin-inline-start:unset}:host([scale=l]) .opacity-input{inline-size:88px}:host([hidden]){display:none}[hidden]{display:none}\";\nconst CalciteColorPickerHexInputStyle0 = colorPickerHexInputCss;\nconst DEFAULT_COLOR = Color();\nconst ColorPickerHexInput = /*@__PURE__*/proxyCustomElement(class ColorPickerHexInput extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.calciteColorPickerHexInputChange = createEvent(this, \"calciteColorPickerHexInputChange\", 6);\n    this.onHexInputBlur = () => {\n      const node = this.hexInputNode;\n      const inputValue = node.value;\n      const hex = `#${inputValue}`;\n      const {\n        allowEmpty,\n        internalColor\n      } = this;\n      const willClearValue = allowEmpty && !inputValue;\n      const isLonghand = isLonghandHex(hex);\n      if (isShorthandHex(hex, this.alphaChannel)) {\n        // ensure modified pasted hex values are committed since we prevent default to remove the # char.\n        this.onHexInputChange();\n      }\n      if (willClearValue || isValidHex(hex) && isLonghand) {\n        return;\n      }\n      // manipulating DOM directly since rerender doesn't update input value\n      node.value = allowEmpty && !internalColor ? \"\" : this.formatHexForInternalInput(rgbToHex(\n      // always display hex input in RRGGBB format\n      internalColor.object()));\n    };\n    this.onOpacityInputBlur = () => {\n      const node = this.opacityInputNode;\n      const inputValue = node.value;\n      const {\n        allowEmpty,\n        internalColor\n      } = this;\n      const willClearValue = allowEmpty && !inputValue;\n      if (willClearValue) {\n        return;\n      }\n      // manipulating DOM directly since rerender doesn't update input value\n      node.value = allowEmpty && !internalColor ? \"\" : this.formatOpacityForInternalInput(internalColor);\n    };\n    this.onOpacityInputInput = () => {\n      this.onOpacityInputChange();\n    };\n    this.onHexInputChange = () => {\n      const nodeValue = this.hexInputNode.value;\n      let value = nodeValue;\n      if (value) {\n        const normalized = normalizeHex(value, false);\n        const preserveExistingAlpha = isValidHex(normalized) && this.alphaChannel;\n        if (preserveExistingAlpha && this.internalColor) {\n          const alphaHex = normalizeHex(this.internalColor.hexa(), true).slice(-2);\n          value = `${normalized + alphaHex}`;\n        }\n      }\n      this.internalSetValue(value, this.value);\n    };\n    this.onOpacityInputChange = () => {\n      const node = this.opacityInputNode;\n      let value;\n      if (!node.value) {\n        value = node.value;\n      } else {\n        const alpha = opacityToAlpha(Number(node.value));\n        value = this.internalColor?.alpha(alpha).hexa();\n      }\n      this.internalSetValue(value, this.value);\n    };\n    this.onInputFocus = event => {\n      event.type === \"calciteInternalInputTextFocus\" ? this.hexInputNode.selectText() : this.opacityInputNode.selectText();\n    };\n    this.onHexInputInput = () => {\n      const hexInputValue = `#${this.hexInputNode.value}`;\n      const oldValue = this.value;\n      if (isValidHex(hexInputValue, this.alphaChannel) && isLonghandHex(hexInputValue, this.alphaChannel)) {\n        this.internalSetValue(hexInputValue, oldValue);\n      }\n    };\n    this.onInputKeyDown = event => {\n      const {\n        altKey,\n        ctrlKey,\n        metaKey,\n        shiftKey\n      } = event;\n      const {\n        alphaChannel,\n        hexInputNode,\n        internalColor,\n        value\n      } = this;\n      const {\n        key\n      } = event;\n      const composedPath = event.composedPath();\n      if (key === \"Tab\" && isShorthandHex(value, this.alphaChannel) || key === \"Enter\") {\n        if (composedPath.includes(hexInputNode)) {\n          this.onHexInputChange();\n        } else {\n          this.onOpacityInputChange();\n        }\n        if (key === \"Enter\") {\n          event.preventDefault();\n        }\n        return;\n      }\n      const isNudgeKey = key === \"ArrowDown\" || key === \"ArrowUp\";\n      const oldValue = this.value;\n      if (isNudgeKey) {\n        if (!value) {\n          this.internalSetValue(this.previousNonNullValue, oldValue);\n          event.preventDefault();\n          return;\n        }\n        const direction = key === \"ArrowUp\" ? 1 : -1;\n        const bump = shiftKey ? 10 : 1;\n        this.internalSetValue(hexify(this.nudgeRGBChannels(internalColor, bump * direction, composedPath.includes(hexInputNode) ? \"rgb\" : \"a\"), alphaChannel), oldValue);\n        event.preventDefault();\n        return;\n      }\n      const withModifiers = altKey || ctrlKey || metaKey;\n      const singleChar = key.length === 1;\n      const validHexChar = hexChar.test(key);\n      if (singleChar && !withModifiers && !validHexChar) {\n        event.preventDefault();\n      }\n    };\n    this.onHexInputPaste = event => {\n      const hex = event.clipboardData.getData(\"text\");\n      if (isValidHex(hex, this.alphaChannel) && isLonghandHex(hex, this.alphaChannel)) {\n        event.preventDefault();\n        this.hexInputNode.value = hex.slice(1);\n        this.internalSetValue(hex, this.value);\n      }\n    };\n    this.previousNonNullValue = this.value;\n    this.storeHexInputRef = node => {\n      this.hexInputNode = node;\n    };\n    this.storeOpacityInputRef = node => {\n      this.opacityInputNode = node;\n    };\n    this.allowEmpty = false;\n    this.alphaChannel = false;\n    this.hexLabel = \"Hex\";\n    this.messages = undefined;\n    this.numberingSystem = undefined;\n    this.scale = \"m\";\n    this.value = normalizeHex(hexify(DEFAULT_COLOR, this.alphaChannel), this.alphaChannel, true);\n    this.internalColor = DEFAULT_COLOR;\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  connectedCallback() {\n    const {\n      allowEmpty,\n      alphaChannel,\n      value\n    } = this;\n    if (value) {\n      const normalized = normalizeHex(value, alphaChannel);\n      if (isValidHex(normalized, alphaChannel)) {\n        this.internalSetValue(normalized, normalized, false);\n      }\n      return;\n    }\n    if (allowEmpty) {\n      this.internalSetValue(null, null, false);\n    }\n  }\n  componentWillLoad() {\n    setUpLoadableComponent(this);\n  }\n  componentDidLoad() {\n    setComponentLoaded(this);\n  }\n  handleValueChange(value, oldValue) {\n    this.internalSetValue(value, oldValue, false);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  render() {\n    const {\n      alphaChannel,\n      hexLabel,\n      internalColor,\n      messages,\n      scale,\n      value\n    } = this;\n    const hexInputValue = this.formatHexForInternalInput(value);\n    const opacityInputValue = this.formatOpacityForInternalInput(internalColor);\n    const inputScale = scale === \"l\" ? \"m\" : \"s\";\n    return h(\"div\", {\n      key: '70f804fdbc3c29fdf49616f56c39593fdc3717da',\n      class: CSS.container\n    }, h(\"calcite-input-text\", {\n      key: '777d1f8ffa673a0d74f049d4a6bdacbf3510006a',\n      class: CSS.hexInput,\n      label: messages?.hex || hexLabel,\n      maxLength: this.alphaChannel ? 8 : 6,\n      onCalciteInputTextChange: this.onHexInputChange,\n      onCalciteInputTextInput: this.onHexInputInput,\n      onCalciteInternalInputTextBlur: this.onHexInputBlur,\n      onCalciteInternalInputTextFocus: this.onInputFocus,\n      onKeyDown: this.onInputKeyDown,\n      onPaste: this.onHexInputPaste,\n      prefixText: \"#\",\n      ref: this.storeHexInputRef,\n      scale: inputScale,\n      value: hexInputValue\n    }), alphaChannel ? h(\"calcite-input-number\", {\n      class: CSS.opacityInput,\n      key: \"opacity-input\",\n      label: messages?.opacity,\n      max: OPACITY_LIMITS.max,\n      maxLength: 3,\n      min: OPACITY_LIMITS.min,\n      numberButtonType: \"none\",\n      numberingSystem: this.numberingSystem,\n      onCalciteInputNumberInput: this.onOpacityInputInput,\n      onCalciteInternalInputNumberBlur: this.onOpacityInputBlur,\n      onCalciteInternalInputNumberFocus: this.onInputFocus,\n      onKeyDown: this.onInputKeyDown,\n      ref: this.storeOpacityInputRef,\n      scale: inputScale,\n      suffixText: \"%\",\n      value: opacityInputValue\n    }) : null);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n  /** Sets focus on the component. */\n  async setFocus() {\n    await componentFocusable(this);\n    return focusElement(this.hexInputNode);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n  internalSetValue(value, oldValue, emit = true) {\n    if (value) {\n      const {\n        alphaChannel\n      } = this;\n      const normalized = normalizeHex(value, alphaChannel, alphaChannel);\n      if (isValidHex(normalized, alphaChannel)) {\n        const {\n          internalColor: currentColor\n        } = this;\n        const nextColor = Color(normalized);\n        const normalizedLonghand = normalizeHex(hexify(nextColor, alphaChannel), alphaChannel);\n        const changed = !currentColor || normalizedLonghand !== normalizeHex(hexify(currentColor, alphaChannel), alphaChannel);\n        this.internalColor = nextColor;\n        this.previousNonNullValue = normalizedLonghand;\n        this.value = normalizedLonghand;\n        if (changed && emit) {\n          this.calciteColorPickerHexInputChange.emit();\n        }\n        return;\n      }\n    } else if (this.allowEmpty) {\n      this.internalColor = null;\n      this.value = null;\n      if (emit) {\n        this.calciteColorPickerHexInputChange.emit();\n      }\n      return;\n    }\n    this.value = oldValue;\n  }\n  formatHexForInternalInput(hex) {\n    return hex ? hex.replace(\"#\", \"\").slice(0, 6) : \"\";\n  }\n  formatOpacityForInternalInput(color) {\n    return color ? `${alphaToOpacity(color.alpha())}` : \"\";\n  }\n  nudgeRGBChannels(color, amount, context) {\n    let nudgedChannels;\n    const channels = color.array();\n    const rgbChannels = channels.slice(0, 3);\n    if (context === \"rgb\") {\n      const nudgedRGBChannels = rgbChannels.map(channel => channel + amount);\n      nudgedChannels = [...nudgedRGBChannels, this.alphaChannel ? channels[3] : undefined];\n    } else {\n      const nudgedAlpha = opacityToAlpha(alphaToOpacity(color.alpha()) + amount);\n      nudgedChannels = [...rgbChannels, nudgedAlpha];\n    }\n    return Color(nudgedChannels);\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"handleValueChange\"]\n    };\n  }\n  static get style() {\n    return CalciteColorPickerHexInputStyle0;\n  }\n}, [1, \"calcite-color-picker-hex-input\", {\n  \"allowEmpty\": [4, \"allow-empty\"],\n  \"alphaChannel\": [4, \"alpha-channel\"],\n  \"hexLabel\": [1, \"hex-label\"],\n  \"messages\": [16],\n  \"numberingSystem\": [1, \"numbering-system\"],\n  \"scale\": [513],\n  \"value\": [1537],\n  \"internalColor\": [32],\n  \"setFocus\": [64]\n}, undefined, {\n  \"value\": [\"handleValueChange\"]\n}]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"calcite-color-picker-hex-input\", \"calcite-icon\", \"calcite-input-message\", \"calcite-input-number\", \"calcite-input-text\", \"calcite-progress\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"calcite-color-picker-hex-input\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, ColorPickerHexInput);\n        }\n        break;\n      case \"calcite-icon\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$5();\n        }\n        break;\n      case \"calcite-input-message\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$4();\n        }\n        break;\n      case \"calcite-input-number\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$3();\n        }\n        break;\n      case \"calcite-input-text\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n        break;\n      case \"calcite-progress\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$1();\n        }\n        break;\n    }\n  });\n}\ndefineCustomElement();\nexport { ColorPickerHexInput as C, defineCustomElement as d };\n\n", "/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';\nimport { C as CSSColorMode, n as normalizeHex, a as hexify, b as alphaCompatible, c as Color, o as opacityToAlpha, d as CSS, e as alphaToOpacity, D as DEFAULT_COLOR, f as DIMENSIONS, g as getSliderWidth, p as parseMode, j as normalizeColor, k as colorEqual, R as RGB_LIMITS, H as HSV_LIMITS, O as OPACITY_LIMITS, t as toNonAlphaMode, l as normalizeAlpha, m as HUE_LIMIT_CONSTRAINED, S as SCOPE_SIZE, q as DEFAULT_STORAGE_KEY_PREFIX, r as toAlphaMode } from './utils.js';\nimport { y as isPrimaryPointerButton, a as getElementDir, f as focusFirstTabbable } from './dom.js';\nimport { u as updateHostInteraction, I as InteractiveContainer } from './interactive.js';\nimport { i as isActivationKey } from './key.js';\nimport { c as componentFocusable, s as setUpLoadableComponent, a as setComponentLoaded } from './loadable.js';\nimport { c as connectLocalized, d as disconnectLocalized } from './locale.js';\nimport { r as remap, c as clamp, a as closeToRangeEdge } from './math.js';\nimport { u as updateMessages, s as setUpMessages, c as connectMessages, d as disconnectMessages } from './t9n.js';\nimport { d as defineCustomElement$e } from './button.js';\nimport { d as defineCustomElement$d } from './color-picker-hex-input.js';\nimport { d as defineCustomElement$c } from './color-picker-swatch.js';\nimport { d as defineCustomElement$b } from './icon.js';\nimport { d as defineCustomElement$a } from './input-message.js';\nimport { d as defineCustomElement$9 } from './input-number.js';\nimport { d as defineCustomElement$8 } from './input-text.js';\nimport { d as defineCustomElement$7 } from './loader.js';\nimport { d as defineCustomElement$6 } from './progress.js';\nimport { d as defineCustomElement$5 } from './tab.js';\nimport { d as defineCustomElement$4 } from './tab-nav.js';\nimport { d as defineCustomElement$3 } from './tab-title.js';\nimport { d as defineCustomElement$2 } from './tabs.js';\nimport { t as throttle } from './throttle.js';\nconst colorPickerCss = \":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:inline-block;font-size:var(--calcite-font-size--2);line-height:1rem;font-weight:var(--calcite-font-weight-normal)}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}:host([scale=s]){--calcite-color-picker-spacing:8px}:host([scale=s]) .container{inline-size:160px}:host([scale=s]) .saved-colors{gap:0.25rem;grid-template-columns:repeat(auto-fill, 20px)}:host([scale=m]){--calcite-color-picker-spacing:12px}:host([scale=m]) .container{inline-size:272px}:host([scale=l]){--calcite-color-picker-spacing:16px;font-size:var(--calcite-font-size--1);line-height:1rem}:host([scale=l]) .container{inline-size:464px}:host([scale=l]) .section:first-of-type{padding-block-start:var(--calcite-color-picker-spacing)}:host([scale=l]) .saved-colors{grid-template-columns:repeat(auto-fill, 32px)}:host([scale=l]) .control-section{flex-wrap:nowrap;align-items:baseline;flex-wrap:wrap}:host([scale=l]) .color-hex-options{display:flex;flex-shrink:1;flex-direction:column;justify-content:space-around}:host([scale=l]) .color-mode-container{flex-shrink:3}.container{background-color:var(--calcite-color-foreground-1);display:inline-block;border:1px solid var(--calcite-color-border-1)}.control-and-scope{position:relative;display:flex;cursor:pointer;touch-action:none}.color-field,.control-and-scope{-webkit-user-select:none;user-select:none}.scope{pointer-events:none;position:absolute;z-index:var(--calcite-z-index);block-size:1px;inline-size:1px;border-radius:9999px;background-color:transparent;font-size:var(--calcite-font-size--1);outline-color:transparent}.scope:focus{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));outline-offset:calc(\\n            2px *\\n            calc(\\n              1 -\\n              2 * clamp(\\n                0,\\n                var(--calcite-offset-invert-focus),\\n                1\\n              )\\n            )\\n          );outline-offset:6px}.hex-and-channels-group{inline-size:100%}.hex-and-channels-group,.control-section{display:flex;flex-direction:row;flex-wrap:wrap}.section{padding-block:0 var(--calcite-color-picker-spacing);padding-inline:var(--calcite-color-picker-spacing)}.section:first-of-type{padding-block-start:var(--calcite-color-picker-spacing)}.sliders{display:flex;flex-direction:column;justify-content:space-between;margin-inline-start:var(--calcite-color-picker-spacing);gap:var(--calcite-spacing-xxs)}.preview-and-sliders{display:flex;align-items:center;padding:var(--calcite-color-picker-spacing)}.color-hex-options,.section--split{flex-grow:1}.header{display:flex;align-items:center;justify-content:space-between;color:var(--calcite-color-text-1)}.color-mode-container{padding-block-start:var(--calcite-color-picker-spacing)}.channels{display:flex;row-gap:0.125rem}.channel[data-channel-index=\\\"3\\\"]{inline-size:159px}:host([scale=s]) .channels{flex-wrap:wrap}:host([scale=s]) .channel{flex-basis:30%;flex-grow:1}:host([scale=s]) .channel[data-channel-index=\\\"3\\\"]{inline-size:unset;margin-inline-start:unset}:host([scale=l]) .channel[data-channel-index=\\\"3\\\"]{inline-size:131px}.saved-colors{display:grid;gap:0.5rem;padding-block-start:var(--calcite-color-picker-spacing);grid-template-columns:repeat(auto-fill, 24px)}.saved-colors-buttons{display:flex}.saved-color{outline-offset:0;outline-color:transparent;cursor:pointer}.saved-color:focus{outline:2px solid var(--calcite-color-brand);outline-offset:2px}.saved-color:hover{transition:outline-color var(--calcite-internal-animation-timing-fast) ease-in-out;outline:2px solid var(--calcite-color-border-2);outline-offset:2px}:host([hidden]){display:none}[hidden]{display:none}\";\nconst CalciteColorPickerStyle0 = colorPickerCss;\nconst throttleFor60FpsInMs = 16;\nconst ColorPicker = /*@__PURE__*/proxyCustomElement(class ColorPicker extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.calciteColorPickerChange = createEvent(this, \"calciteColorPickerChange\", 6);\n    this.calciteColorPickerInput = createEvent(this, \"calciteColorPickerInput\", 6);\n    this.internalColorUpdateContext = null;\n    this.isActiveChannelInputEmpty = false;\n    this.mode = CSSColorMode.HEX;\n    this.shiftKeyChannelAdjustment = 0;\n    this.upOrDownArrowKeyTracker = null;\n    this.handleTabActivate = event => {\n      this.channelMode = event.currentTarget.getAttribute(\"data-color-mode\");\n      this.updateChannelsFromColor(this.color);\n    };\n    this.handleColorFieldScopeKeyDown = event => {\n      const {\n        key\n      } = event;\n      const arrowKeyToXYOffset = {\n        ArrowUp: {\n          x: 0,\n          y: -10\n        },\n        ArrowRight: {\n          x: 10,\n          y: 0\n        },\n        ArrowDown: {\n          x: 0,\n          y: 10\n        },\n        ArrowLeft: {\n          x: -10,\n          y: 0\n        }\n      };\n      if (arrowKeyToXYOffset[key]) {\n        event.preventDefault();\n        this.scopeOrientation = key === \"ArrowDown\" || key === \"ArrowUp\" ? \"vertical\" : \"horizontal\";\n        this.captureColorFieldColor(this.colorFieldScopeLeft + arrowKeyToXYOffset[key].x || 0, this.colorFieldScopeTop + arrowKeyToXYOffset[key].y || 0, false);\n      }\n    };\n    this.handleHueScopeKeyDown = event => {\n      const modifier = event.shiftKey ? 10 : 1;\n      const {\n        key\n      } = event;\n      const arrowKeyToXOffset = {\n        ArrowUp: 1,\n        ArrowRight: 1,\n        ArrowDown: -1,\n        ArrowLeft: -1\n      };\n      if (arrowKeyToXOffset[key]) {\n        event.preventDefault();\n        const delta = arrowKeyToXOffset[key] * modifier;\n        const hue = this.baseColorFieldColor.hue();\n        const color = this.baseColorFieldColor.hue(hue + delta);\n        this.internalColorSet(color, false);\n      }\n    };\n    this.handleHexInputChange = event => {\n      event.stopPropagation();\n      const {\n        isClearable,\n        color\n      } = this;\n      const input = event.target;\n      const hex = input.value;\n      if (isClearable && !hex) {\n        this.internalColorSet(null);\n        return;\n      }\n      const normalizedHex = color && normalizeHex(hexify(color, alphaCompatible(this.mode)));\n      if (hex !== normalizedHex) {\n        this.internalColorSet(Color(hex));\n      }\n    };\n    this.handleSavedColorSelect = event => {\n      const swatch = event.currentTarget;\n      this.internalColorSet(Color(swatch.color));\n    };\n    this.handleChannelInput = event => {\n      const input = event.currentTarget;\n      const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n      const isAlphaChannel = channelIndex === 3;\n      const limit = isAlphaChannel ? OPACITY_LIMITS.max : this.channelMode === \"rgb\" ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]] : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n      let inputValue;\n      if (!input.value) {\n        inputValue = \"\";\n        this.isActiveChannelInputEmpty = true;\n        // reset this to allow typing in new value, when channel input is cleared after ArrowUp or ArrowDown have been pressed\n        this.upOrDownArrowKeyTracker = null;\n      } else {\n        const value = Number(input.value);\n        const adjustedValue = value + this.shiftKeyChannelAdjustment;\n        const clamped = clamp(adjustedValue, 0, limit);\n        inputValue = clamped.toString();\n      }\n      input.value = inputValue;\n      if (inputValue !== \"\" && this.shiftKeyChannelAdjustment !== 0) {\n        // we treat nudging as a change event since the input won't emit when modifying the value directly\n        this.handleChannelChange(event);\n      } else if (inputValue !== \"\") {\n        this.handleChannelChange(event);\n      }\n    };\n    this.handleChannelBlur = event => {\n      const input = event.currentTarget;\n      const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n      const channels = [...this.channels];\n      const restoreValueDueToEmptyInput = !input.value && !this.isClearable;\n      if (restoreValueDueToEmptyInput) {\n        input.value = channels[channelIndex]?.toString();\n      }\n    };\n    this.handleChannelFocus = event => {\n      const input = event.currentTarget;\n      input.selectText();\n    };\n    this.handleChannelChange = event => {\n      const input = event.currentTarget;\n      const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n      const channels = [...this.channels];\n      const shouldClearChannels = this.isClearable && !input.value;\n      if (shouldClearChannels) {\n        this.channels = [null, null, null, null];\n        this.internalColorSet(null);\n        return;\n      }\n      const isAlphaChannel = channelIndex === 3;\n      if (this.isActiveChannelInputEmpty && this.upOrDownArrowKeyTracker) {\n        input.value = this.upOrDownArrowKeyTracker === \"up\" ? (channels[channelIndex] + 1 <= this.getChannelInputLimit(channelIndex) ? channels[channelIndex] + 1 : this.getChannelInputLimit(channelIndex)).toString() : (channels[channelIndex] - 1 >= 0 ? channels[channelIndex] - 1 : 0).toString();\n        this.isActiveChannelInputEmpty = false;\n        this.upOrDownArrowKeyTracker = null;\n      }\n      const value = input.value ? Number(input.value) : channels[channelIndex];\n      channels[channelIndex] = isAlphaChannel ? opacityToAlpha(value) : value;\n      this.updateColorFromChannels(channels);\n    };\n    this.handleSavedColorKeyDown = event => {\n      if (isActivationKey(event.key)) {\n        event.preventDefault();\n        this.handleSavedColorSelect(event);\n      }\n    };\n    this.handleColorFieldPointerDown = event => {\n      this.handleCanvasControlPointerDown(event, this.colorFieldRenderingContext, this.captureColorFieldColor, this.colorFieldScopeNode);\n    };\n    this.handleHueSliderPointerDown = event => {\n      this.handleCanvasControlPointerDown(event, this.hueSliderRenderingContext, this.captureHueSliderColor, this.hueScopeNode);\n    };\n    this.handleOpacitySliderPointerDown = event => {\n      this.handleCanvasControlPointerDown(event, this.opacitySliderRenderingContext, this.captureOpacitySliderValue, this.opacityScopeNode);\n    };\n    this.globalPointerUpHandler = event => {\n      if (!isPrimaryPointerButton(event)) {\n        return;\n      }\n      const previouslyDragging = this.activeCanvasInfo;\n      this.activeCanvasInfo = null;\n      this.drawColorControls();\n      if (previouslyDragging) {\n        this.calciteColorPickerChange.emit();\n      }\n    };\n    this.globalPointerMoveHandler = event => {\n      const {\n        activeCanvasInfo,\n        el\n      } = this;\n      if (!el.isConnected || !activeCanvasInfo) {\n        return;\n      }\n      const {\n        context,\n        bounds\n      } = activeCanvasInfo;\n      let samplingX;\n      let samplingY;\n      const {\n        clientX,\n        clientY\n      } = event;\n      if (context.canvas.matches(\":hover\")) {\n        samplingX = clientX - bounds.x;\n        samplingY = clientY - bounds.y;\n      } else {\n        // snap x and y to the closest edge\n        if (clientX < bounds.x + bounds.width && clientX > bounds.x) {\n          samplingX = clientX - bounds.x;\n        } else if (clientX < bounds.x) {\n          samplingX = 0;\n        } else {\n          samplingX = bounds.width;\n        }\n        if (clientY < bounds.y + bounds.height && clientY > bounds.y) {\n          samplingY = clientY - bounds.y;\n        } else if (clientY < bounds.y) {\n          samplingY = 0;\n        } else {\n          samplingY = bounds.height;\n        }\n      }\n      if (context === this.colorFieldRenderingContext) {\n        this.captureColorFieldColor(samplingX, samplingY, false);\n      } else if (context === this.hueSliderRenderingContext) {\n        this.captureHueSliderColor(samplingX);\n      } else if (context === this.opacitySliderRenderingContext) {\n        this.captureOpacitySliderValue(samplingX);\n      }\n    };\n    this.storeColorFieldScope = node => {\n      this.colorFieldScopeNode = node;\n    };\n    this.storeHueScope = node => {\n      this.hueScopeNode = node;\n    };\n    this.renderChannelsTabTitle = channelMode => {\n      const {\n        channelMode: activeChannelMode,\n        messages\n      } = this;\n      const selected = channelMode === activeChannelMode;\n      const label = channelMode === \"rgb\" ? messages.rgb : messages.hsv;\n      return h(\"calcite-tab-title\", {\n        class: CSS.colorMode,\n        \"data-color-mode\": channelMode,\n        key: channelMode,\n        onCalciteTabsActivate: this.handleTabActivate,\n        selected: selected\n      }, label);\n    };\n    this.renderChannelsTab = channelMode => {\n      const {\n        isClearable,\n        channelMode: activeChannelMode,\n        channels,\n        messages,\n        alphaChannel\n      } = this;\n      const selected = channelMode === activeChannelMode;\n      const isRgb = channelMode === \"rgb\";\n      const channelAriaLabels = isRgb ? [messages.red, messages.green, messages.blue] : [messages.hue, messages.saturation, messages.value];\n      const direction = getElementDir(this.el);\n      const channelsToRender = alphaChannel ? channels : channels.slice(0, 3);\n      return h(\"calcite-tab\", {\n        class: CSS.control,\n        key: channelMode,\n        selected: selected\n      }, h(\"div\", {\n        class: CSS.channels,\n        dir: \"ltr\"\n      }, channelsToRender.map((channelValue, index) => {\n        const isAlphaChannel = index === 3;\n        if (isAlphaChannel) {\n          channelValue = isClearable && !channelValue ? channelValue : alphaToOpacity(channelValue);\n        }\n        /* the channel container is ltr, so we apply the host's direction */\n        return this.renderChannel(channelValue, index, channelAriaLabels[index], direction, isAlphaChannel ? \"%\" : \"\");\n      })));\n    };\n    this.renderChannel = (value, index, ariaLabel, direction, suffix) => {\n      return h(\"calcite-input-number\", {\n        class: CSS.channel,\n        \"data-channel-index\": index,\n        dir: direction,\n        key: index,\n        label: ariaLabel,\n        lang: this.effectiveLocale,\n        numberButtonType: \"none\",\n        numberingSystem: this.numberingSystem,\n        onCalciteInputNumberChange: this.handleChannelChange,\n        onCalciteInputNumberInput: this.handleChannelInput,\n        onCalciteInternalInputNumberBlur: this.handleChannelBlur,\n        onCalciteInternalInputNumberFocus: this.handleChannelFocus,\n        onKeyDown: this.handleKeyDown,\n        scale: this.scale === \"l\" ? \"m\" : \"s\",\n        // workaround to ensure input borders overlap as desired\n        // this is because the build transforms margin-left to its\n        // logical-prop, which is undesired as channels are always ltr\n        style: {\n          marginLeft: index > 0 && !(this.scale === \"s\" && this.alphaChannel && index === 3) ? \"-1px\" : \"\"\n        },\n        suffixText: suffix,\n        value: value?.toString()\n      });\n    };\n    this.deleteColor = () => {\n      const colorToDelete = hexify(this.color, this.alphaChannel);\n      const inStorage = this.savedColors.indexOf(colorToDelete) > -1;\n      if (!inStorage) {\n        return;\n      }\n      const savedColors = this.savedColors.filter(color => color !== colorToDelete);\n      this.savedColors = savedColors;\n      const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n      if (this.storageId) {\n        localStorage.setItem(storageKey, JSON.stringify(savedColors));\n      }\n    };\n    this.saveColor = () => {\n      const colorToSave = hexify(this.color, this.alphaChannel);\n      const alreadySaved = this.savedColors.indexOf(colorToSave) > -1;\n      if (alreadySaved) {\n        return;\n      }\n      const savedColors = [...this.savedColors, colorToSave];\n      this.savedColors = savedColors;\n      const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n      if (this.storageId) {\n        localStorage.setItem(storageKey, JSON.stringify(savedColors));\n      }\n    };\n    this.drawColorControls = throttle((type = \"all\") => {\n      if ((type === \"all\" || type === \"color-field\") && this.colorFieldRenderingContext) {\n        this.drawColorField();\n      }\n      if ((type === \"all\" || type === \"hue-slider\") && this.hueSliderRenderingContext) {\n        this.drawHueSlider();\n      }\n      if (this.alphaChannel && (type === \"all\" || type === \"opacity-slider\") && this.opacitySliderRenderingContext) {\n        this.drawOpacitySlider();\n      }\n    }, throttleFor60FpsInMs);\n    this.captureColorFieldColor = (x, y, skipEqual = true) => {\n      const {\n        dimensions: {\n          colorField: {\n            height,\n            width\n          }\n        }\n      } = this;\n      const saturation = Math.round(HSV_LIMITS.s / width * x);\n      const value = Math.round(HSV_LIMITS.v / height * (height - y));\n      this.internalColorSet(this.baseColorFieldColor.hsv().saturationv(saturation).value(value), skipEqual);\n    };\n    this.initColorField = canvas => {\n      this.colorFieldRenderingContext = canvas.getContext(\"2d\");\n      this.updateCanvasSize(\"color-field\");\n      this.drawColorControls();\n    };\n    this.initHueSlider = canvas => {\n      this.hueSliderRenderingContext = canvas.getContext(\"2d\");\n      this.updateCanvasSize(\"hue-slider\");\n      this.drawHueSlider();\n    };\n    this.initOpacitySlider = canvas => {\n      if (!canvas) {\n        return;\n      }\n      this.opacitySliderRenderingContext = canvas.getContext(\"2d\");\n      this.updateCanvasSize(\"opacity-slider\");\n      this.drawOpacitySlider();\n    };\n    this.storeOpacityScope = node => {\n      this.opacityScopeNode = node;\n    };\n    this.handleOpacityScopeKeyDown = event => {\n      const modifier = event.shiftKey ? 10 : 1;\n      const {\n        key\n      } = event;\n      const arrowKeyToXOffset = {\n        ArrowUp: 0.01,\n        ArrowRight: 0.01,\n        ArrowDown: -0.01,\n        ArrowLeft: -0.01\n      };\n      if (arrowKeyToXOffset[key]) {\n        event.preventDefault();\n        const delta = arrowKeyToXOffset[key] * modifier;\n        const alpha = this.baseColorFieldColor.alpha();\n        const color = this.baseColorFieldColor.alpha(alpha + delta);\n        this.internalColorSet(color, false);\n      }\n    };\n    this.allowEmpty = false;\n    this.alphaChannel = false;\n    this.channelsDisabled = false;\n    this.clearable = false;\n    this.color = DEFAULT_COLOR;\n    this.disabled = false;\n    this.format = \"auto\";\n    this.hideChannels = false;\n    this.hexDisabled = false;\n    this.hideHex = false;\n    this.hideSaved = false;\n    this.savedDisabled = false;\n    this.scale = \"m\";\n    this.storageId = undefined;\n    this.messageOverrides = undefined;\n    this.numberingSystem = undefined;\n    this.value = normalizeHex(hexify(DEFAULT_COLOR, this.alphaChannel));\n    this.channelMode = \"rgb\";\n    this.channels = this.toChannels(DEFAULT_COLOR);\n    this.defaultMessages = undefined;\n    this.dimensions = DIMENSIONS.m;\n    this.effectiveLocale = \"\";\n    this.messages = undefined;\n    this.savedColors = [];\n    this.colorFieldScopeTop = undefined;\n    this.colorFieldScopeLeft = undefined;\n    this.hueScopeLeft = undefined;\n    this.opacityScopeLeft = undefined;\n    this.scopeOrientation = undefined;\n  }\n  handleAllowEmptyOrClearableChange() {\n    this.isClearable = this.clearable || this.allowEmpty;\n  }\n  handleAlphaChannelChange(alphaChannel) {\n    const {\n      format\n    } = this;\n    if (alphaChannel && format !== \"auto\" && !alphaCompatible(format)) {\n      console.warn(`ignoring alphaChannel as the current format (${format}) does not support alpha`);\n      this.alphaChannel = false;\n    }\n  }\n  handleAlphaChannelDimensionsChange() {\n    this.effectiveSliderWidth = getSliderWidth(this.dimensions, this.alphaChannel);\n    this.drawColorControls();\n  }\n  handleColorChange(color, oldColor) {\n    this.drawColorControls();\n    this.updateChannelsFromColor(color);\n    this.previousColor = oldColor;\n  }\n  handleFormatOrAlphaChannelChange() {\n    this.setMode(this.format);\n    this.internalColorSet(this.color, false, \"internal\");\n  }\n  handleScaleChange(scale = \"m\") {\n    this.updateDimensions(scale);\n    this.updateCanvasSize(\"all\");\n    this.drawColorControls();\n  }\n  onMessagesChange() {\n    /* wired up by t9n util */\n  }\n  handleValueChange(value, oldValue) {\n    const {\n      isClearable,\n      format\n    } = this;\n    const checkMode = !isClearable || value;\n    let modeChanged = false;\n    if (checkMode) {\n      const nextMode = parseMode(value);\n      if (!nextMode || format !== \"auto\" && nextMode !== format) {\n        this.showIncompatibleColorWarning(value, format);\n        this.value = oldValue;\n        return;\n      }\n      modeChanged = this.mode !== nextMode;\n      this.setMode(nextMode, this.internalColorUpdateContext === null);\n    }\n    const dragging = this.activeCanvasInfo;\n    if (this.internalColorUpdateContext === \"initial\") {\n      return;\n    }\n    if (this.internalColorUpdateContext === \"user-interaction\") {\n      this.calciteColorPickerInput.emit();\n      if (!dragging) {\n        this.calciteColorPickerChange.emit();\n      }\n      return;\n    }\n    const color = isClearable && !value ? null : Color(value != null && typeof value === \"object\" && alphaCompatible(this.mode) ? normalizeColor(value) : value);\n    const colorChanged = !colorEqual(color, this.color);\n    if (modeChanged || colorChanged) {\n      this.internalColorSet(color, this.alphaChannel && !(this.mode.endsWith(\"a\") || this.mode.endsWith(\"a-css\")), \"internal\");\n    }\n  }\n  get baseColorFieldColor() {\n    return this.color || this.previousColor || DEFAULT_COLOR;\n  }\n  effectiveLocaleChange() {\n    updateMessages(this, this.effectiveLocale);\n  }\n  // using @Listen as a workaround for VDOM listener not firing\n  handleChannelKeyUpOrDown(event) {\n    this.shiftKeyChannelAdjustment = 0;\n    const {\n      key\n    } = event;\n    if (key !== \"ArrowUp\" && key !== \"ArrowDown\" || !event.composedPath().some(node => node.classList?.contains(CSS.channel))) {\n      return;\n    }\n    const {\n      shiftKey\n    } = event;\n    event.preventDefault();\n    if (!this.color) {\n      this.internalColorSet(this.previousColor);\n      event.stopPropagation();\n      return;\n    }\n    // this gets applied to the input's up/down arrow increment/decrement\n    const complementaryBump = 9;\n    this.shiftKeyChannelAdjustment = key === \"ArrowUp\" && shiftKey ? complementaryBump : key === \"ArrowDown\" && shiftKey ? -complementaryBump : 0;\n    if (key === \"ArrowUp\") {\n      this.upOrDownArrowKeyTracker = \"up\";\n    }\n    if (key === \"ArrowDown\") {\n      this.upOrDownArrowKeyTracker = \"down\";\n    }\n  }\n  getChannelInputLimit(channelIndex) {\n    return this.channelMode === \"rgb\" ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]] : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n  }\n  focusScope(focusEl) {\n    requestAnimationFrame(() => {\n      focusEl.focus();\n    });\n  }\n  handleCanvasControlPointerDown(event, renderingContext, captureValue, scopeNode) {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, {\n      once: true\n    });\n    this.activeCanvasInfo = {\n      context: renderingContext,\n      bounds: renderingContext.canvas.getBoundingClientRect()\n    };\n    captureValue.call(this, event.offsetX, event.offsetY);\n    this.focusScope(scopeNode);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n  /** Sets focus on the component's first focusable element. */\n  async setFocus() {\n    await componentFocusable(this);\n    focusFirstTabbable(this.el);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  async componentWillLoad() {\n    setUpLoadableComponent(this);\n    this.handleAllowEmptyOrClearableChange();\n    this.handleAlphaChannelDimensionsChange();\n    const {\n      isClearable,\n      color,\n      format,\n      value\n    } = this;\n    const willSetNoColor = isClearable && !value;\n    const parsedMode = parseMode(value);\n    const valueIsCompatible = willSetNoColor || format === \"auto\" && parsedMode || format === parsedMode;\n    const initialColor = willSetNoColor ? null : valueIsCompatible ? Color(value) : color;\n    if (!valueIsCompatible) {\n      this.showIncompatibleColorWarning(value, format);\n    }\n    this.setMode(format, false);\n    this.internalColorSet(initialColor, false, \"initial\");\n    this.updateDimensions(this.scale);\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n    if (this.storageId && localStorage.getItem(storageKey)) {\n      this.savedColors = JSON.parse(localStorage.getItem(storageKey));\n    }\n    await setUpMessages(this);\n  }\n  connectedCallback() {\n    connectLocalized(this);\n    connectMessages(this);\n  }\n  componentDidLoad() {\n    setComponentLoaded(this);\n  }\n  disconnectedCallback() {\n    window.removeEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.removeEventListener(\"pointerup\", this.globalPointerUpHandler);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n  componentDidRender() {\n    updateHostInteraction(this);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n  render() {\n    const {\n      channelsDisabled,\n      color,\n      colorFieldScopeLeft,\n      colorFieldScopeTop,\n      dimensions: {\n        thumb: {\n          radius: thumbRadius\n        }\n      },\n      hexDisabled,\n      hideChannels,\n      hideHex,\n      hideSaved,\n      hueScopeLeft,\n      messages,\n      alphaChannel,\n      opacityScopeLeft,\n      savedColors,\n      savedDisabled,\n      scale,\n      scopeOrientation\n    } = this;\n    const sliderWidth = this.effectiveSliderWidth;\n    const selectedColorInHex = color ? hexify(color, alphaChannel) : null;\n    const hueTop = thumbRadius;\n    const hueLeft = hueScopeLeft ?? sliderWidth * DEFAULT_COLOR.hue() / HSV_LIMITS.h;\n    const opacityTop = thumbRadius;\n    const opacityLeft = opacityScopeLeft ?? sliderWidth * alphaToOpacity(DEFAULT_COLOR.alpha()) / OPACITY_LIMITS.max;\n    const noColor = color === null;\n    const vertical = scopeOrientation === \"vertical\";\n    const noHex = hexDisabled || hideHex;\n    const noChannels = channelsDisabled || hideChannels;\n    const noSaved = savedDisabled || hideSaved;\n    const [adjustedColorFieldScopeLeft, adjustedColorFieldScopeTop] = this.getAdjustedScopePosition(colorFieldScopeLeft, colorFieldScopeTop);\n    const [adjustedHueScopeLeft, adjustedHueScopeTop] = this.getAdjustedScopePosition(hueLeft, hueTop);\n    const [adjustedOpacityScopeLeft, adjustedOpacityScopeTop] = this.getAdjustedScopePosition(opacityLeft, opacityTop);\n    return h(InteractiveContainer, {\n      key: 'c4837ef7cbe25b5fc3f0c72fe82d0090c6e0cdb5',\n      disabled: this.disabled\n    }, h(\"div\", {\n      key: '28230570482ee9d33df9518e3cca534e3fac44ac',\n      class: CSS.container\n    }, h(\"div\", {\n      key: '83172bc55f13955f5b69b59300e68642d59999af',\n      class: CSS.controlAndScope\n    }, h(\"canvas\", {\n      key: 'c20db7054ab5ebdb1e13ba295ac463609c44de47',\n      class: CSS.colorField,\n      onPointerDown: this.handleColorFieldPointerDown,\n      ref: this.initColorField\n    }), h(\"div\", {\n      key: '1e44beb121ed5a2247a6d69bf42c49a7f1ce5829',\n      \"aria-label\": vertical ? messages.value : messages.saturation,\n      \"aria-valuemax\": vertical ? HSV_LIMITS.v : HSV_LIMITS.s,\n      \"aria-valuemin\": \"0\",\n      \"aria-valuenow\": (vertical ? color?.saturationv() : color?.value()) || \"0\",\n      class: {\n        [CSS.scope]: true,\n        [CSS.colorFieldScope]: true\n      },\n      onKeyDown: this.handleColorFieldScopeKeyDown,\n      ref: this.storeColorFieldScope,\n      role: \"slider\",\n      style: {\n        top: `${adjustedColorFieldScopeTop || 0}px`,\n        left: `${adjustedColorFieldScopeLeft || 0}px`\n      },\n      tabindex: \"0\"\n    })), h(\"div\", {\n      key: '5b873f4e7266cc654086f59c8483d3b4a65c8e8f',\n      class: CSS.previewAndSliders\n    }, h(\"calcite-color-picker-swatch\", {\n      key: 'db7c903a933ed061cc2edcd766fde70a8b670f00',\n      class: CSS.preview,\n      color: selectedColorInHex,\n      scale: this.alphaChannel ? \"l\" : this.scale\n    }), h(\"div\", {\n      key: '33ea2354cbcfaa6677e82713bd8f02d1b83a9c26',\n      class: CSS.sliders\n    }, h(\"div\", {\n      key: '28493b4bd177b8c97583cabeb5716a7cb7202e76',\n      class: CSS.controlAndScope\n    }, h(\"canvas\", {\n      key: 'd0a9ce7fb098b7434cd62f68b6b6092efcef3dc4',\n      class: {\n        [CSS.slider]: true,\n        [CSS.hueSlider]: true\n      },\n      onPointerDown: this.handleHueSliderPointerDown,\n      ref: this.initHueSlider\n    }), h(\"div\", {\n      key: '2356120385aabf09384f0077dffb7881c55c5ea9',\n      \"aria-label\": messages.hue,\n      \"aria-valuemax\": HSV_LIMITS.h,\n      \"aria-valuemin\": \"0\",\n      \"aria-valuenow\": color?.round().hue() || DEFAULT_COLOR.round().hue(),\n      class: {\n        [CSS.scope]: true,\n        [CSS.hueScope]: true\n      },\n      onKeyDown: this.handleHueScopeKeyDown,\n      ref: this.storeHueScope,\n      role: \"slider\",\n      style: {\n        top: `${adjustedHueScopeTop}px`,\n        left: `${adjustedHueScopeLeft}px`\n      },\n      tabindex: \"0\"\n    })), alphaChannel ? h(\"div\", {\n      class: CSS.controlAndScope\n    }, h(\"canvas\", {\n      class: {\n        [CSS.slider]: true,\n        [CSS.opacitySlider]: true\n      },\n      onPointerDown: this.handleOpacitySliderPointerDown,\n      ref: this.initOpacitySlider\n    }), h(\"div\", {\n      \"aria-label\": messages.opacity,\n      \"aria-valuemax\": OPACITY_LIMITS.max,\n      \"aria-valuemin\": OPACITY_LIMITS.min,\n      \"aria-valuenow\": (color || DEFAULT_COLOR).round().alpha(),\n      class: {\n        [CSS.scope]: true,\n        [CSS.opacityScope]: true\n      },\n      onKeyDown: this.handleOpacityScopeKeyDown,\n      ref: this.storeOpacityScope,\n      role: \"slider\",\n      style: {\n        top: `${adjustedOpacityScopeTop}px`,\n        left: `${adjustedOpacityScopeLeft}px`\n      },\n      tabindex: \"0\"\n    })) : null)), noHex && noChannels ? null : h(\"div\", {\n      class: {\n        [CSS.controlSection]: true,\n        [CSS.section]: true\n      }\n    }, h(\"div\", {\n      class: CSS.hexAndChannelsGroup\n    }, noHex ? null : h(\"div\", {\n      class: CSS.hexOptions\n    }, h(\"calcite-color-picker-hex-input\", {\n      allowEmpty: this.isClearable,\n      alphaChannel: alphaChannel,\n      class: CSS.control,\n      messages: messages,\n      numberingSystem: this.numberingSystem,\n      onCalciteColorPickerHexInputChange: this.handleHexInputChange,\n      scale: scale,\n      value: selectedColorInHex\n    })), noChannels ? null : h(\"calcite-tabs\", {\n      class: {\n        [CSS.colorModeContainer]: true,\n        [CSS.splitSection]: true\n      },\n      scale: scale === \"l\" ? \"m\" : \"s\"\n    }, h(\"calcite-tab-nav\", {\n      slot: \"title-group\"\n    }, this.renderChannelsTabTitle(\"rgb\"), this.renderChannelsTabTitle(\"hsv\")), this.renderChannelsTab(\"rgb\"), this.renderChannelsTab(\"hsv\")))), noSaved ? null : h(\"div\", {\n      class: {\n        [CSS.savedColorsSection]: true,\n        [CSS.section]: true\n      }\n    }, h(\"div\", {\n      class: CSS.header\n    }, h(\"label\", null, messages.saved), h(\"div\", {\n      class: CSS.savedColorsButtons\n    }, h(\"calcite-button\", {\n      appearance: \"transparent\",\n      class: CSS.deleteColor,\n      disabled: noColor,\n      iconStart: \"minus\",\n      kind: \"neutral\",\n      label: messages.deleteColor,\n      onClick: this.deleteColor,\n      scale: scale,\n      type: \"button\"\n    }), h(\"calcite-button\", {\n      appearance: \"transparent\",\n      class: CSS.saveColor,\n      disabled: noColor,\n      iconStart: \"plus\",\n      kind: \"neutral\",\n      label: messages.saveColor,\n      onClick: this.saveColor,\n      scale: scale,\n      type: \"button\"\n    }))), savedColors.length > 0 ? h(\"div\", {\n      class: CSS.savedColors\n    }, [...savedColors.map(color => h(\"calcite-color-picker-swatch\", {\n      class: CSS.savedColor,\n      color: color,\n      key: color,\n      onClick: this.handleSavedColorSelect,\n      onKeyDown: this.handleSavedColorKeyDown,\n      scale: scale,\n      tabIndex: 0\n    }))]) : null)));\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n  handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n    }\n  }\n  showIncompatibleColorWarning(value, format) {\n    console.warn(`ignoring color value (${value}) as it is not compatible with the current format (${format})`);\n  }\n  setMode(format, warn = true) {\n    const mode = format === \"auto\" ? this.mode : format;\n    this.mode = this.ensureCompatibleMode(mode, warn);\n  }\n  ensureCompatibleMode(mode, warn) {\n    const {\n      alphaChannel\n    } = this;\n    const isAlphaCompatible = alphaCompatible(mode);\n    if (alphaChannel && !isAlphaCompatible) {\n      const alphaMode = toAlphaMode(mode);\n      if (warn) {\n        console.warn(`setting format to (${alphaMode}) as the provided one (${mode}) does not support alpha`);\n      }\n      return alphaMode;\n    }\n    if (!alphaChannel && isAlphaCompatible) {\n      const nonAlphaMode = toNonAlphaMode(mode);\n      if (warn) {\n        console.warn(`setting format to (${nonAlphaMode}) as the provided one (${mode}) does not support alpha`);\n      }\n      return nonAlphaMode;\n    }\n    return mode;\n  }\n  captureHueSliderColor(x) {\n    const hue = HUE_LIMIT_CONSTRAINED / this.effectiveSliderWidth * x;\n    this.internalColorSet(this.baseColorFieldColor.hue(hue), false);\n  }\n  captureOpacitySliderValue(x) {\n    const alpha = opacityToAlpha(OPACITY_LIMITS.max / this.effectiveSliderWidth * x);\n    this.internalColorSet(this.baseColorFieldColor.alpha(alpha), false);\n  }\n  internalColorSet(color, skipEqual = true, context = \"user-interaction\") {\n    if (skipEqual && colorEqual(color, this.color)) {\n      return;\n    }\n    this.internalColorUpdateContext = context;\n    this.color = color;\n    this.value = this.toValue(color);\n    this.internalColorUpdateContext = null;\n  }\n  toValue(color, format = this.mode) {\n    if (!color) {\n      return null;\n    }\n    const hexMode = \"hex\";\n    if (format.includes(hexMode)) {\n      const hasAlpha = format === CSSColorMode.HEXA;\n      return normalizeHex(hexify(color.round(), hasAlpha), hasAlpha);\n    }\n    if (format.includes(\"-css\")) {\n      const value = color[format.replace(\"-css\", \"\").replace(\"a\", \"\")]().round().string();\n      // Color omits alpha values when alpha is 1\n      const needToInjectAlpha = (format.endsWith(\"a\") || format.endsWith(\"a-css\")) && color.alpha() === 1;\n      if (needToInjectAlpha) {\n        const model = value.slice(0, 3);\n        const values = value.slice(4, -1);\n        return `${model}a(${values}, ${color.alpha()})`;\n      }\n      return value;\n    }\n    const colorObject = /* Color() does not support hsva, hsla nor rgba, so we use the non-alpha mode */\n    color[toNonAlphaMode(format)]().round().object();\n    if (format.endsWith(\"a\")) {\n      return normalizeAlpha(colorObject);\n    }\n    return colorObject;\n  }\n  getSliderCapSpacing() {\n    const {\n      dimensions: {\n        slider: {\n          height\n        },\n        thumb: {\n          radius\n        }\n      }\n    } = this;\n    return radius * 2 - height;\n  }\n  updateDimensions(scale = \"m\") {\n    this.dimensions = DIMENSIONS[scale];\n  }\n  drawColorField() {\n    const context = this.colorFieldRenderingContext;\n    const {\n      dimensions: {\n        colorField: {\n          height,\n          width\n        }\n      }\n    } = this;\n    context.fillStyle = this.baseColorFieldColor.hsv().saturationv(100).value(100).alpha(1).string();\n    context.fillRect(0, 0, width, height);\n    const whiteGradient = context.createLinearGradient(0, 0, width, 0);\n    whiteGradient.addColorStop(0, \"rgba(255,255,255,1)\");\n    whiteGradient.addColorStop(1, \"rgba(255,255,255,0)\");\n    context.fillStyle = whiteGradient;\n    context.fillRect(0, 0, width, height);\n    const blackGradient = context.createLinearGradient(0, 0, 0, height);\n    blackGradient.addColorStop(0, \"rgba(0,0,0,0)\");\n    blackGradient.addColorStop(1, \"rgba(0,0,0,1)\");\n    context.fillStyle = blackGradient;\n    context.fillRect(0, 0, width, height);\n    this.drawActiveColorFieldColor();\n  }\n  setCanvasContextSize(canvas, {\n    height,\n    width\n  }) {\n    if (!canvas) {\n      return;\n    }\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    canvas.width = width * devicePixelRatio;\n    canvas.height = height * devicePixelRatio;\n    canvas.style.height = `${height}px`;\n    canvas.style.width = `${width}px`;\n    const context = canvas.getContext(\"2d\");\n    context.scale(devicePixelRatio, devicePixelRatio);\n  }\n  updateCanvasSize(context = \"all\") {\n    const {\n      dimensions\n    } = this;\n    if (context === \"all\" || context === \"color-field\") {\n      this.setCanvasContextSize(this.colorFieldRenderingContext?.canvas, dimensions.colorField);\n    }\n    const adjustedSliderDimensions = {\n      width: this.effectiveSliderWidth,\n      height: dimensions.slider.height + (dimensions.thumb.radius - dimensions.slider.height / 2) * 2\n    };\n    if (context === \"all\" || context === \"hue-slider\") {\n      this.setCanvasContextSize(this.hueSliderRenderingContext?.canvas, adjustedSliderDimensions);\n    }\n    if (context === \"all\" || context === \"opacity-slider\") {\n      this.setCanvasContextSize(this.opacitySliderRenderingContext?.canvas, adjustedSliderDimensions);\n    }\n  }\n  drawActiveColorFieldColor() {\n    const {\n      color\n    } = this;\n    if (!color) {\n      return;\n    }\n    const hsvColor = color.hsv();\n    const {\n      dimensions: {\n        colorField: {\n          height,\n          width\n        },\n        thumb: {\n          radius\n        }\n      }\n    } = this;\n    const x = hsvColor.saturationv() / (HSV_LIMITS.s / width);\n    const y = height - hsvColor.value() / (HSV_LIMITS.v / height);\n    requestAnimationFrame(() => {\n      this.colorFieldScopeLeft = x;\n      this.colorFieldScopeTop = y;\n    });\n    this.drawThumb(this.colorFieldRenderingContext, radius, x, y, hsvColor, false);\n  }\n  drawThumb(context, radius, x, y, color, applyAlpha) {\n    const startAngle = 0;\n    const endAngle = 2 * Math.PI;\n    const outlineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, startAngle, endAngle);\n    context.fillStyle = \"#fff\";\n    context.fill();\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = outlineWidth;\n    context.stroke();\n    if (applyAlpha && color.alpha() < 1) {\n      const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n      context.beginPath();\n      context.arc(x, y, radius - 3, startAngle, endAngle);\n      context.fillStyle = pattern;\n      context.fill();\n    }\n    context.globalCompositeOperation = \"source-atop\";\n    context.beginPath();\n    context.arc(x, y, radius - 3, startAngle, endAngle);\n    const alpha = applyAlpha ? color.alpha() : 1;\n    context.fillStyle = color.rgb().alpha(alpha).string();\n    context.fill();\n    context.globalCompositeOperation = \"source-over\";\n  }\n  drawActiveHueSliderColor() {\n    const {\n      color\n    } = this;\n    if (!color) {\n      return;\n    }\n    const hsvColor = color.hsv().saturationv(100).value(100);\n    const {\n      dimensions: {\n        thumb: {\n          radius\n        }\n      }\n    } = this;\n    const width = this.effectiveSliderWidth;\n    const x = hsvColor.hue() / (HUE_LIMIT_CONSTRAINED / width);\n    const y = radius;\n    const sliderBoundX = this.getSliderBoundX(x, width, radius);\n    requestAnimationFrame(() => {\n      this.hueScopeLeft = sliderBoundX;\n    });\n    this.drawThumb(this.hueSliderRenderingContext, radius, sliderBoundX, y, hsvColor, false);\n  }\n  drawHueSlider() {\n    const context = this.hueSliderRenderingContext;\n    const {\n      dimensions: {\n        slider: {\n          height\n        },\n        thumb: {\n          radius: thumbRadius\n        }\n      }\n    } = this;\n    const x = 0;\n    const y = thumbRadius - height / 2;\n    const width = this.effectiveSliderWidth;\n    const gradient = context.createLinearGradient(0, 0, width, 0);\n    const hueSliderColorStopKeywords = [\"red\", \"yellow\", \"lime\", \"cyan\", \"blue\", \"magenta\", \"#ff0004\" /* 1 unit less than #ff0 to avoid duplicate values within range */];\n    const offset = 1 / (hueSliderColorStopKeywords.length - 1);\n    let currentOffset = 0;\n    hueSliderColorStopKeywords.forEach(keyword => {\n      gradient.addColorStop(currentOffset, Color(keyword).string());\n      currentOffset += offset;\n    });\n    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n    this.drawSliderPath(context, height, width, x, y);\n    context.fillStyle = gradient;\n    context.fill();\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = 1;\n    context.stroke();\n    this.drawActiveHueSliderColor();\n  }\n  drawOpacitySlider() {\n    const context = this.opacitySliderRenderingContext;\n    const {\n      baseColorFieldColor: previousColor,\n      dimensions: {\n        slider: {\n          height\n        },\n        thumb: {\n          radius: thumbRadius\n        }\n      }\n    } = this;\n    const x = 0;\n    const y = thumbRadius - height / 2;\n    const width = this.effectiveSliderWidth;\n    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n    const gradient = context.createLinearGradient(0, y, width, 0);\n    const startColor = previousColor.rgb().alpha(0);\n    const midColor = previousColor.rgb().alpha(0.5);\n    const endColor = previousColor.rgb().alpha(1);\n    gradient.addColorStop(0, startColor.string());\n    gradient.addColorStop(0.5, midColor.string());\n    gradient.addColorStop(1, endColor.string());\n    this.drawSliderPath(context, height, width, x, y);\n    const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n    context.fillStyle = pattern;\n    context.fill();\n    context.fillStyle = gradient;\n    context.fill();\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = 1;\n    context.stroke();\n    this.drawActiveOpacitySliderColor();\n  }\n  drawSliderPath(context, height, width, x, y) {\n    const radius = height / 2 + 1;\n    context.beginPath();\n    context.moveTo(x + radius, y);\n    context.lineTo(x + width - radius, y);\n    context.quadraticCurveTo(x + width, y, x + width, y + radius);\n    context.lineTo(x + width, y + height - radius);\n    context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    context.lineTo(x + radius, y + height);\n    context.quadraticCurveTo(x, y + height, x, y + height - radius);\n    context.lineTo(x, y + radius);\n    context.quadraticCurveTo(x, y, x + radius, y);\n    context.closePath();\n  }\n  getCheckeredBackgroundPattern() {\n    if (this.checkerPattern) {\n      return this.checkerPattern;\n    }\n    const pattern = document.createElement(\"canvas\");\n    pattern.width = 10;\n    pattern.height = 10;\n    const patternContext = pattern.getContext(\"2d\");\n    patternContext.fillStyle = \"#ccc\";\n    patternContext.fillRect(0, 0, 10, 10);\n    patternContext.fillStyle = \"#fff\";\n    patternContext.fillRect(0, 0, 5, 5);\n    patternContext.fillRect(5, 5, 5, 5);\n    this.checkerPattern = pattern;\n    return pattern;\n  }\n  drawActiveOpacitySliderColor() {\n    const {\n      color\n    } = this;\n    if (!color) {\n      return;\n    }\n    const hsvColor = color;\n    const {\n      dimensions: {\n        thumb: {\n          radius\n        }\n      }\n    } = this;\n    const width = this.effectiveSliderWidth;\n    const x = alphaToOpacity(hsvColor.alpha()) / (OPACITY_LIMITS.max / width);\n    const y = radius;\n    const sliderBoundX = this.getSliderBoundX(x, width, radius);\n    requestAnimationFrame(() => {\n      this.opacityScopeLeft = sliderBoundX;\n    });\n    this.drawThumb(this.opacitySliderRenderingContext, radius, sliderBoundX, y, hsvColor, true);\n  }\n  getSliderBoundX(x, width, radius) {\n    const closeToEdge = closeToRangeEdge(x, width, radius);\n    return closeToEdge === 0 ? x : closeToEdge === -1 ? remap(x, 0, width, radius, radius * 2) : remap(x, 0, width, width - radius * 2, width - radius);\n  }\n  updateColorFromChannels(channels) {\n    this.internalColorSet(Color(channels, this.channelMode));\n  }\n  updateChannelsFromColor(color) {\n    this.channels = color ? this.toChannels(color) : [null, null, null, null];\n  }\n  toChannels(color) {\n    const {\n      channelMode\n    } = this;\n    const channels = color[channelMode]().array().map((value, index) => {\n      const isAlpha = index === 3;\n      return isAlpha ? value : Math.floor(value);\n    });\n    if (channels.length === 3) {\n      channels.push(1); // Color omits alpha when 1\n    }\n    return channels;\n  }\n  getAdjustedScopePosition(left, top) {\n    return [left - SCOPE_SIZE / 2, top - SCOPE_SIZE / 2];\n  }\n  static get assetsDirs() {\n    return [\"assets\"];\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"allowEmpty\": [\"handleAllowEmptyOrClearableChange\"],\n      \"clearable\": [\"handleAllowEmptyOrClearableChange\"],\n      \"alphaChannel\": [\"handleAlphaChannelChange\", \"handleAlphaChannelDimensionsChange\", \"handleFormatOrAlphaChannelChange\"],\n      \"dimensions\": [\"handleAlphaChannelDimensionsChange\"],\n      \"color\": [\"handleColorChange\"],\n      \"format\": [\"handleFormatOrAlphaChannelChange\"],\n      \"scale\": [\"handleScaleChange\"],\n      \"messageOverrides\": [\"onMessagesChange\"],\n      \"value\": [\"handleValueChange\"],\n      \"effectiveLocale\": [\"effectiveLocaleChange\"]\n    };\n  }\n  static get style() {\n    return CalciteColorPickerStyle0;\n  }\n}, [1, \"calcite-color-picker\", {\n  \"allowEmpty\": [516, \"allow-empty\"],\n  \"alphaChannel\": [4, \"alpha-channel\"],\n  \"channelsDisabled\": [4, \"channels-disabled\"],\n  \"clearable\": [516],\n  \"color\": [1040],\n  \"disabled\": [516],\n  \"format\": [513],\n  \"hideChannels\": [516, \"hide-channels\"],\n  \"hexDisabled\": [4, \"hex-disabled\"],\n  \"hideHex\": [516, \"hide-hex\"],\n  \"hideSaved\": [516, \"hide-saved\"],\n  \"savedDisabled\": [516, \"saved-disabled\"],\n  \"scale\": [513],\n  \"storageId\": [513, \"storage-id\"],\n  \"messageOverrides\": [1040],\n  \"numberingSystem\": [513, \"numbering-system\"],\n  \"value\": [1025],\n  \"messages\": [1040],\n  \"channelMode\": [32],\n  \"channels\": [32],\n  \"defaultMessages\": [32],\n  \"dimensions\": [32],\n  \"effectiveLocale\": [32],\n  \"savedColors\": [32],\n  \"colorFieldScopeTop\": [32],\n  \"colorFieldScopeLeft\": [32],\n  \"hueScopeLeft\": [32],\n  \"opacityScopeLeft\": [32],\n  \"scopeOrientation\": [32],\n  \"setFocus\": [64]\n}, [[2, \"keydown\", \"handleChannelKeyUpOrDown\"], [2, \"keyup\", \"handleChannelKeyUpOrDown\"]], {\n  \"allowEmpty\": [\"handleAllowEmptyOrClearableChange\"],\n  \"clearable\": [\"handleAllowEmptyOrClearableChange\"],\n  \"alphaChannel\": [\"handleAlphaChannelChange\", \"handleAlphaChannelDimensionsChange\", \"handleFormatOrAlphaChannelChange\"],\n  \"dimensions\": [\"handleAlphaChannelDimensionsChange\"],\n  \"color\": [\"handleColorChange\"],\n  \"format\": [\"handleFormatOrAlphaChannelChange\"],\n  \"scale\": [\"handleScaleChange\"],\n  \"messageOverrides\": [\"onMessagesChange\"],\n  \"value\": [\"handleValueChange\"],\n  \"effectiveLocale\": [\"effectiveLocaleChange\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"calcite-color-picker\", \"calcite-button\", \"calcite-color-picker-hex-input\", \"calcite-color-picker-swatch\", \"calcite-icon\", \"calcite-input-message\", \"calcite-input-number\", \"calcite-input-text\", \"calcite-loader\", \"calcite-progress\", \"calcite-tab\", \"calcite-tab-nav\", \"calcite-tab-title\", \"calcite-tabs\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"calcite-color-picker\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, ColorPicker);\n        }\n        break;\n      case \"calcite-button\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$e();\n        }\n        break;\n      case \"calcite-color-picker-hex-input\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$d();\n        }\n        break;\n      case \"calcite-color-picker-swatch\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$c();\n        }\n        break;\n      case \"calcite-icon\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$b();\n        }\n        break;\n      case \"calcite-input-message\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$a();\n        }\n        break;\n      case \"calcite-input-number\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$9();\n        }\n        break;\n      case \"calcite-input-text\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$8();\n        }\n        break;\n      case \"calcite-loader\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$7();\n        }\n        break;\n      case \"calcite-progress\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$6();\n        }\n        break;\n      case \"calcite-tab\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$5();\n        }\n        break;\n      case \"calcite-tab-nav\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$4();\n        }\n        break;\n      case \"calcite-tab-title\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$3();\n        }\n        break;\n      case \"calcite-tabs\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n        break;\n    }\n  });\n}\ndefineCustomElement$1();\nconst CalciteColorPicker = ColorPicker;\nconst defineCustomElement = defineCustomElement$1;\nexport { CalciteColorPicker, defineCustomElement };\n\n"],
  "mappings": "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",
  "names": ["CSS", "DEFAULT_COLOR", "ColorPickerHexInput", "defineCustomElement", "ColorPicker", "color", "defineCustomElement"]
}
