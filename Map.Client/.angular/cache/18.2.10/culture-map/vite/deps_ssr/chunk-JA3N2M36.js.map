{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { IDENTITY as e } from \"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js\";\nimport { ONES as t } from \"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";\nimport { TextureCoordinateAttributeType as r } from \"../attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexTextureCoordinates as a } from \"../attributes/VertexTextureCoordinates.glsl.js\";\nimport { NormalsDoubleSidedMode as n } from \"./Normals.glsl.js\";\nimport { Float2PassUniform as o } from \"../../shaderModules/Float2PassUniform.js\";\nimport { glsl as s } from \"../../shaderModules/interfaces.js\";\nimport { Matrix3PassUniform as m } from \"../../shaderModules/Matrix3PassUniform.js\";\nimport { Texture2DDrawUniform as d } from \"../../shaderModules/Texture2DDrawUniform.js\";\nimport { Texture2DPassUniform as l } from \"../../shaderModules/Texture2DPassUniform.js\";\nimport { BindType as i } from \"../../shaderTechnique/BindType.js\";\nimport { VertexAttribute as c } from \"../../../lib/VertexAttribute.js\";\nfunction T(T, u) {\n  const x = T.fragment;\n  u.hasVertexTangents ? (T.attributes.add(c.TANGENT, \"vec4\"), T.varyings.add(\"vTangent\", \"vec4\"), u.doubleSidedMode === n.WindingOrder ? x.code.add(s`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;\nvec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`) : x.code.add(s`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = vTangent.w;\nvec3 tangent = normalize(vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`)) : x.code.add(s`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {\nvec3 Q1 = dFdx(pos);\nvec3 Q2 = dFdy(pos);\nvec2 stx = dFdx(st);\nvec2 sty = dFdy(st);\nfloat det = stx.t * sty.s - sty.t * stx.s;\nvec3 T = stx.t * Q2 - sty.t * Q1;\nT = T - normal * dot(normal, T);\nT *= inversesqrt(max(dot(T,T), 1.e-10));\nvec3 B = sign(det) * cross(normal, T);\nreturn mat3(T, B, normal);\n}`), u.textureCoordinateType !== r.None && (T.include(a, u), x.uniforms.add(u.pbrTextureBindType === i.Pass ? new l(\"normalTexture\", e => e.textureNormal) : new d(\"normalTexture\", e => e.textureNormal)), u.hasNormalTextureTransform && (x.uniforms.add(new o(\"scale\", e => e.scale ?? t)), x.uniforms.add(new m(\"normalTextureTransformMatrix\", t => t.normalTextureTransformMatrix ?? e))), x.code.add(s`vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {\nvec3 rawNormal = textureLookup(normalTexture, uv).rgb * 2.0 - 1.0;`), u.hasNormalTextureTransform && x.code.add(s`mat3 normalTextureRotation = mat3(normalTextureTransformMatrix[0][0]/scale[0], normalTextureTransformMatrix[0][1]/scale[1], 0.0,\nnormalTextureTransformMatrix[1][0]/scale[0], normalTextureTransformMatrix[1][1]/scale[1], 0.0,\n0.0, 0.0, 0.0 );\nrawNormal.xy = (normalTextureRotation * vec3(rawNormal.x, rawNormal.y, 1.0)).xy;`), x.code.add(s`return tangentSpace * rawNormal;\n}`));\n}\nexport { T as ComputeNormalTexture };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAAS,EAAEA,IAAG,GAAG;AACf,QAAM,IAAIA,GAAE;AACZ,IAAE,qBAAqBA,GAAE,WAAW,IAAI,EAAE,SAAS,MAAM,GAAGA,GAAE,SAAS,IAAI,YAAY,MAAM,GAAG,EAAE,oBAAoB,EAAE,eAAe,EAAE,KAAK,IAAIC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlJ,IAAI,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKf,KAAK,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWhB,GAAG,EAAE,0BAA0B,EAAE,SAASD,GAAE,QAAQE,IAAG,CAAC,GAAG,EAAE,SAAS,IAAI,EAAE,uBAAuB,EAAE,OAAO,IAAIA,GAAE,iBAAiB,CAAAC,OAAKA,GAAE,aAAa,IAAI,IAAI,EAAE,iBAAiB,CAAAA,OAAKA,GAAE,aAAa,CAAC,GAAG,EAAE,8BAA8B,EAAE,SAAS,IAAI,IAAIA,GAAE,SAAS,CAAAA,OAAKA,GAAE,SAAS,CAAC,CAAC,GAAG,EAAE,SAAS,IAAI,IAAIA,GAAE,gCAAgC,OAAK,EAAE,gCAAgC,CAAC,CAAC,IAAI,EAAE,KAAK,IAAIF;AAAA,mEACzU,GAAG,EAAE,6BAA6B,EAAE,KAAK,IAAIA;AAAA;AAAA;AAAA,iFAG/B,GAAG,EAAE,KAAK,IAAIA;AAAA,EAC7F;AACF;",
  "names": ["T", "o", "s", "e"]
}
