{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/RealisticTree.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { ForwardLinearDepth as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { Offset as o } from \"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";\nimport { ShaderOutput as r } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";\nimport { SliceDraw as i } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as a } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { InstancedDoublePrecision as l } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";\nimport { NormalAttribute as t } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";\nimport { PositionAttribute as s } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";\nimport { SymbolColor as n } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";\nimport { TextureCoordinateAttribute as d } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexColor as c } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { VerticalOffset as g } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";\nimport { DefaultMaterialAuxiliaryPasses as m } from \"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";\nimport { EvaluateAmbientOcclusion as v } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";\nimport { EvaluateSceneLighting as b, addAmbientBoostFactor as p, addLightingGlobalFactor as f } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";\nimport { addMainLightDirection as w, addMainLightIntensity as h } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";\nimport { multipassTerrainTest as u } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { PhysicallyBasedRendering as y } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";\nimport { PhysicallyBasedRenderingParameters as x, PBRMode as C } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadShadowMapPass as L, ReadShadowMapDraw as j } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { VisualVariables as M } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as P } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";\nimport { DiscardOrAdjustAlphaPass as A } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { MixExternalColor as O } from \"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";\nimport { addProjViewLocalOrigin as S, addCameraPosition as E } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float3PassUniform as N } from \"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";\nimport { Float4PassUniform as T } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { FloatPassUniform as $ } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as F } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as D } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as V } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nimport { TransparencyPassType as B } from \"../views/3d/webgl-engine/lib/TransparencyPassType.js\";\nimport { VertexAttribute as _ } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nfunction I(I) {\n  const R = new D(),\n    {\n      vertex: z,\n      fragment: k,\n      varyings: G\n    } = R;\n  return S(z, I), R.include(s), G.add(\"vpos\", \"vec3\"), R.include(M, I), R.include(l, I), R.include(g, I), I.output === r.Color && (E(R.vertex, I), R.include(t, I), R.include(a, I), I.offsetBackfaces && R.include(o), I.instancedColor && R.attributes.add(_.INSTANCECOLOR, \"vec4\"), G.add(\"vNormalWorld\", \"vec3\"), G.add(\"localvpos\", \"vec3\"), I.multipassEnabled && G.add(\"depth\", \"float\"), R.include(d, I), R.include(e, I), R.include(n, I), R.include(c, I), z.uniforms.add(new T(\"externalColor\", e => e.externalColor)), G.add(\"vcolorExt\", \"vec4\"), z.code.add(F`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${I.instancedColor ? \"vcolorExt *= instanceColor * 0.003921568627451;\" : \"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${F.float(P)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          } else {\n            vpos = getVertexInLocalOriginSpace();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${I.offsetBackfaces ? \"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\" : \"\"}\n          }\n          ${I.multipassEnabled ? F`depth = (view * vec4(vpos, 1.0)).z;` : \"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)), I.output === r.Color && (R.include(i, I), R.include(b, I), R.include(v, I), R.include(A, I), R.include(I.instancedDoublePrecision ? L : j, I), R.include(u, I), E(R.fragment, I), w(k), p(k), f(k), k.uniforms.add(z.uniforms.get(\"localOrigin\"), z.uniforms.get(\"view\"), new N(\"ambient\", e => e.ambient), new N(\"diffuse\", e => e.diffuse), new $(\"opacity\", e => e.opacity), new $(\"layerOpacity\", e => e.layerOpacity)), I.hasColorTexture && k.uniforms.add(new V(\"tex\", e => e.texture)), R.include(x, I), R.include(y, I), k.include(O), I.transparencyPassType === B.ColorAlpha && (R.outputs.add(\"fragColor\", \"vec4\", 0), R.outputs.add(\"fragAlpha\", \"float\", 1)), h(k), k.code.add(F`\n      void main() {\n        discardBySlice(vpos);\n        ${I.multipassEnabled ? F`terrainDepthTest(depth);` : \"\"}\n        ${I.hasColorTexture ? F`\n                vec4 texColor = texture(tex, ${I.hasColorTextureTransform ? F`colorUV` : F`vuv0`});\n                ${I.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n                discardOrAdjustAlpha(texColor);` : F`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - cameraPosition);\n        ${I.pbrMode === C.Normal ? \"applyPBRFactors();\" : \"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${I.receiveShadows ? \"float shadow = readShadowMap(vpos, linearDepth);\" : I.spherical ? \"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\" : \"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${I.hasVertexColors ? F`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : F`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${I.snowCover ? F`albedo = mix(albedo, vec3(1), 0.9);` : F``}\n        ${F`\n            vec3 shadingNormal = normalize(vNormalWorld);\n            albedo *= 1.2;\n            vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n            float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);\n            float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);\n            float treeRadialFalloff = vColor.r;\n            float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n            additionalLight += backLightFactor * mainLightIntensity;`}\n        ${I.pbrMode === C.Normal || I.pbrMode === C.Schematic ? I.spherical ? F`vec3 normalGround = normalize(vpos + localOrigin);` : F`vec3 normalGround = vec3(0.0, 0.0, 1.0);` : F``}\n        ${I.pbrMode === C.Normal || I.pbrMode === C.Schematic ? F`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                ${I.snowCover ? F`\n                        mrr = vec3(0.0, 1.0, 0.04);\n                        emission = vec3(0.0);` : \"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : F`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${I.transparencyPassType === B.ColorAlpha ? F`\n                fragColor = premultiplyAlpha(fragColor);\n                fragAlpha = fragColor.a;` : \"\"}\n      }\n    `)), R.include(m, I), R;\n}\nconst R = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: I\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { R, I as b };"],
  "mappings": "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",
  "names": ["I", "R", "o", "l", "e", "t", "s", "x", "a", "n", "i"]
}
