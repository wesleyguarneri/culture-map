{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/SSAO.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { set as e } from \"../core/libs/gl-matrix-2/math/vec2.js\";\nimport { create as r } from \"../core/libs/gl-matrix-2/factories/vec2f64.js\";\nimport { ScreenSpacePass as t } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";\nimport { ReadDepth as o } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js\";\nimport { CameraSpace as a } from \"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";\nimport { Float2PassUniform as n } from \"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";\nimport { FloatPassUniform as i } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as c } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as s } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as l } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nconst u = 16;\nfunction f() {\n  const r = new s(),\n    f = r.fragment;\n  return r.include(t), r.include(a), f.include(o), f.uniforms.add(new i(\"radius\", (e, r) => d(r.camera))).code.add(c`vec3 sphere[16] = vec3[16](\nvec3(0.186937, 0.0, 0.0),\nvec3(0.700542, 0.0, 0.0),\nvec3(-0.864858, -0.481795, -0.111713),\nvec3(-0.624773, 0.102853, -0.730153),\nvec3(-0.387172, 0.260319, 0.007229),\nvec3(-0.222367, -0.642631, -0.707697),\nvec3(-0.01336, -0.014956, 0.169662),\nvec3(0.122575, 0.1544, -0.456944),\nvec3(-0.177141, 0.85997, -0.42346),\nvec3(-0.131631, 0.814545, 0.524355),\nvec3(-0.779469, 0.007991, 0.624833),\nvec3(0.308092, 0.209288,0.35969),\nvec3(0.359331, -0.184533, -0.377458),\nvec3(0.192633, -0.482999, -0.065284),\nvec3(0.233538, 0.293706, -0.055139),\nvec3(0.417709, -0.386701, 0.442449)\n);\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn - bias, 0.0);\n}`), f.code.add(c`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`), f.uniforms.add(new l(\"normalMap\", e => e.normalTexture), new l(\"depthMap\", e => e.depthTexture), new i(\"projScale\", e => e.projScale), new l(\"rnm\", e => e.noiseTexture), new n(\"rnmScale\", (r, t) => e(m, t.camera.fullWidth / r.noiseTexture.descriptor.width, t.camera.fullHeight / r.noiseTexture.descriptor.height)), new i(\"intensity\", e => e.intensity), new n(\"screenSize\", (r, t) => e(m, t.camera.fullWidth, t.camera.fullHeight))), r.outputs.add(\"fragOcclusion\", \"float\"), f.code.add(c`\n    void main(void) {\n      float depth = depthFromTexture(depthMap, uv);\n\n      // Early out if depth is out of range, such as in the sky\n      if (depth >= 1.0 || depth <= 0.0) {\n        fragOcclusion = 1.0;\n        return;\n      }\n\n      // get the normal of current fragment\n      vec4 norm4 = texture(normalMap, uv);\n      if(norm4.a != 1.0) {\n        fragOcclusion = 1.0;\n        return;\n      }\n      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n\n      float currentPixelDepth = linearizeDepth(depth);\n      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy, currentPixelDepth);\n\n      float sum = 0.0;\n      vec3 tapPixelPos;\n\n      vec3 fres = normalize(2.0 * texture(rnm, uv * rnmScale).xyz - 1.0);\n\n      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n      // bug or deviation from CE somewhere else?\n      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n      for(int i = 0; i < ${c.int(u)}; ++i) {\n        vec2 unitOffset = reflect(sphere[i], fres).xy;\n        vec2 offset = vec2(-unitOffset * radius * ps);\n\n        // don't use current or very nearby samples\n        if( abs(offset.x) < 2.0 || abs(offset.y) < 2.0){\n          continue;\n        }\n\n        vec2 tc = vec2(gl_FragCoord.xy + offset);\n        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n        vec2 tcTap = tc / screenSize;\n        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap);\n\n        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n        sum += aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n      }\n\n      // output the result\n      float A = max(1.0 - sum * intensity / float(${c.int(u)}), 0.0);\n\n      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4) / 2.2\n      A = (pow(A, 0.2) + 1.2 * A*A*A*A) / 2.2;\n\n      fragOcclusion = A;\n    }\n  `), r;\n}\nfunction d(e) {\n  return Math.max(10, 20 * e.computeScreenPixelSizeAtDist(Math.abs(4 * e.relativeElevation)));\n}\nconst m = r(),\n  v = Object.freeze(Object.defineProperty({\n    __proto__: null,\n    build: f,\n    getRadius: d\n  }, Symbol.toStringTag, {\n    value: \"Module\"\n  }));\nexport { v as S, f as b, d as g };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAM,IAAI;AACV,SAASA,KAAI;AACX,QAAM,IAAI,IAAIC,GAAE,GACdD,KAAI,EAAE;AACR,SAAO,EAAE,QAAQC,EAAC,GAAG,EAAE,QAAQ,CAAC,GAAGD,GAAE,QAAQ,CAAC,GAAGA,GAAE,SAAS,IAAI,IAAIC,GAAE,UAAU,CAACC,IAAGC,OAAM,EAAEA,GAAE,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBjH,GAAGH,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,EAKd,GAAGA,GAAE,SAAS,IAAI,IAAI,EAAE,aAAa,CAAAE,OAAKA,GAAE,aAAa,GAAG,IAAI,EAAE,YAAY,CAAAA,OAAKA,GAAE,YAAY,GAAG,IAAID,GAAE,aAAa,CAAAC,OAAKA,GAAE,SAAS,GAAG,IAAI,EAAE,OAAO,CAAAA,OAAKA,GAAE,YAAY,GAAG,IAAI,EAAE,YAAY,CAACC,IAAG,MAAMF,GAAE,GAAG,EAAE,OAAO,YAAYE,GAAE,aAAa,WAAW,OAAO,EAAE,OAAO,aAAaA,GAAE,aAAa,WAAW,MAAM,CAAC,GAAG,IAAIF,GAAE,aAAa,CAAAC,OAAKA,GAAE,SAAS,GAAG,IAAI,EAAE,cAAc,CAACC,IAAG,MAAMF,GAAE,GAAG,EAAE,OAAO,WAAW,EAAE,OAAO,UAAU,CAAC,CAAC,GAAG,EAAE,QAAQ,IAAI,iBAAiB,OAAO,GAAGD,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BA8B9c,EAAE,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAoBiB,EAAE,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOzD,GAAG;AACN;AACA,SAAS,EAAEE,IAAG;AACZ,SAAO,KAAK,IAAI,IAAI,KAAKA,GAAE,6BAA6B,KAAK,IAAI,IAAIA,GAAE,iBAAiB,CAAC,CAAC;AAC5F;AACA,IAAM,IAAI,EAAE;AAAZ,IACE,IAAI,OAAO,OAAO,OAAO,eAAe;AAAA,EACtC,WAAW;AAAA,EACX,OAAOF;AAAA,EACP,WAAW;AACb,GAAG,OAAO,aAAa;AAAA,EACrB,OAAO;AACT,CAAC,CAAC;",
  "names": ["f", "o", "e", "r"]
}
