{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/2d/engine/webgl/OverlayContainer.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { identity as t, multiply as e, translate as r, scale as s, rotate as o } from \"../../../../core/libs/gl-matrix-2/math/mat3.js\";\nimport { create as i } from \"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";\nimport { fromValues as a } from \"../../../../core/libs/gl-matrix-2/factories/vec2f32.js\";\nimport { fromValues as n } from \"../../../../core/libs/gl-matrix-2/factories/vec3f32.js\";\nimport { normalizeMapX as l } from \"../../../../geometry/support/normalizeUtils.js\";\nimport { getInfo as c } from \"../../../../geometry/support/spatialReferenceUtils.js\";\nimport { getWorldWidth as p } from \"../../viewpointUtils.js\";\nimport { brushes as m } from \"../brushes.js\";\nimport { WGLDrawPhase as d } from \"./enums.js\";\nimport h from \"./WGLContainer.js\";\nclass f extends h {\n  constructor() {\n    super(...arguments), this._viewStateId = -1, this._dvsMat3 = i();\n  }\n  get dvsMat3() {\n    return this._dvsMat3;\n  }\n  beforeRender(t) {\n    this._updateMatrices(t), this._updateOverlays(t, this.children);\n    for (const e of this.children) e.beforeRender(t);\n  }\n  prepareRenderPasses(t) {\n    const e = t.registerRenderPass({\n      name: \"overlay\",\n      brushes: [m.overlay],\n      target: () => this.children,\n      drawPhase: d.MAP\n    });\n    return [...super.prepareRenderPasses(t), e];\n  }\n  _updateMatrices(i) {\n    const {\n        state: c\n      } = i,\n      {\n        id: p,\n        size: m,\n        pixelRatio: d,\n        resolution: h,\n        rotation: f,\n        viewpoint: u,\n        displayMat3: M\n      } = c;\n    if (this._viewStateId === p) return;\n    const v = Math.PI / 180 * f,\n      g = d * m[0],\n      _ = d * m[1];\n    this._localOrigin = u.targetGeometry.clone();\n    const {\n        x: y,\n        y: b\n      } = this._localOrigin,\n      x = l(y, c.spatialReference);\n    this._localOrigin.x = x, this._localOrigin.y = b;\n    const j = h * g,\n      w = h * _,\n      R = t(this._dvsMat3);\n    e(R, R, M), r(R, R, a(g / 2, _ / 2)), s(R, R, n(g / j, -_ / w, 1)), o(R, R, -v), this._viewStateId = p;\n  }\n  _updateOverlays(t, e) {\n    const {\n        state: r\n      } = t,\n      {\n        rotation: s,\n        spatialReference: o,\n        worldScreenWidth: i,\n        size: a,\n        viewpoint: n\n      } = r,\n      l = this._localOrigin;\n    let m,\n      d = 0;\n    const h = c(o);\n    if (h && o.isWrappable) {\n      const t = a[0],\n        e = a[1],\n        l = 180 / Math.PI * s,\n        c = Math.abs(Math.cos(l)),\n        f = Math.abs(Math.sin(l)),\n        u = Math.round(t * c + e * f),\n        [M, v] = h.valid,\n        g = p(o),\n        {\n          x: _,\n          y\n        } = n.targetGeometry,\n        b = [_, y],\n        x = [0, 0];\n      r.toScreen(x, b);\n      const j = [0, 0];\n      let w;\n      w = u > i ? .5 * i : .5 * u;\n      const R = Math.floor((_ + .5 * g) / g),\n        O = M + R * g,\n        P = v + R * g,\n        I = [x[0] + w, 0];\n      r.toMap(j, I), j[0] > P && (d = g), I[0] = x[0] - w, r.toMap(j, I), j[0] < O && (d = -g), m = {\n        worldWidth: g,\n        xBounds: [M, v]\n      };\n    }\n    for (const c of e) c.updateDrawCoords(l, d, o, m);\n  }\n}\nexport { f as default };"],
  "mappings": "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",
  "names": ["f", "t", "e", "h", "i", "M", "r", "s", "o", "n", "l"]
}
