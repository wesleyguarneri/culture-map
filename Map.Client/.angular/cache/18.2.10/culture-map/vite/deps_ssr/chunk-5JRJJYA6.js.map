{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/SSAOBlur.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { p as e } from \"./vec32.js\";\nimport { ScreenSpacePass as r } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";\nimport { ReadDepth as o } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js\";\nimport { Float2DrawUniform as t } from \"../views/3d/webgl-engine/core/shaderModules/Float2DrawUniform.js\";\nimport { FloatPassUniform as a } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as l } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as n } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DDrawUniform as s } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DDrawUniform.js\";\nimport { Texture2DPassUniform as d } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nconst i = 4;\nfunction f() {\n  const f = new n(),\n    u = f.fragment;\n  f.include(r);\n  const c = (i + 1) / 2,\n    p = 1 / (2 * c * c);\n  return u.include(o), u.uniforms.add(new d(\"depthMap\", e => e.depthTexture), new s(\"tex\", e => e.colorTexture), new t(\"blurSize\", e => e.blurSize), new a(\"projScale\", (r, o) => {\n    const t = e(o.camera.eye, o.camera.center);\n    return t > 5e4 ? Math.max(0, r.projScale - (t - 5e4)) : r.projScale;\n  })), u.code.add(l`\n    void blurFunction(vec2 uv, float r, float center_d, float sharpness, inout float wTotal, inout float bTotal) {\n      float c = texture(tex, uv).r;\n      float d = linearDepthFromTexture(depthMap, uv);\n\n      float ddiff = d - center_d;\n\n      float w = exp(-r * r * ${l.float(p)} - ddiff * ddiff * sharpness);\n      wTotal += w;\n      bTotal += w * c;\n    }\n  `), f.outputs.add(\"fragBlur\", \"float\"), u.code.add(l`\n    void main(void) {\n      float b = 0.0;\n      float w_total = 0.0;\n\n      float center_d = linearDepthFromTexture(depthMap, uv);\n\n      float sharpness = -0.05 * projScale / center_d;\n      for (int r = -${l.int(i)}; r <= ${l.int(i)}; ++r) {\n        float rf = float(r);\n        vec2 uvOffset = uv + rf * blurSize;\n        blurFunction(uvOffset, rf, center_d, sharpness, w_total, b);\n      }\n\n      fragBlur = b / w_total;\n    }\n  `), f;\n}\nconst u = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: f\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { u as S, f as b };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAM,IAAI;AACV,SAAS,IAAI;AACX,QAAMA,KAAI,IAAIC,GAAE,GACdC,KAAIF,GAAE;AACR,EAAAA,GAAE,QAAQC,EAAC;AACX,QAAME,MAAK,IAAI,KAAK,GAClB,IAAI,KAAK,IAAIA,KAAIA;AACnB,SAAOD,GAAE,QAAQ,CAAC,GAAGA,GAAE,SAAS,IAAI,IAAIE,GAAE,YAAY,OAAK,EAAE,YAAY,GAAG,IAAI,EAAE,OAAO,OAAK,EAAE,YAAY,GAAG,IAAIH,GAAE,YAAY,OAAK,EAAE,QAAQ,GAAG,IAAIA,GAAE,aAAa,CAAC,GAAGA,OAAM;AAC9K,UAAM,IAAI,EAAEA,GAAE,OAAO,KAAKA,GAAE,OAAO,MAAM;AACzC,WAAO,IAAI,MAAM,KAAK,IAAI,GAAG,EAAE,aAAa,IAAI,IAAI,IAAI,EAAE;AAAA,EAC5D,CAAC,CAAC,GAAGC,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAOa,EAAE,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,GAItC,GAAGF,GAAE,QAAQ,IAAI,YAAY,OAAO,GAAGE,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAQ/B,EAAE,IAAI,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQ7C,GAAGF;AACN;AACA,IAAM,IAAI,OAAO,OAAO,OAAO,eAAe;AAAA,EAC5C,WAAW;AAAA,EACX,OAAO;AACT,GAAG,OAAO,aAAa;AAAA,EACrB,OAAO;AACT,CAAC,CAAC;",
  "names": ["f", "o", "u", "c", "s"]
}
