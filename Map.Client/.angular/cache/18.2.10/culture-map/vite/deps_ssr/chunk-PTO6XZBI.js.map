{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/2d/engine/ImageryBitmapSource.js", "../../../../../../node_modules/@arcgis/core/views/2d/engine/Bitmap.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass l {\n  constructor(l, e, t) {\n    this.pixelBlock = l, this.extent = e, this.originalPixelBlock = t;\n  }\n  get width() {\n    return null != this.pixelBlock ? this.pixelBlock.width : 0;\n  }\n  get height() {\n    return null != this.pixelBlock ? this.pixelBlock.height : 0;\n  }\n  render(l) {\n    const e = this.pixelBlock;\n    if (null == e) return;\n    const t = this.filter({\n      extent: this.extent,\n      pixelBlock: this.originalPixelBlock ?? e\n    });\n    if (null == t.pixelBlock) return;\n    t.pixelBlock.maskIsAlpha && (t.pixelBlock.premultiplyAlpha = !0);\n    const i = t.pixelBlock.getAsRGBA(),\n      h = l.createImageData(t.pixelBlock.width, t.pixelBlock.height);\n    h.data.set(i), l.putImageData(h, 0, 0);\n  }\n  getRenderedRasterPixels() {\n    const l = this.filter({\n      extent: this.extent,\n      pixelBlock: this.pixelBlock\n    });\n    return null == l.pixelBlock ? null : (l.pixelBlock.maskIsAlpha && (l.pixelBlock.premultiplyAlpha = !0), {\n      width: l.pixelBlock.width,\n      height: l.pixelBlock.height,\n      renderedRasterPixels: new Uint8Array(l.pixelBlock.getAsRGBA().buffer)\n    });\n  }\n}\nexport { l as default };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { createResolver as t, onAbortOrThrow as e, throwIfNotAbortError as i } from \"../../../core/promiseUtils.js\";\nimport { identity as s, translate as r, rotate as h, scaleByVec2 as o, multiply as u } from \"../../../core/libs/gl-matrix-2/math/mat3.js\";\nimport { create as a } from \"../../../core/libs/gl-matrix-2/factories/mat3f32.js\";\nimport { fromValues as n } from \"../../../core/libs/gl-matrix-2/factories/vec2f32.js\";\nimport { DisplayObject as l } from \"./DisplayObject.js\";\nimport d from \"./ImageryBitmapSource.js\";\nimport { SizedPixelFormat as c, PixelFormat as _, TextureWrapMode as p } from \"../../webgl/enums.js\";\nimport { Texture as m } from \"../../webgl/Texture.js\";\nimport { TextureDescriptor as x } from \"../../webgl/TextureDescriptor.js\";\nfunction g(t) {\n  return t && \"render\" in t;\n}\nfunction f(t) {\n  const e = document.createElement(\"canvas\");\n  return e.width = t.width, e.height = t.height, t.render(e.getContext(\"2d\")), e;\n}\nfunction w(t) {\n  return g(t) ? t instanceof d ? t.getRenderedRasterPixels()?.renderedRasterPixels : f(t) : t;\n}\nclass b extends l {\n  constructor(t = null, e = !1) {\n    super(), this.blendFunction = \"standard\", this._sourceWidth = 0, this._sourceHeight = 0, this._textureInvalidated = !1, this._texture = null, this.stencilRef = 0, this.coordScale = [1, 1], this._height = void 0, this.pixelRatio = 1, this.resolution = 0, this.rotation = 0, this._source = null, this._width = void 0, this.x = 0, this.y = 0, this.immutable = e, this.source = t, this.requestRender = this.requestRender.bind(this);\n  }\n  destroy() {\n    this._texture && (this._texture.dispose(), this._texture = null), null != this._uploadStatus && (this._uploadStatus.controller.abort(), this._uploadStatus = null);\n  }\n  get isSourceScaled() {\n    return this.width !== this._sourceWidth || this.height !== this._sourceHeight;\n  }\n  get height() {\n    return void 0 !== this._height ? this._height : this._sourceHeight;\n  }\n  set height(t) {\n    this._height = t;\n  }\n  get source() {\n    return this._source;\n  }\n  set source(t) {\n    null == t && null == this._source || (this._source = t, this.invalidateTexture(), this.requestRender());\n  }\n  get width() {\n    return void 0 !== this._width ? this._width : this._sourceWidth;\n  }\n  set width(t) {\n    this._width = t;\n  }\n  beforeRender(t) {\n    super.beforeRender(t), this.updateTexture(t);\n  }\n  async setSourceAsync(i, s) {\n    null != this._uploadStatus && this._uploadStatus.controller.abort();\n    const r = new AbortController(),\n      h = t();\n    return e(s, () => r.abort()), e(r, t => h.reject(t)), this._uploadStatus = {\n      controller: r,\n      resolver: h\n    }, this.source = i, h.promise;\n  }\n  invalidateTexture() {\n    this._textureInvalidated || (this._textureInvalidated = !0, this._source instanceof HTMLImageElement ? (this._sourceHeight = this._source.naturalHeight, this._sourceWidth = this._source.naturalWidth) : this._source && (this._sourceHeight = this._source.height, this._sourceWidth = this._source.width));\n  }\n  updateTransitionProperties(t, e) {\n    t >= 64 && (this.fadeTransitionEnabled = !1, this.inFadeTransition = !1), super.updateTransitionProperties(t, e);\n  }\n  setTransform(t) {\n    const e = s(this.transforms.displayViewScreenMat3),\n      [i, a] = t.toScreenNoRotation([0, 0], [this.x, this.y]),\n      l = this.resolution / this.pixelRatio / t.resolution,\n      d = l * this.width,\n      c = l * this.height,\n      _ = Math.PI * this.rotation / 180;\n    r(e, e, n(i, a)), r(e, e, n(d / 2, c / 2)), h(e, e, -_), r(e, e, n(-d / 2, -c / 2)), o(e, e, n(d, c)), u(this.transforms.displayViewScreenMat3, t.displayViewMat3, e);\n  }\n  setSamplingProfile(t) {\n    this._texture && (t.mips && !this._texture.descriptor.hasMipmap && this._texture.generateMipmap(), this._texture.setSamplingMode(t.samplingMode));\n  }\n  bind(t, e) {\n    this._texture && t.bindTexture(this._texture, e);\n  }\n  async updateTexture({\n    context: t,\n    painter: e\n  }) {\n    if (!this._textureInvalidated) return;\n    if (this._textureInvalidated = !1, this._texture || (this._texture = this._createTexture(t)), !this.source) return void this._texture.setData(null);\n    this._texture.resize(this._sourceWidth, this._sourceHeight);\n    const s = w(this.source);\n    try {\n      if (null != this._uploadStatus) {\n        const {\n            controller: t,\n            resolver: i\n          } = this._uploadStatus,\n          r = {\n            signal: t.signal\n          },\n          {\n            width: h,\n            height: o\n          } = this,\n          u = this._texture,\n          a = e.textureUploadManager;\n        await a.enqueueTextureUpdate({\n          data: s,\n          texture: u,\n          width: h,\n          height: o\n        }, r), i.resolve(), this._uploadStatus = null;\n      } else this._texture.setData(s);\n      this.ready();\n    } catch (r) {\n      i(r);\n    }\n  }\n  onDetach() {\n    this.destroy();\n  }\n  _createTransforms() {\n    return {\n      displayViewScreenMat3: a()\n    };\n  }\n  _createTexture(t) {\n    const e = this.immutable,\n      i = new x();\n    return i.internalFormat = e ? c.RGBA8 : _.RGBA, i.wrapMode = p.CLAMP_TO_EDGE, i.isImmutable = e, i.width = this._sourceWidth, i.height = this._sourceHeight, new m(t, i);\n  }\n}\nexport { b as Bitmap, g as isImageSource, f as rasterize };"],
  "mappings": "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",
  "names": ["l", "e", "t", "i", "h", "t", "f", "e", "w", "b", "i", "s", "h", "l", "c", "o"]
}
