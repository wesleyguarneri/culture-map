{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/2d/tiling/LODInfo.js", "../../../../../../node_modules/@arcgis/core/views/2d/tiling/TileCoverage.js", "../../../../../../node_modules/@arcgis/core/views/2d/tiling/TileSpan.js", "../../../../../../node_modules/@arcgis/core/views/2d/tiling/TileInfoView.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { getInfo as t } from \"../../../geometry/support/spatialReferenceUtils.js\";\nimport r from \"./TileKey.js\";\nfunction o(t, r) {\n  return [t, r];\n}\nfunction i(t, r, o) {\n  return t[0] = r, t[1] = o, t;\n}\nfunction e(t, r, o, i, e) {\n  return t[0] = r, t[1] = o, t[2] = i, t[3] = e, t;\n}\nconst s = new r(\"0/0/0/0\");\nclass n {\n  static create(r, e, s = null) {\n    const l = t(r.spatialReference),\n      h = e.origin || o(r.origin.x, r.origin.y),\n      a = o(r.size[0] * e.resolution, r.size[1] * e.resolution),\n      u = o(-1 / 0, -1 / 0),\n      m = o(1 / 0, 1 / 0),\n      g = o(1 / 0, 1 / 0);\n    null != s && (i(u, Math.max(0, Math.floor((s.xmin - h[0]) / a[0])), Math.max(0, Math.floor((h[1] - s.ymax) / a[1]))), i(m, Math.max(0, Math.floor((s.xmax - h[0]) / a[0])), Math.max(0, Math.floor((h[1] - s.ymin) / a[1]))), i(g, m[0] - u[0] + 1, m[1] - u[1] + 1));\n    const {\n      cols: w,\n      rows: c\n    } = e;\n    let d, f, F, z;\n    return !s && w && c && (i(u, w[0], c[0]), i(m, w[1], c[1]), i(g, w[1] - w[0] + 1, c[1] - c[0] + 1)), r.isWrappable ? (d = o(Math.ceil(Math.round((l.valid[1] - l.valid[0]) / e.resolution) / r.size[0]), g[1]), f = o(Math.floor((l.origin[0] - h[0]) / a[0]), u[1]), F = o(d[0] + f[0] - 1, m[1]), z = !0) : (f = u, F = m, d = g, z = !1), new n(e.level, e.resolution, e.scale, h, u, m, g, a, f, F, d, z);\n  }\n  constructor(t, r, o, i, e, s, n, l, h, a, u, m) {\n    this.level = t, this.resolution = r, this.scale = o, this.origin = i, this.first = e, this.last = s, this.size = n, this.norm = l, this.worldStart = h, this.worldEnd = a, this.worldSize = u, this.wrap = m;\n  }\n  normalizeCol(t) {\n    if (!this.wrap) return t;\n    const r = this.worldSize[0];\n    return t < 0 ? r - 1 - Math.abs((t + 1) % r) : t % r;\n  }\n  denormalizeCol(t, r) {\n    return this.wrap ? this.worldSize[0] * r + t : t;\n  }\n  getWorldForColumn(t) {\n    return this.wrap ? Math.floor(t / this.worldSize[0]) : 0;\n  }\n  getFirstColumnForWorld(t) {\n    return t * this.worldSize[0] + this.first[0];\n  }\n  getLastColumnForWorld(t) {\n    return t * this.worldSize[0] + this.first[0] + this.size[0] - 1;\n  }\n  getColumnForX(t) {\n    return (t - this.origin[0]) / this.norm[0];\n  }\n  getXForColumn(t) {\n    return this.origin[0] + t * this.norm[0];\n  }\n  getRowForY(t) {\n    return (this.origin[1] - t) / this.norm[1];\n  }\n  getYForRow(t) {\n    return this.origin[1] - t * this.norm[1];\n  }\n  getTileBounds(t, r, o = !1) {\n    s.set(r);\n    const i = o ? s.col : this.denormalizeCol(s.col, s.world),\n      n = s.row;\n    return e(t, this.getXForColumn(i), this.getYForRow(n + 1), this.getXForColumn(i + 1), this.getYForRow(n)), t;\n  }\n  getTileCoords(t, r, o = !1) {\n    s.set(r);\n    const e = o ? s.col : this.denormalizeCol(s.col, s.world);\n    return Array.isArray(t) ? i(t, this.getXForColumn(e), this.getYForRow(s.row)) : (t.x = this.getXForColumn(e), t.y = this.getYForRow(s.row)), t;\n  }\n}\nexport { n as default };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport o from \"../../../core/ObjectPool.js\";\nimport l from \"./TileKey.js\";\nclass s {\n  constructor() {\n    this.spans = [];\n  }\n  acquire(o) {\n    this.lodInfo = o;\n  }\n  release() {\n    this.lodInfo = null, this.spans.length = 0;\n  }\n  *keys() {\n    const o = this.lodInfo;\n    for (const {\n      row: s,\n      colFrom: e,\n      colTo: r\n    } of this.spans) for (let t = e; t <= r; t++) {\n      const e = o.getWorldForColumn(t);\n      yield new l(o.level, s, o.normalizeCol(t), e);\n    }\n  }\n  forEach(o, l) {\n    const {\n        spans: s,\n        lodInfo: e\n      } = this,\n      {\n        level: r\n      } = e;\n    if (0 !== s.length) for (const {\n      row: t,\n      colFrom: n,\n      colTo: c\n    } of s) for (let s = n; s <= c; s++) o.call(l, r, t, e.normalizeCol(s), e.getWorldForColumn(s));\n  }\n}\ns.pool = new o(s);\nexport { s as default };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass o {\n  constructor(o, s, t) {\n    this.row = o, this.colFrom = s, this.colTo = t;\n  }\n}\nexport { o as default };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { getInfo as e } from \"../../../geometry/support/spatialReferenceUtils.js\";\nimport t from \"./LODInfo.js\";\nimport o from \"./TileCoverage.js\";\nimport l from \"./TileKey.js\";\nimport s from \"./TileSpan.js\";\nconst i = new l(\"0/0/0/0\");\nclass n {\n  static create(e, t) {\n    e[1] > t[1] && ([e, t] = [t, e]);\n    const [o, l] = e,\n      [s, i] = t,\n      r = s - o,\n      a = i - l,\n      h = 0 !== a ? r / a : 0,\n      c = (Math.ceil(l) - l) * h,\n      f = (Math.floor(l) - l) * h;\n    return new n(o, Math.floor(l), Math.ceil(i), h, r < 0 ? c : f, r < 0 ? f : c, r < 0 ? s : o, r < 0 ? o : s);\n  }\n  constructor(e, t, o, l, s, i, n, r) {\n    this.x = e, this.ymin = t, this.ymax = o, this.invM = l, this.leftAdjust = s, this.rightAdjust = i, this.leftBound = n, this.rightBound = r;\n  }\n  incrRow() {\n    this.x += this.invM;\n  }\n  getLeftCol() {\n    return Math.max(this.x + this.leftAdjust, this.leftBound);\n  }\n  getRightCol() {\n    return Math.min(this.x + this.rightAdjust, this.rightBound);\n  }\n}\nconst r = [[0, 0], [0, 0], [0, 0], [0, 0]],\n  a = 1e-6;\nclass h {\n  constructor(e, o = null, l = e.lods[0].level, s = e.lods[e.lods.length - 1].level) {\n    this.tileInfo = e, this.fullExtent = o, this.scales = [], this._infoByScale = {}, this._infoByLevel = {};\n    const i = e.lods.filter(e => e.level >= l && e.level <= s);\n    this.minScale = i[0].scale, this.maxScale = i[i.length - 1].scale;\n    const n = this._lodInfos = i.map(l => t.create(e, l, o));\n    i.forEach((e, t) => {\n      this._infoByLevel[e.level] = n[t], this._infoByScale[e.scale] = n[t], this.scales[t] = e.scale;\n    }, this), this._wrap = e.isWrappable;\n  }\n  get spatialReference() {\n    return this.tileInfo.spatialReference;\n  }\n  getLODInfoAt(e) {\n    return this._infoByLevel[\"number\" == typeof e ? e : e.level];\n  }\n  getTileBounds(e, t, o = !1) {\n    i.set(t);\n    const l = this._infoByLevel[i.level];\n    return l ? l.getTileBounds(e, i, o) : e;\n  }\n  getTileCoords(e, t, o = !1) {\n    i.set(t);\n    const l = this._infoByLevel[i.level];\n    return l ? l.getTileCoords(e, i, o) : e;\n  }\n  getTileCoverage(e, t = 192, l = !0, i = \"closest\") {\n    if (!l && (e.scale > this.minScale || e.scale < this.maxScale)) return null;\n    const a = \"closest\" === i ? this.getClosestInfoForScale(e.scale) : this.getSmallestInfoForScale(e.scale),\n      h = o.pool.acquire(a),\n      c = this._wrap;\n    let f,\n      u,\n      m,\n      g = 1 / 0,\n      d = -1 / 0;\n    const v = h.spans;\n    r[0][0] = r[0][1] = r[1][1] = r[3][0] = -t, r[1][0] = r[2][0] = e.size[0] + t, r[2][1] = r[3][1] = e.size[1] + t;\n    for (const o of r) e.toMap(o, o), o[0] = a.getColumnForX(o[0]), o[1] = a.getRowForY(o[1]);\n    const y = [];\n    let _ = 3;\n    for (let o = 0; o < 4; o++) {\n      if (r[o][1] === r[_][1]) {\n        _ = o;\n        continue;\n      }\n      const e = n.create(r[o], r[_]);\n      g = Math.min(e.ymin, g), d = Math.max(e.ymax, d), void 0 === y[e.ymin] && (y[e.ymin] = []), y[e.ymin].push(e), _ = o;\n    }\n    if (null == g || null == d || d - g > 100) return null;\n    let p = [];\n    for (f = g; f < d;) {\n      null != y[f] && (p = p.concat(y[f])), u = 1 / 0, m = -1 / 0;\n      for (let e = p.length - 1; e >= 0; e--) {\n        const t = p[e];\n        u = Math.min(u, t.getLeftCol()), m = Math.max(m, t.getRightCol());\n      }\n      if (u = Math.floor(u), m = Math.floor(m), f >= a.first[1] && f <= a.last[1]) if (c) {\n        if (a.size[0] < a.worldSize[0]) {\n          const e = Math.floor(m / a.worldSize[0]);\n          for (let t = Math.floor(u / a.worldSize[0]); t <= e; t++) v.push(new s(f, Math.max(a.getFirstColumnForWorld(t), u), Math.min(a.getLastColumnForWorld(t), m)));\n        } else v.push(new s(f, u, m));\n      } else u > a.last[0] || m < a.first[0] || (u = Math.max(u, a.first[0]), m = Math.min(m, a.last[0]), v.push(new s(f, u, m)));\n      f += 1;\n      for (let e = p.length - 1; e >= 0; e--) {\n        const t = p[e];\n        t.ymax >= f ? t.incrRow() : p.splice(e, 1);\n      }\n    }\n    return h;\n  }\n  getTileParentId(e) {\n    i.set(e);\n    const t = this._infoByLevel[i.level],\n      o = this._lodInfos.indexOf(t) - 1;\n    return o < 0 ? null : (this._getTileIdAtLOD(i, this._lodInfos[o], i), i.id);\n  }\n  getTileResolution(e) {\n    const t = this._infoByLevel[\"object\" == typeof e ? e.level : e];\n    return t ? t.resolution : -1;\n  }\n  getTileScale(e) {\n    const t = this._infoByLevel[e.level];\n    return t ? t.scale : -1;\n  }\n  intersects(e, t) {\n    i.set(t);\n    const o = this._infoByLevel[i.level],\n      l = e.lodInfo;\n    if (l.resolution > o.resolution) {\n      this._getTileIdAtLOD(i, l, i);\n      const t = l.denormalizeCol(i.col, i.world);\n      for (const o of e.spans) if (o.row === i.row && o.colFrom <= t && o.colTo >= t) return !0;\n    }\n    if (l.resolution < o.resolution) {\n      const [t, s, n, r] = e.spans.reduce((e, t) => (e[0] = Math.min(e[0], t.row), e[1] = Math.max(e[1], t.row), e[2] = Math.min(e[2], t.colFrom), e[3] = Math.max(e[3], t.colTo), e), [1 / 0, -1 / 0, 1 / 0, -1 / 0]),\n        a = o.denormalizeCol(i.col, i.world),\n        h = l.getColumnForX(o.getXForColumn(a)),\n        c = l.getRowForY(o.getYForRow(i.row)),\n        f = l.getColumnForX(o.getXForColumn(a + 1)) - 1,\n        u = l.getRowForY(o.getYForRow(i.row + 1)) - 1;\n      return !(h > r || f < n || c > s || u < t);\n    }\n    const s = l.denormalizeCol(i.col, i.world);\n    return e.spans.some(e => e.row === i.row && e.colFrom <= s && e.colTo >= s);\n  }\n  normalizeBounds(t, o, l) {\n    if (t[0] = o[0], t[1] = o[1], t[2] = o[2], t[3] = o[3], this._wrap) {\n      const o = e(this.tileInfo.spatialReference),\n        s = -l * (o.valid[1] - o.valid[0]);\n      t[0] += s, t[2] += s;\n    }\n    return t;\n  }\n  getSmallestInfoForScale(e) {\n    const t = this.scales;\n    if (this._infoByScale[e]) return this._infoByScale[e];\n    if (e > t[0]) return this._infoByScale[t[0]];\n    for (let o = 1; o < t.length - 1; o++) if (e > t[o] + a) return this._infoByScale[t[o - 1]];\n    return this._infoByScale[t[t.length - 1]];\n  }\n  getClosestInfoForScale(e) {\n    const t = this.scales;\n    return this._infoByScale[e] || (e = t.reduce((t, o) => Math.abs(o - e) < Math.abs(t - e) ? o : t, t[0])), this._infoByScale[e];\n  }\n  scaleToLevel(e) {\n    const t = this.scales;\n    if (this._infoByScale[e]) return this._infoByScale[e].level;\n    for (let o = t.length - 1; o >= 0; o--) if (e < t[o]) {\n      if (o === t.length - 1) return this._infoByScale[t[t.length - 1]].level;\n      return this._infoByScale[t[o]].level + (t[o] - e) / (t[o] - t[o + 1]);\n    }\n    return this._infoByScale[t[0]].level;\n  }\n  scaleToZoom(e) {\n    return this.tileInfo.scaleToZoom(e);\n  }\n  zoomToScale(e) {\n    return this.tileInfo.zoomToScale(e);\n  }\n  _getTileIdAtLOD(e, t, o) {\n    const l = this._infoByLevel[o.level];\n    return e.set(o), t.resolution < l.resolution ? null : (t.resolution === l.resolution || (e.level = t.level, e.col = Math.floor(o.col * l.resolution / t.resolution + .01), e.row = Math.floor(o.row * l.resolution / t.resolution + .01)), e);\n  }\n}\nexport { h as default };"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,EAAE,GAAGA,IAAG;AACf,SAAO,CAAC,GAAGA,EAAC;AACd;AACA,SAAS,EAAE,GAAGA,IAAGC,IAAG;AAClB,SAAO,EAAE,CAAC,IAAID,IAAG,EAAE,CAAC,IAAIC,IAAG;AAC7B;AACA,SAASC,GAAE,GAAGF,IAAGC,IAAGE,IAAGD,IAAG;AACxB,SAAO,EAAE,CAAC,IAAIF,IAAG,EAAE,CAAC,IAAIC,IAAG,EAAE,CAAC,IAAIE,IAAG,EAAE,CAAC,IAAID,IAAG;AACjD;AACA,IAAME,KAAI,IAAIF,GAAE,SAAS;AACzB,IAAM,IAAN,MAAM,GAAE;AAAA,EACN,OAAO,OAAOF,IAAGE,IAAGE,KAAI,MAAM;AAC5B,UAAM,IAAI,EAAEJ,GAAE,gBAAgB,GAC5BK,KAAIH,GAAE,UAAU,EAAEF,GAAE,OAAO,GAAGA,GAAE,OAAO,CAAC,GACxCM,KAAI,EAAEN,GAAE,KAAK,CAAC,IAAIE,GAAE,YAAYF,GAAE,KAAK,CAAC,IAAIE,GAAE,UAAU,GACxD,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC,GACpB,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,GAClB,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC;AACpB,YAAQE,OAAM,EAAE,GAAG,KAAK,IAAI,GAAG,KAAK,OAAOA,GAAE,OAAOC,GAAE,CAAC,KAAKC,GAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,GAAG,KAAK,OAAOD,GAAE,CAAC,IAAID,GAAE,QAAQE,GAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,IAAI,GAAG,KAAK,OAAOF,GAAE,OAAOC,GAAE,CAAC,KAAKC,GAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,GAAG,KAAK,OAAOD,GAAE,CAAC,IAAID,GAAE,QAAQE,GAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;AACnQ,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,MAAM;AAAA,IACR,IAAIJ;AACJ,QAAI,GAAG,GAAG,GAAG;AACb,WAAO,CAACE,MAAK,KAAK,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAIJ,GAAE,eAAe,IAAI,EAAE,KAAK,KAAK,KAAK,OAAO,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAKE,GAAE,UAAU,IAAIF,GAAE,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE,KAAK,OAAO,EAAE,OAAO,CAAC,IAAIK,GAAE,CAAC,KAAKC,GAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,SAAO,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,QAAK,IAAI,GAAEJ,GAAE,OAAOA,GAAE,YAAYA,GAAE,OAAOG,IAAG,GAAG,GAAG,GAAGC,IAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAC9Y;AAAA,EACA,YAAY,GAAGN,IAAGC,IAAGE,IAAGD,IAAGE,IAAGG,IAAG,GAAGF,IAAGC,IAAG,GAAG,GAAG;AAC9C,SAAK,QAAQ,GAAG,KAAK,aAAaN,IAAG,KAAK,QAAQC,IAAG,KAAK,SAASE,IAAG,KAAK,QAAQD,IAAG,KAAK,OAAOE,IAAG,KAAK,OAAOG,IAAG,KAAK,OAAO,GAAG,KAAK,aAAaF,IAAG,KAAK,WAAWC,IAAG,KAAK,YAAY,GAAG,KAAK,OAAO;AAAA,EAC7M;AAAA,EACA,aAAa,GAAG;AACd,QAAI,CAAC,KAAK,KAAM,QAAO;AACvB,UAAMN,KAAI,KAAK,UAAU,CAAC;AAC1B,WAAO,IAAI,IAAIA,KAAI,IAAI,KAAK,KAAK,IAAI,KAAKA,EAAC,IAAI,IAAIA;AAAA,EACrD;AAAA,EACA,eAAe,GAAGA,IAAG;AACnB,WAAO,KAAK,OAAO,KAAK,UAAU,CAAC,IAAIA,KAAI,IAAI;AAAA,EACjD;AAAA,EACA,kBAAkB,GAAG;AACnB,WAAO,KAAK,OAAO,KAAK,MAAM,IAAI,KAAK,UAAU,CAAC,CAAC,IAAI;AAAA,EACzD;AAAA,EACA,uBAAuB,GAAG;AACxB,WAAO,IAAI,KAAK,UAAU,CAAC,IAAI,KAAK,MAAM,CAAC;AAAA,EAC7C;AAAA,EACA,sBAAsB,GAAG;AACvB,WAAO,IAAI,KAAK,UAAU,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;AAAA,EAChE;AAAA,EACA,cAAc,GAAG;AACf,YAAQ,IAAI,KAAK,OAAO,CAAC,KAAK,KAAK,KAAK,CAAC;AAAA,EAC3C;AAAA,EACA,cAAc,GAAG;AACf,WAAO,KAAK,OAAO,CAAC,IAAI,IAAI,KAAK,KAAK,CAAC;AAAA,EACzC;AAAA,EACA,WAAW,GAAG;AACZ,YAAQ,KAAK,OAAO,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC;AAAA,EAC3C;AAAA,EACA,WAAW,GAAG;AACZ,WAAO,KAAK,OAAO,CAAC,IAAI,IAAI,KAAK,KAAK,CAAC;AAAA,EACzC;AAAA,EACA,cAAc,GAAGA,IAAGC,KAAI,OAAI;AAC1B,IAAAG,GAAE,IAAIJ,EAAC;AACP,UAAMG,KAAIF,KAAIG,GAAE,MAAM,KAAK,eAAeA,GAAE,KAAKA,GAAE,KAAK,GACtDG,KAAIH,GAAE;AACR,WAAOF,GAAE,GAAG,KAAK,cAAcC,EAAC,GAAG,KAAK,WAAWI,KAAI,CAAC,GAAG,KAAK,cAAcJ,KAAI,CAAC,GAAG,KAAK,WAAWI,EAAC,CAAC,GAAG;AAAA,EAC7G;AAAA,EACA,cAAc,GAAGP,IAAGC,KAAI,OAAI;AAC1B,IAAAG,GAAE,IAAIJ,EAAC;AACP,UAAME,KAAID,KAAIG,GAAE,MAAM,KAAK,eAAeA,GAAE,KAAKA,GAAE,KAAK;AACxD,WAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,GAAG,KAAK,cAAcF,EAAC,GAAG,KAAK,WAAWE,GAAE,GAAG,CAAC,KAAK,EAAE,IAAI,KAAK,cAAcF,EAAC,GAAG,EAAE,IAAI,KAAK,WAAWE,GAAE,GAAG,IAAI;AAAA,EAC/I;AACF;;;ACrEA,IAAMI,KAAN,MAAQ;AAAA,EACN,cAAc;AACZ,SAAK,QAAQ,CAAC;AAAA,EAChB;AAAA,EACA,QAAQC,IAAG;AACT,SAAK,UAAUA;AAAA,EACjB;AAAA,EACA,UAAU;AACR,SAAK,UAAU,MAAM,KAAK,MAAM,SAAS;AAAA,EAC3C;AAAA,EACA,CAAC,OAAO;AACN,UAAMA,KAAI,KAAK;AACf,eAAW;AAAA,MACT,KAAKD;AAAA,MACL,SAASE;AAAA,MACT,OAAOC;AAAA,IACT,KAAK,KAAK,MAAO,UAAS,IAAID,IAAG,KAAKC,IAAG,KAAK;AAC5C,YAAMD,KAAID,GAAE,kBAAkB,CAAC;AAC/B,YAAM,IAAIC,GAAED,GAAE,OAAOD,IAAGC,GAAE,aAAa,CAAC,GAAGC,EAAC;AAAA,IAC9C;AAAA,EACF;AAAA,EACA,QAAQD,IAAG,GAAG;AACZ,UAAM;AAAA,MACF,OAAOD;AAAA,MACP,SAASE;AAAA,IACX,IAAI,MACJ;AAAA,MACE,OAAOC;AAAA,IACT,IAAID;AACN,QAAI,MAAMF,GAAE,OAAQ,YAAW;AAAA,MAC7B,KAAK;AAAA,MACL,SAASI;AAAA,MACT,OAAO;AAAA,IACT,KAAKJ,GAAG,UAASA,KAAII,IAAGJ,MAAK,GAAGA,KAAK,CAAAC,GAAE,KAAK,GAAGE,IAAG,GAAGD,GAAE,aAAaF,EAAC,GAAGE,GAAE,kBAAkBF,EAAC,CAAC;AAAA,EAChG;AACF;AACAA,GAAE,OAAO,IAAI,EAAEA,EAAC;;;ACtChB,IAAMK,KAAN,MAAQ;AAAA,EACN,YAAYA,IAAGC,IAAG,GAAG;AACnB,SAAK,MAAMD,IAAG,KAAK,UAAUC,IAAG,KAAK,QAAQ;AAAA,EAC/C;AACF;;;ACCA,IAAMC,KAAI,IAAIC,GAAE,SAAS;AACzB,IAAMC,KAAN,MAAM,GAAE;AAAA,EACN,OAAO,OAAOD,IAAG,GAAG;AAClB,IAAAA,GAAE,CAAC,IAAI,EAAE,CAAC,MAAM,CAACA,IAAG,CAAC,IAAI,CAAC,GAAGA,EAAC;AAC9B,UAAM,CAACE,IAAG,CAAC,IAAIF,IACb,CAACG,IAAGJ,EAAC,IAAI,GACTK,KAAID,KAAID,IACRG,KAAIN,KAAI,GACRO,KAAI,MAAMD,KAAID,KAAIC,KAAI,GACtB,KAAK,KAAK,KAAK,CAAC,IAAI,KAAKC,IACzB,KAAK,KAAK,MAAM,CAAC,IAAI,KAAKA;AAC5B,WAAO,IAAI,GAAEJ,IAAG,KAAK,MAAM,CAAC,GAAG,KAAK,KAAKH,EAAC,GAAGO,IAAGF,KAAI,IAAI,IAAI,GAAGA,KAAI,IAAI,IAAI,GAAGA,KAAI,IAAID,KAAID,IAAGE,KAAI,IAAIF,KAAIC,EAAC;AAAA,EAC5G;AAAA,EACA,YAAYH,IAAG,GAAGE,IAAG,GAAGC,IAAGJ,IAAGE,IAAGG,IAAG;AAClC,SAAK,IAAIJ,IAAG,KAAK,OAAO,GAAG,KAAK,OAAOE,IAAG,KAAK,OAAO,GAAG,KAAK,aAAaC,IAAG,KAAK,cAAcJ,IAAG,KAAK,YAAYE,IAAG,KAAK,aAAaG;AAAA,EAC5I;AAAA,EACA,UAAU;AACR,SAAK,KAAK,KAAK;AAAA,EACjB;AAAA,EACA,aAAa;AACX,WAAO,KAAK,IAAI,KAAK,IAAI,KAAK,YAAY,KAAK,SAAS;AAAA,EAC1D;AAAA,EACA,cAAc;AACZ,WAAO,KAAK,IAAI,KAAK,IAAI,KAAK,aAAa,KAAK,UAAU;AAAA,EAC5D;AACF;AACA,IAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAAzC,IACE,IAAI;AACN,IAAM,IAAN,MAAQ;AAAA,EACN,YAAYJ,IAAGE,KAAI,MAAM,IAAIF,GAAE,KAAK,CAAC,EAAE,OAAOG,KAAIH,GAAE,KAAKA,GAAE,KAAK,SAAS,CAAC,EAAE,OAAO;AACjF,SAAK,WAAWA,IAAG,KAAK,aAAaE,IAAG,KAAK,SAAS,CAAC,GAAG,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AACvG,UAAMH,KAAIC,GAAE,KAAK,OAAO,CAAAA,OAAKA,GAAE,SAAS,KAAKA,GAAE,SAASG,EAAC;AACzD,SAAK,WAAWJ,GAAE,CAAC,EAAE,OAAO,KAAK,WAAWA,GAAEA,GAAE,SAAS,CAAC,EAAE;AAC5D,UAAME,KAAI,KAAK,YAAYF,GAAE,IAAI,CAAAQ,OAAK,EAAE,OAAOP,IAAGO,IAAGL,EAAC,CAAC;AACvD,IAAAH,GAAE,QAAQ,CAACC,IAAG,MAAM;AAClB,WAAK,aAAaA,GAAE,KAAK,IAAIC,GAAE,CAAC,GAAG,KAAK,aAAaD,GAAE,KAAK,IAAIC,GAAE,CAAC,GAAG,KAAK,OAAO,CAAC,IAAID,GAAE;AAAA,IAC3F,GAAG,IAAI,GAAG,KAAK,QAAQA,GAAE;AAAA,EAC3B;AAAA,EACA,IAAI,mBAAmB;AACrB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EACA,aAAaA,IAAG;AACd,WAAO,KAAK,aAAa,YAAY,OAAOA,KAAIA,KAAIA,GAAE,KAAK;AAAA,EAC7D;AAAA,EACA,cAAcA,IAAG,GAAGE,KAAI,OAAI;AAC1B,IAAAH,GAAE,IAAI,CAAC;AACP,UAAM,IAAI,KAAK,aAAaA,GAAE,KAAK;AACnC,WAAO,IAAI,EAAE,cAAcC,IAAGD,IAAGG,EAAC,IAAIF;AAAA,EACxC;AAAA,EACA,cAAcA,IAAG,GAAGE,KAAI,OAAI;AAC1B,IAAAH,GAAE,IAAI,CAAC;AACP,UAAM,IAAI,KAAK,aAAaA,GAAE,KAAK;AACnC,WAAO,IAAI,EAAE,cAAcC,IAAGD,IAAGG,EAAC,IAAIF;AAAA,EACxC;AAAA,EACA,gBAAgBA,IAAG,IAAI,KAAK,IAAI,MAAID,KAAI,WAAW;AACjD,QAAI,CAAC,MAAMC,GAAE,QAAQ,KAAK,YAAYA,GAAE,QAAQ,KAAK,UAAW,QAAO;AACvE,UAAMK,KAAI,cAAcN,KAAI,KAAK,uBAAuBC,GAAE,KAAK,IAAI,KAAK,wBAAwBA,GAAE,KAAK,GACrGM,KAAIH,GAAE,KAAK,QAAQE,EAAC,GACpB,IAAI,KAAK;AACX,QAAI,GACF,GACA,GACA,IAAI,IAAI,GACR,IAAI,KAAK;AACX,UAAM,IAAIC,GAAE;AACZ,MAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,IAAIN,GAAE,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,IAAIA,GAAE,KAAK,CAAC,IAAI;AAC/G,eAAWE,MAAK,EAAG,CAAAF,GAAE,MAAME,IAAGA,EAAC,GAAGA,GAAE,CAAC,IAAIG,GAAE,cAAcH,GAAE,CAAC,CAAC,GAAGA,GAAE,CAAC,IAAIG,GAAE,WAAWH,GAAE,CAAC,CAAC;AACxF,UAAM,IAAI,CAAC;AACX,QAAI,IAAI;AACR,aAASA,KAAI,GAAGA,KAAI,GAAGA,MAAK;AAC1B,UAAI,EAAEA,EAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,GAAG;AACvB,YAAIA;AACJ;AAAA,MACF;AACA,YAAMF,KAAIC,GAAE,OAAO,EAAEC,EAAC,GAAG,EAAE,CAAC,CAAC;AAC7B,UAAI,KAAK,IAAIF,GAAE,MAAM,CAAC,GAAG,IAAI,KAAK,IAAIA,GAAE,MAAM,CAAC,GAAG,WAAW,EAAEA,GAAE,IAAI,MAAM,EAAEA,GAAE,IAAI,IAAI,CAAC,IAAI,EAAEA,GAAE,IAAI,EAAE,KAAKA,EAAC,GAAG,IAAIE;AAAA,IACrH;AACA,QAAI,QAAQ,KAAK,QAAQ,KAAK,IAAI,IAAI,IAAK,QAAO;AAClD,QAAI,IAAI,CAAC;AACT,SAAK,IAAI,GAAG,IAAI,KAAI;AAClB,cAAQ,EAAE,CAAC,MAAM,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK;AAC1D,eAASF,KAAI,EAAE,SAAS,GAAGA,MAAK,GAAGA,MAAK;AACtC,cAAMQ,KAAI,EAAER,EAAC;AACb,YAAI,KAAK,IAAI,GAAGQ,GAAE,WAAW,CAAC,GAAG,IAAI,KAAK,IAAI,GAAGA,GAAE,YAAY,CAAC;AAAA,MAClE;AACA,UAAI,IAAI,KAAK,MAAM,CAAC,GAAG,IAAI,KAAK,MAAM,CAAC,GAAG,KAAKH,GAAE,MAAM,CAAC,KAAK,KAAKA,GAAE,KAAK,CAAC,EAAG,KAAI,GAAG;AAClF,YAAIA,GAAE,KAAK,CAAC,IAAIA,GAAE,UAAU,CAAC,GAAG;AAC9B,gBAAML,KAAI,KAAK,MAAM,IAAIK,GAAE,UAAU,CAAC,CAAC;AACvC,mBAASG,KAAI,KAAK,MAAM,IAAIH,GAAE,UAAU,CAAC,CAAC,GAAGG,MAAKR,IAAGQ,KAAK,GAAE,KAAK,IAAIN,GAAE,GAAG,KAAK,IAAIG,GAAE,uBAAuBG,EAAC,GAAG,CAAC,GAAG,KAAK,IAAIH,GAAE,sBAAsBG,EAAC,GAAG,CAAC,CAAC,CAAC;AAAA,QAC9J,MAAO,GAAE,KAAK,IAAIN,GAAE,GAAG,GAAG,CAAC,CAAC;AAAA,MAC9B,MAAO,KAAIG,GAAE,KAAK,CAAC,KAAK,IAAIA,GAAE,MAAM,CAAC,MAAM,IAAI,KAAK,IAAI,GAAGA,GAAE,MAAM,CAAC,CAAC,GAAG,IAAI,KAAK,IAAI,GAAGA,GAAE,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,IAAIH,GAAE,GAAG,GAAG,CAAC,CAAC;AACzH,WAAK;AACL,eAASF,KAAI,EAAE,SAAS,GAAGA,MAAK,GAAGA,MAAK;AACtC,cAAMQ,KAAI,EAAER,EAAC;AACb,QAAAQ,GAAE,QAAQ,IAAIA,GAAE,QAAQ,IAAI,EAAE,OAAOR,IAAG,CAAC;AAAA,MAC3C;AAAA,IACF;AACA,WAAOM;AAAA,EACT;AAAA,EACA,gBAAgBN,IAAG;AACjB,IAAAD,GAAE,IAAIC,EAAC;AACP,UAAM,IAAI,KAAK,aAAaD,GAAE,KAAK,GACjCG,KAAI,KAAK,UAAU,QAAQ,CAAC,IAAI;AAClC,WAAOA,KAAI,IAAI,QAAQ,KAAK,gBAAgBH,IAAG,KAAK,UAAUG,EAAC,GAAGH,EAAC,GAAGA,GAAE;AAAA,EAC1E;AAAA,EACA,kBAAkBC,IAAG;AACnB,UAAM,IAAI,KAAK,aAAa,YAAY,OAAOA,KAAIA,GAAE,QAAQA,EAAC;AAC9D,WAAO,IAAI,EAAE,aAAa;AAAA,EAC5B;AAAA,EACA,aAAaA,IAAG;AACd,UAAM,IAAI,KAAK,aAAaA,GAAE,KAAK;AACnC,WAAO,IAAI,EAAE,QAAQ;AAAA,EACvB;AAAA,EACA,WAAWA,IAAG,GAAG;AACf,IAAAD,GAAE,IAAI,CAAC;AACP,UAAMG,KAAI,KAAK,aAAaH,GAAE,KAAK,GACjC,IAAIC,GAAE;AACR,QAAI,EAAE,aAAaE,GAAE,YAAY;AAC/B,WAAK,gBAAgBH,IAAG,GAAGA,EAAC;AAC5B,YAAMS,KAAI,EAAE,eAAeT,GAAE,KAAKA,GAAE,KAAK;AACzC,iBAAWG,MAAKF,GAAE,MAAO,KAAIE,GAAE,QAAQH,GAAE,OAAOG,GAAE,WAAWM,MAAKN,GAAE,SAASM,GAAG,QAAO;AAAA,IACzF;AACA,QAAI,EAAE,aAAaN,GAAE,YAAY;AAC/B,YAAM,CAACM,IAAGL,IAAGF,IAAGG,EAAC,IAAIJ,GAAE,MAAM,OAAO,CAACA,IAAGQ,QAAOR,GAAE,CAAC,IAAI,KAAK,IAAIA,GAAE,CAAC,GAAGQ,GAAE,GAAG,GAAGR,GAAE,CAAC,IAAI,KAAK,IAAIA,GAAE,CAAC,GAAGQ,GAAE,GAAG,GAAGR,GAAE,CAAC,IAAI,KAAK,IAAIA,GAAE,CAAC,GAAGQ,GAAE,OAAO,GAAGR,GAAE,CAAC,IAAI,KAAK,IAAIA,GAAE,CAAC,GAAGQ,GAAE,KAAK,GAAGR,KAAI,CAAC,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,GAC7MK,KAAIH,GAAE,eAAeH,GAAE,KAAKA,GAAE,KAAK,GACnCO,KAAI,EAAE,cAAcJ,GAAE,cAAcG,EAAC,CAAC,GACtC,IAAI,EAAE,WAAWH,GAAE,WAAWH,GAAE,GAAG,CAAC,GACpC,IAAI,EAAE,cAAcG,GAAE,cAAcG,KAAI,CAAC,CAAC,IAAI,GAC9C,IAAI,EAAE,WAAWH,GAAE,WAAWH,GAAE,MAAM,CAAC,CAAC,IAAI;AAC9C,aAAO,EAAEO,KAAIF,MAAK,IAAIH,MAAK,IAAIE,MAAK,IAAIK;AAAA,IAC1C;AACA,UAAML,KAAI,EAAE,eAAeJ,GAAE,KAAKA,GAAE,KAAK;AACzC,WAAOC,GAAE,MAAM,KAAK,CAAAA,OAAKA,GAAE,QAAQD,GAAE,OAAOC,GAAE,WAAWG,MAAKH,GAAE,SAASG,EAAC;AAAA,EAC5E;AAAA,EACA,gBAAgB,GAAGD,IAAG,GAAG;AACvB,QAAI,EAAE,CAAC,IAAIA,GAAE,CAAC,GAAG,EAAE,CAAC,IAAIA,GAAE,CAAC,GAAG,EAAE,CAAC,IAAIA,GAAE,CAAC,GAAG,EAAE,CAAC,IAAIA,GAAE,CAAC,GAAG,KAAK,OAAO;AAClE,YAAMA,KAAI,EAAE,KAAK,SAAS,gBAAgB,GACxCC,KAAI,CAAC,KAAKD,GAAE,MAAM,CAAC,IAAIA,GAAE,MAAM,CAAC;AAClC,QAAE,CAAC,KAAKC,IAAG,EAAE,CAAC,KAAKA;AAAA,IACrB;AACA,WAAO;AAAA,EACT;AAAA,EACA,wBAAwBH,IAAG;AACzB,UAAM,IAAI,KAAK;AACf,QAAI,KAAK,aAAaA,EAAC,EAAG,QAAO,KAAK,aAAaA,EAAC;AACpD,QAAIA,KAAI,EAAE,CAAC,EAAG,QAAO,KAAK,aAAa,EAAE,CAAC,CAAC;AAC3C,aAASE,KAAI,GAAGA,KAAI,EAAE,SAAS,GAAGA,KAAK,KAAIF,KAAI,EAAEE,EAAC,IAAI,EAAG,QAAO,KAAK,aAAa,EAAEA,KAAI,CAAC,CAAC;AAC1F,WAAO,KAAK,aAAa,EAAE,EAAE,SAAS,CAAC,CAAC;AAAA,EAC1C;AAAA,EACA,uBAAuBF,IAAG;AACxB,UAAM,IAAI,KAAK;AACf,WAAO,KAAK,aAAaA,EAAC,MAAMA,KAAI,EAAE,OAAO,CAACQ,IAAGN,OAAM,KAAK,IAAIA,KAAIF,EAAC,IAAI,KAAK,IAAIQ,KAAIR,EAAC,IAAIE,KAAIM,IAAG,EAAE,CAAC,CAAC,IAAI,KAAK,aAAaR,EAAC;AAAA,EAC/H;AAAA,EACA,aAAaA,IAAG;AACd,UAAM,IAAI,KAAK;AACf,QAAI,KAAK,aAAaA,EAAC,EAAG,QAAO,KAAK,aAAaA,EAAC,EAAE;AACtD,aAASE,KAAI,EAAE,SAAS,GAAGA,MAAK,GAAGA,KAAK,KAAIF,KAAI,EAAEE,EAAC,GAAG;AACpD,UAAIA,OAAM,EAAE,SAAS,EAAG,QAAO,KAAK,aAAa,EAAE,EAAE,SAAS,CAAC,CAAC,EAAE;AAClE,aAAO,KAAK,aAAa,EAAEA,EAAC,CAAC,EAAE,SAAS,EAAEA,EAAC,IAAIF,OAAM,EAAEE,EAAC,IAAI,EAAEA,KAAI,CAAC;AAAA,IACrE;AACA,WAAO,KAAK,aAAa,EAAE,CAAC,CAAC,EAAE;AAAA,EACjC;AAAA,EACA,YAAYF,IAAG;AACb,WAAO,KAAK,SAAS,YAAYA,EAAC;AAAA,EACpC;AAAA,EACA,YAAYA,IAAG;AACb,WAAO,KAAK,SAAS,YAAYA,EAAC;AAAA,EACpC;AAAA,EACA,gBAAgBA,IAAG,GAAGE,IAAG;AACvB,UAAM,IAAI,KAAK,aAAaA,GAAE,KAAK;AACnC,WAAOF,GAAE,IAAIE,EAAC,GAAG,EAAE,aAAa,EAAE,aAAa,QAAQ,EAAE,eAAe,EAAE,eAAeF,GAAE,QAAQ,EAAE,OAAOA,GAAE,MAAM,KAAK,MAAME,GAAE,MAAM,EAAE,aAAa,EAAE,aAAa,IAAG,GAAGF,GAAE,MAAM,KAAK,MAAME,GAAE,MAAM,EAAE,aAAa,EAAE,aAAa,IAAG,IAAIF;AAAA,EAC7O;AACF;",
  "names": ["r", "o", "e", "i", "s", "h", "a", "n", "s", "o", "e", "r", "n", "o", "s", "i", "e", "n", "o", "s", "r", "a", "h", "l", "t"]
}
