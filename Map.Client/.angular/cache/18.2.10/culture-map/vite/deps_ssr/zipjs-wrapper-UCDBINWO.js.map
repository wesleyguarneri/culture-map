{
  "version": 3,
  "sources": ["../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/codecs/deflate.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/codecs/inflate.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/constants.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/stream-adapter.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/configuration.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/util/mime-type.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/codecs/crc32.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/crc32-stream.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/util/encode-text.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/codecs/sjcl.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/common-crypto.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/aes-crypto-stream.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/zip-crypto-stream.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/zip-entry-stream.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/streams/codec-stream.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/codec-worker.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/codec-pool.js", "../../../../../../node_modules/@zip.js/zip.js/lib/z-worker-inline.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/io.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/util/cp437-decode.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/util/decode-text.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/zip-entry.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/zip-reader.js", "../../../../../../node_modules/@zip.js/zip.js/lib/core/zip-writer.js", "../../../../../../node_modules/@zip.js/zip.js/lib/zip-fs.js", "../../../../../../node_modules/@zip.js/zip.js/index.js"],
  "sourcesContent": ["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n// deno-lint-ignore-file no-this-alias prefer-const\n\n// Global\n\nconst MAX_BITS = 15;\nconst D_CODES = 30;\nconst BL_CODES = 19;\nconst LENGTH_CODES = 29;\nconst LITERALS = 256;\nconst L_CODES = LITERALS + 1 + LENGTH_CODES;\nconst HEAP_SIZE = 2 * L_CODES + 1;\nconst END_BLOCK = 256;\n\n// Bit length codes must not exceed MAX_BL_BITS bits\nconst MAX_BL_BITS = 7;\n\n// repeat previous bit length 3-6 times (2 bits of repeat count)\nconst REP_3_6 = 16;\n\n// repeat a zero length 3-10 times (3 bits of repeat count)\nconst REPZ_3_10 = 17;\n\n// repeat a zero length 11-138 times (7 bits of repeat count)\nconst REPZ_11_138 = 18;\n\n// The lengths of the bit length codes are sent in order of decreasing\n// probability, to avoid transmitting the lengths for unused bit\n// length codes.\n\nconst Buf_size = 8 * 2;\n\n// JZlib version : \"1.0.2\"\nconst Z_DEFAULT_COMPRESSION = -1;\n\n// compression strategy\nconst Z_FILTERED = 1;\nconst Z_HUFFMAN_ONLY = 2;\nconst Z_DEFAULT_STRATEGY = 0;\nconst Z_NO_FLUSH = 0;\nconst Z_PARTIAL_FLUSH = 1;\nconst Z_FULL_FLUSH = 3;\nconst Z_FINISH = 4;\nconst Z_OK = 0;\nconst Z_STREAM_END = 1;\nconst Z_NEED_DICT = 2;\nconst Z_STREAM_ERROR = -2;\nconst Z_DATA_ERROR = -3;\nconst Z_BUF_ERROR = -5;\n\n// Tree\n\nfunction extractArray(array) {\n  return flatArray(array.map(([length, value]) => new Array(length).fill(value, 0, length)));\n}\nfunction flatArray(array) {\n  return array.reduce((a, b) => a.concat(Array.isArray(b) ? flatArray(b) : b), []);\n}\n\n// see definition of array dist_code below\nconst _dist_code = [0, 1, 2, 3].concat(...extractArray([[2, 4], [2, 5], [4, 6], [4, 7], [8, 8], [8, 9], [16, 10], [16, 11], [32, 12], [32, 13], [64, 14], [64, 15], [2, 0], [1, 16], [1, 17], [2, 18], [2, 19], [4, 20], [4, 21], [8, 22], [8, 23], [16, 24], [16, 25], [32, 26], [32, 27], [64, 28], [64, 29]]));\nfunction Tree() {\n  const that = this;\n\n  // dyn_tree; // the dynamic tree\n  // max_code; // largest code with non zero frequency\n  // stat_desc; // the corresponding static tree\n\n  // Compute the optimal bit lengths for a tree and update the total bit\n  // length\n  // for the current block.\n  // IN assertion: the fields freq and dad are set, heap[heap_max] and\n  // above are the tree nodes sorted by increasing frequency.\n  // OUT assertions: the field len is set to the optimal bit length, the\n  // array bl_count contains the frequencies for each bit length.\n  // The length opt_len is updated; static_len is also updated if stree is\n  // not null.\n  function gen_bitlen(s) {\n    const tree = that.dyn_tree;\n    const stree = that.stat_desc.static_tree;\n    const extra = that.stat_desc.extra_bits;\n    const base = that.stat_desc.extra_base;\n    const max_length = that.stat_desc.max_length;\n    let h; // heap index\n    let n, m; // iterate over the tree elements\n    let bits; // bit length\n    let xbits; // extra bits\n    let f; // frequency\n    let overflow = 0; // number of elements with bit length too large\n\n    for (bits = 0; bits <= MAX_BITS; bits++) s.bl_count[bits] = 0;\n\n    // In a first pass, compute the optimal bit lengths (which may\n    // overflow in the case of the bit length tree).\n    tree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\n\n    for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n      n = s.heap[h];\n      bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n      if (bits > max_length) {\n        bits = max_length;\n        overflow++;\n      }\n      tree[n * 2 + 1] = bits;\n      // We overwrite tree[n*2+1] which is no longer needed\n\n      if (n > that.max_code) continue; // not a leaf node\n\n      s.bl_count[bits]++;\n      xbits = 0;\n      if (n >= base) xbits = extra[n - base];\n      f = tree[n * 2];\n      s.opt_len += f * (bits + xbits);\n      if (stree) s.static_len += f * (stree[n * 2 + 1] + xbits);\n    }\n    if (overflow === 0) return;\n\n    // This happens for example on obj2 and pic of the Calgary corpus\n    // Find the first bit length which could increase:\n    do {\n      bits = max_length - 1;\n      while (s.bl_count[bits] === 0) bits--;\n      s.bl_count[bits]--; // move one leaf down the tree\n      s.bl_count[bits + 1] += 2; // move one overflow item as its brother\n      s.bl_count[max_length]--;\n      // The brother of the overflow item also moves one step up,\n      // but this does not affect bl_count[max_length]\n      overflow -= 2;\n    } while (overflow > 0);\n    for (bits = max_length; bits !== 0; bits--) {\n      n = s.bl_count[bits];\n      while (n !== 0) {\n        m = s.heap[--h];\n        if (m > that.max_code) continue;\n        if (tree[m * 2 + 1] != bits) {\n          s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n          tree[m * 2 + 1] = bits;\n        }\n        n--;\n      }\n    }\n  }\n\n  // Reverse the first len bits of a code, using straightforward code (a\n  // faster\n  // method would use a table)\n  // IN assertion: 1 <= len <= 15\n  function bi_reverse(code,\n  // the value to invert\n  len // its bit length\n  ) {\n    let res = 0;\n    do {\n      res |= code & 1;\n      code >>>= 1;\n      res <<= 1;\n    } while (--len > 0);\n    return res >>> 1;\n  }\n\n  // Generate the codes for a given tree and bit counts (which need not be\n  // optimal).\n  // IN assertion: the array bl_count contains the bit length statistics for\n  // the given tree and the field len is set for all tree elements.\n  // OUT assertion: the field code is set for all tree elements of non\n  // zero code length.\n  function gen_codes(tree,\n  // the tree to decorate\n  max_code,\n  // largest code with non zero frequency\n  bl_count // number of codes at each bit length\n  ) {\n    const next_code = []; // next code value for each\n    // bit length\n    let code = 0; // running code value\n    let bits; // bit index\n    let n; // code index\n    let len;\n\n    // The distribution counts are first used to generate the code values\n    // without bit reversal.\n    for (bits = 1; bits <= MAX_BITS; bits++) {\n      next_code[bits] = code = code + bl_count[bits - 1] << 1;\n    }\n\n    // Check that the bit counts in bl_count are consistent. The last code\n    // must be all ones.\n    // Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n    // \"inconsistent bit counts\");\n    // Tracev((stderr,\"gen_codes: max_code %d \", max_code));\n\n    for (n = 0; n <= max_code; n++) {\n      len = tree[n * 2 + 1];\n      if (len === 0) continue;\n      // Now reverse the bits\n      tree[n * 2] = bi_reverse(next_code[len]++, len);\n    }\n  }\n\n  // Construct one Huffman tree and assigns the code bit strings and lengths.\n  // Update the total bit length for the current block.\n  // IN assertion: the field freq is set for all tree elements.\n  // OUT assertions: the fields len and code are set to the optimal bit length\n  // and corresponding code. The length opt_len is updated; static_len is\n  // also updated if stree is not null. The field max_code is set.\n  that.build_tree = function (s) {\n    const tree = that.dyn_tree;\n    const stree = that.stat_desc.static_tree;\n    const elems = that.stat_desc.elems;\n    let n, m; // iterate over heap elements\n    let max_code = -1; // largest code with non zero frequency\n    let node; // new node being created\n\n    // Construct the initial heap, with least frequent element in\n    // heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n    // heap[0] is not used.\n    s.heap_len = 0;\n    s.heap_max = HEAP_SIZE;\n    for (n = 0; n < elems; n++) {\n      if (tree[n * 2] !== 0) {\n        s.heap[++s.heap_len] = max_code = n;\n        s.depth[n] = 0;\n      } else {\n        tree[n * 2 + 1] = 0;\n      }\n    }\n\n    // The pkzip format requires that at least one distance code exists,\n    // and that at least one bit should be sent even if there is only one\n    // possible code. So to avoid special checks later on we force at least\n    // two codes of non zero frequency.\n    while (s.heap_len < 2) {\n      node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n      tree[node * 2] = 1;\n      s.depth[node] = 0;\n      s.opt_len--;\n      if (stree) s.static_len -= stree[node * 2 + 1];\n      // node is 0 or 1 so it does not have extra bits\n    }\n    that.max_code = max_code;\n\n    // The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n    // establish sub-heaps of increasing lengths:\n\n    for (n = Math.floor(s.heap_len / 2); n >= 1; n--) s.pqdownheap(tree, n);\n\n    // Construct the Huffman tree by repeatedly combining the least two\n    // frequent nodes.\n\n    node = elems; // next internal node of the tree\n    do {\n      // n = node of least frequency\n      n = s.heap[1];\n      s.heap[1] = s.heap[s.heap_len--];\n      s.pqdownheap(tree, 1);\n      m = s.heap[1]; // m = node of next least frequency\n\n      s.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\n      s.heap[--s.heap_max] = m;\n\n      // Create a new node father of n and m\n      tree[node * 2] = tree[n * 2] + tree[m * 2];\n      s.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\n      tree[n * 2 + 1] = tree[m * 2 + 1] = node;\n\n      // and insert the new node in the heap\n      s.heap[1] = node++;\n      s.pqdownheap(tree, 1);\n    } while (s.heap_len >= 2);\n    s.heap[--s.heap_max] = s.heap[1];\n\n    // At this point, the fields freq and dad are set. We can now\n    // generate the bit lengths.\n\n    gen_bitlen(s);\n\n    // The field len is now set, we can generate the bit codes\n    gen_codes(tree, that.max_code, s.bl_count);\n  };\n}\nTree._length_code = [0, 1, 2, 3, 4, 5, 6, 7].concat(...extractArray([[2, 8], [2, 9], [2, 10], [2, 11], [4, 12], [4, 13], [4, 14], [4, 15], [8, 16], [8, 17], [8, 18], [8, 19], [16, 20], [16, 21], [16, 22], [16, 23], [32, 24], [32, 25], [32, 26], [31, 27], [1, 28]]));\nTree.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0];\nTree.base_dist = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576];\n\n// Mapping from a distance to a distance code. dist is the distance - 1 and\n// must not have side effects. _dist_code[256] and _dist_code[257] are never\n// used.\nTree.d_code = function (dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n// extra bits for each length code\nTree.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];\n\n// extra bits for each distance code\nTree.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\n\n// extra bits for each bit length code\nTree.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\nTree.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\n// StaticTree\n\nfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\n  const that = this;\n  that.static_tree = static_tree;\n  that.extra_bits = extra_bits;\n  that.extra_base = extra_base;\n  that.elems = elems;\n  that.max_length = max_length;\n}\nconst static_ltree2_first_part = [12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 19, 275, 147, 403, 83, 339, 211, 467, 51, 307, 179, 435, 115, 371, 243, 499, 11, 267, 139, 395, 75, 331, 203, 459, 43, 299, 171, 427, 107, 363, 235, 491, 27, 283, 155, 411, 91, 347, 219, 475, 59, 315, 187, 443, 123, 379, 251, 507, 7, 263, 135, 391, 71, 327, 199, 455, 39, 295, 167, 423, 103, 359, 231, 487, 23, 279, 151, 407, 87, 343, 215, 471, 55, 311, 183, 439, 119, 375, 247, 503, 15, 271, 143, 399, 79, 335, 207, 463, 47, 303, 175, 431, 111, 367, 239, 495, 31, 287, 159, 415, 95, 351, 223, 479, 63, 319, 191, 447, 127, 383, 255, 511, 0, 64, 32, 96, 16, 80, 48, 112, 8, 72, 40, 104, 24, 88, 56, 120, 4, 68, 36, 100, 20, 84, 52, 116, 3, 131, 67, 195, 35, 163, 99, 227];\nconst static_ltree2_second_part = extractArray([[144, 8], [112, 9], [24, 7], [8, 8]]);\nStaticTree.static_ltree = flatArray(static_ltree2_first_part.map((value, index) => [value, static_ltree2_second_part[index]]));\nconst static_dtree_first_part = [0, 16, 8, 24, 4, 20, 12, 28, 2, 18, 10, 26, 6, 22, 14, 30, 1, 17, 9, 25, 5, 21, 13, 29, 3, 19, 11, 27, 7, 23];\nconst static_dtree_second_part = extractArray([[30, 5]]);\nStaticTree.static_dtree = flatArray(static_dtree_first_part.map((value, index) => [value, static_dtree_second_part[index]]));\nStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\nStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\nStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n\n// Deflate\n\nconst MAX_MEM_LEVEL = 9;\nconst DEF_MEM_LEVEL = 8;\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  const that = this;\n  that.good_length = good_length;\n  that.max_lazy = max_lazy;\n  that.nice_length = nice_length;\n  that.max_chain = max_chain;\n  that.func = func;\n}\nconst STORED = 0;\nconst FAST = 1;\nconst SLOW = 2;\nconst config_table = [new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST), new Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW), new Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW)];\nconst z_errmsg = [\"need dictionary\",\n// Z_NEED_DICT\n// 2\n\"stream end\",\n// Z_STREAM_END 1\n\"\",\n// Z_OK 0\n\"\",\n// Z_ERRNO (-1)\n\"stream error\",\n// Z_STREAM_ERROR (-2)\n\"data error\",\n// Z_DATA_ERROR (-3)\n\"\",\n// Z_MEM_ERROR (-4)\n\"buffer error\",\n// Z_BUF_ERROR (-5)\n\"\",\n// Z_VERSION_ERROR (-6)\n\"\"];\n\n// block not completed, need more input or more output\nconst NeedMore = 0;\n\n// block flush performed\nconst BlockDone = 1;\n\n// finish started, need only more output at next deflate\nconst FinishStarted = 2;\n\n// finish done, accept no more input or output\nconst FinishDone = 3;\n\n// preset dictionary flag in zlib header\nconst PRESET_DICT = 0x20;\nconst INIT_STATE = 42;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\n// The deflate compression method\nconst Z_DEFLATED = 8;\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES = 2;\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;\nfunction smaller(tree, n, m, depth) {\n  const tn2 = tree[n * 2];\n  const tm2 = tree[m * 2];\n  return tn2 < tm2 || tn2 == tm2 && depth[n] <= depth[m];\n}\nfunction Deflate() {\n  const that = this;\n  let strm; // pointer back to this zlib stream\n  let status; // as the name implies\n  // pending_buf; // output still pending\n  let pending_buf_size; // size of pending_buf\n  // pending_out; // next pending byte to output to the stream\n  // pending; // nb of bytes in the pending buffer\n\n  // dist_buf; // buffer for distances\n  // lc_buf; // buffer for literals or lengths\n  // To simplify the code, dist_buf and lc_buf have the same number of elements.\n  // To use different lengths, an extra flag array would be necessary.\n\n  let last_flush; // value of flush param for previous deflate call\n\n  let w_size; // LZ77 win size (32K by default)\n  let w_bits; // log2(w_size) (8..16)\n  let w_mask; // w_size - 1\n\n  let win;\n  // Sliding win. Input bytes are read into the second half of the win,\n  // and move to the first half later to keep a dictionary of at least wSize\n  // bytes. With this organization, matches are limited to a distance of\n  // wSize-MAX_MATCH bytes, but this ensures that IO is always\n  // performed with a length multiple of the block size. Also, it limits\n  // the win size to 64K, which is quite useful on MSDOS.\n  // To do: use the user input buffer as sliding win.\n\n  let window_size;\n  // Actual size of win: 2*wSize, except when the user input buffer\n  // is directly used as sliding win.\n\n  let prev;\n  // Link to older string with same hash index. To limit the size of this\n  // array to 64K, this link is maintained only for the last 32K strings.\n  // An index in this array is thus a win index modulo 32K.\n\n  let head; // Heads of the hash chains or NIL.\n\n  let ins_h; // hash index of string to be inserted\n  let hash_size; // number of elements in hash table\n  let hash_bits; // log2(hash_size)\n  let hash_mask; // hash_size-1\n\n  // Number of bits by which ins_h must be shifted at each input\n  // step. It must be such that after MIN_MATCH steps, the oldest\n  // byte no longer takes part in the hash key, that is:\n  // hash_shift * MIN_MATCH >= hash_bits\n  let hash_shift;\n\n  // Window position at the beginning of the current output block. Gets\n  // negative when the win is moved backwards.\n\n  let block_start;\n  let match_length; // length of best match\n  let prev_match; // previous match\n  let match_available; // set if previous match exists\n  let strstart; // start of string to insert\n  let match_start; // start of matching string\n  let lookahead; // number of valid bytes ahead in win\n\n  // Length of the best match at previous step. Matches not greater than this\n  // are discarded. This is used in the lazy match evaluation.\n  let prev_length;\n\n  // To speed up deflation, hash chains are never searched beyond this\n  // length. A higher limit improves compression ratio but degrades the speed.\n  let max_chain_length;\n\n  // Attempt to find a better match only when the current match is strictly\n  // smaller than this value. This mechanism is used only for compression\n  // levels >= 4.\n  let max_lazy_match;\n\n  // Insert new strings in the hash table only if the match length is not\n  // greater than this length. This saves time but degrades compression.\n  // max_insert_length is used only for compression levels <= 3.\n\n  let level; // compression level (1..9)\n  let strategy; // favor or force Huffman coding\n\n  // Use a faster search when the previous match is longer than this\n  let good_match;\n\n  // Stop searching when current match exceeds this\n  let nice_match;\n  let dyn_ltree; // literal and length tree\n  let dyn_dtree; // distance tree\n  let bl_tree; // Huffman tree for bit lengths\n\n  const l_desc = new Tree(); // desc for literal tree\n  const d_desc = new Tree(); // desc for distance tree\n  const bl_desc = new Tree(); // desc for bit length tree\n\n  // that.heap_len; // number of elements in the heap\n  // that.heap_max; // element of largest frequency\n  // The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n  // The same heap array is used to build all trees.\n\n  // Depth of each subtree used as tie breaker for trees of equal frequency\n  that.depth = [];\n\n  // Size of match buffer for literals/lengths. There are 4 reasons for\n  // limiting lit_bufsize to 64K:\n  // - frequencies can be kept in 16 bit counters\n  // - if compression is not successful for the first block, all input\n  // data is still in the win so we can still emit a stored block even\n  // when input comes from standard input. (This can also be done for\n  // all blocks if lit_bufsize is not greater than 32K.)\n  // - if compression is not successful for a file smaller than 64K, we can\n  // even emit a stored file instead of a stored block (saving 5 bytes).\n  // This is applicable only for zip (not gzip or zlib).\n  // - creating new Huffman trees less frequently may not provide fast\n  // adaptation to changes in the input data statistics. (Take for\n  // example a binary file with poorly compressible code followed by\n  // a highly compressible string table.) Smaller buffer sizes give\n  // fast adaptation but have of course the overhead of transmitting\n  // trees more frequently.\n  // - I can't count above 4\n  let lit_bufsize;\n  let last_lit; // running index in dist_buf and lc_buf\n\n  // that.opt_len; // bit length of current block with optimal trees\n  // that.static_len; // bit length of current block with static trees\n  let matches; // number of string matches in current block\n  let last_eob_len; // bit length of EOB code for last block\n\n  // Output buffer. bits are inserted starting at the bottom (least\n  // significant bits).\n  let bi_buf;\n\n  // Number of valid bits in bi_buf. All bits above the last valid bit\n  // are always zero.\n  let bi_valid;\n\n  // number of codes at each bit length for an optimal tree\n  that.bl_count = [];\n\n  // heap used to build the Huffman trees\n  that.heap = [];\n  dyn_ltree = [];\n  dyn_dtree = [];\n  bl_tree = [];\n  function lm_init() {\n    window_size = 2 * w_size;\n    head[hash_size - 1] = 0;\n    for (let i = 0; i < hash_size - 1; i++) {\n      head[i] = 0;\n    }\n\n    // Set the default configuration parameters:\n    max_lazy_match = config_table[level].max_lazy;\n    good_match = config_table[level].good_length;\n    nice_match = config_table[level].nice_length;\n    max_chain_length = config_table[level].max_chain;\n    strstart = 0;\n    block_start = 0;\n    lookahead = 0;\n    match_length = prev_length = MIN_MATCH - 1;\n    match_available = 0;\n    ins_h = 0;\n  }\n  function init_block() {\n    let i;\n    // Initialize the trees.\n    for (i = 0; i < L_CODES; i++) dyn_ltree[i * 2] = 0;\n    for (i = 0; i < D_CODES; i++) dyn_dtree[i * 2] = 0;\n    for (i = 0; i < BL_CODES; i++) bl_tree[i * 2] = 0;\n    dyn_ltree[END_BLOCK * 2] = 1;\n    that.opt_len = that.static_len = 0;\n    last_lit = matches = 0;\n  }\n\n  // Initialize the tree data structures for a new zlib stream.\n  function tr_init() {\n    l_desc.dyn_tree = dyn_ltree;\n    l_desc.stat_desc = StaticTree.static_l_desc;\n    d_desc.dyn_tree = dyn_dtree;\n    d_desc.stat_desc = StaticTree.static_d_desc;\n    bl_desc.dyn_tree = bl_tree;\n    bl_desc.stat_desc = StaticTree.static_bl_desc;\n    bi_buf = 0;\n    bi_valid = 0;\n    last_eob_len = 8; // enough lookahead for inflate\n\n    // Initialize the first block of the first file:\n    init_block();\n  }\n\n  // Restore the heap property by moving down the tree starting at node k,\n  // exchanging a node with the smallest of its two sons if necessary,\n  // stopping\n  // when the heap property is re-established (each father smaller than its\n  // two sons).\n  that.pqdownheap = function (tree,\n  // the tree to restore\n  k // node to move down\n  ) {\n    const heap = that.heap;\n    const v = heap[k];\n    let j = k << 1; // left son of k\n    while (j <= that.heap_len) {\n      // Set j to the smallest of the two sons:\n      if (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\n        j++;\n      }\n      // Exit if v is smaller than both sons\n      if (smaller(tree, v, heap[j], that.depth)) break;\n\n      // Exchange v with the smallest son\n      heap[k] = heap[j];\n      k = j;\n      // And continue down the tree, setting j to the left son of k\n      j <<= 1;\n    }\n    heap[k] = v;\n  };\n\n  // Scan a literal or distance tree to determine the frequencies of the codes\n  // in the bit length tree.\n  function scan_tree(tree,\n  // the tree to be scanned\n  max_code // and its largest code of non zero frequency\n  ) {\n    let prevlen = -1; // last emitted length\n    let curlen; // length of current code\n    let nextlen = tree[0 * 2 + 1]; // length of next code\n    let count = 0; // repeat count of the current code\n    let max_count = 7; // max repeat count\n    let min_count = 4; // min repeat count\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n    }\n    tree[(max_code + 1) * 2 + 1] = 0xffff; // guard\n\n    for (let n = 0; n <= max_code; n++) {\n      curlen = nextlen;\n      nextlen = tree[(n + 1) * 2 + 1];\n      if (++count < max_count && curlen == nextlen) {\n        continue;\n      } else if (count < min_count) {\n        bl_tree[curlen * 2] += count;\n      } else if (curlen !== 0) {\n        if (curlen != prevlen) bl_tree[curlen * 2]++;\n        bl_tree[REP_3_6 * 2]++;\n      } else if (count <= 10) {\n        bl_tree[REPZ_3_10 * 2]++;\n      } else {\n        bl_tree[REPZ_11_138 * 2]++;\n      }\n      count = 0;\n      prevlen = curlen;\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      } else if (curlen == nextlen) {\n        max_count = 6;\n        min_count = 3;\n      } else {\n        max_count = 7;\n        min_count = 4;\n      }\n    }\n  }\n\n  // Construct the Huffman tree for the bit lengths and return the index in\n  // bl_order of the last bit length code to send.\n  function build_bl_tree() {\n    let max_blindex; // index of last bit length code of non zero freq\n\n    // Determine the bit length frequencies for literal and distance trees\n    scan_tree(dyn_ltree, l_desc.max_code);\n    scan_tree(dyn_dtree, d_desc.max_code);\n\n    // Build the bit length tree:\n    bl_desc.build_tree(that);\n    // opt_len now includes the length of the tree representations, except\n    // the lengths of the bit lengths codes and the 5+5+4 bits for the\n    // counts.\n\n    // Determine the number of bit length codes to send. The pkzip format\n    // requires that at least 4 bit length codes be sent. (appnote.txt says\n    // 3 but the actual value used is 4.)\n    for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n      if (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0) break;\n    }\n    // Update opt_len to include the bit length tree and counts\n    that.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n    return max_blindex;\n  }\n\n  // Output a byte on the stream.\n  // IN assertion: there is enough room in pending_buf.\n  function put_byte(p) {\n    that.pending_buf[that.pending++] = p;\n  }\n  function put_short(w) {\n    put_byte(w & 0xff);\n    put_byte(w >>> 8 & 0xff);\n  }\n  function putShortMSB(b) {\n    put_byte(b >> 8 & 0xff);\n    put_byte(b & 0xff & 0xff);\n  }\n  function send_bits(value, length) {\n    let val;\n    const len = length;\n    if (bi_valid > Buf_size - len) {\n      val = value;\n      // bi_buf |= (val << bi_valid);\n      bi_buf |= val << bi_valid & 0xffff;\n      put_short(bi_buf);\n      bi_buf = val >>> Buf_size - bi_valid;\n      bi_valid += len - Buf_size;\n    } else {\n      // bi_buf |= (value) << bi_valid;\n      bi_buf |= value << bi_valid & 0xffff;\n      bi_valid += len;\n    }\n  }\n  function send_code(c, tree) {\n    const c2 = c * 2;\n    send_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\n  }\n\n  // Send a literal or distance tree in compressed form, using the codes in\n  // bl_tree.\n  function send_tree(tree,\n  // the tree to be sent\n  max_code // and its largest code of non zero frequency\n  ) {\n    let n; // iterates over all tree elements\n    let prevlen = -1; // last emitted length\n    let curlen; // length of current code\n    let nextlen = tree[0 * 2 + 1]; // length of next code\n    let count = 0; // repeat count of the current code\n    let max_count = 7; // max repeat count\n    let min_count = 4; // min repeat count\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n    }\n    for (n = 0; n <= max_code; n++) {\n      curlen = nextlen;\n      nextlen = tree[(n + 1) * 2 + 1];\n      if (++count < max_count && curlen == nextlen) {\n        continue;\n      } else if (count < min_count) {\n        do {\n          send_code(curlen, bl_tree);\n        } while (--count !== 0);\n      } else if (curlen !== 0) {\n        if (curlen != prevlen) {\n          send_code(curlen, bl_tree);\n          count--;\n        }\n        send_code(REP_3_6, bl_tree);\n        send_bits(count - 3, 2);\n      } else if (count <= 10) {\n        send_code(REPZ_3_10, bl_tree);\n        send_bits(count - 3, 3);\n      } else {\n        send_code(REPZ_11_138, bl_tree);\n        send_bits(count - 11, 7);\n      }\n      count = 0;\n      prevlen = curlen;\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      } else if (curlen == nextlen) {\n        max_count = 6;\n        min_count = 3;\n      } else {\n        max_count = 7;\n        min_count = 4;\n      }\n    }\n  }\n\n  // Send the header for a block using dynamic Huffman trees: the counts, the\n  // lengths of the bit length codes, the literal tree and the distance tree.\n  // IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n  function send_all_trees(lcodes, dcodes, blcodes) {\n    let rank; // index in bl_order\n\n    send_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n    send_bits(dcodes - 1, 5);\n    send_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n    for (rank = 0; rank < blcodes; rank++) {\n      send_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\n    }\n    send_tree(dyn_ltree, lcodes - 1); // literal tree\n    send_tree(dyn_dtree, dcodes - 1); // distance tree\n  }\n\n  // Flush the bit buffer, keeping at most 7 bits in it.\n  function bi_flush() {\n    if (bi_valid == 16) {\n      put_short(bi_buf);\n      bi_buf = 0;\n      bi_valid = 0;\n    } else if (bi_valid >= 8) {\n      put_byte(bi_buf & 0xff);\n      bi_buf >>>= 8;\n      bi_valid -= 8;\n    }\n  }\n\n  // Send one empty static block to give enough lookahead for inflate.\n  // This takes 10 bits, of which 7 may remain in the bit buffer.\n  // The current inflate code requires 9 bits of lookahead. If the\n  // last two codes for the previous block (real code plus EOB) were coded\n  // on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\n  // the last real code. In this case we send two empty static blocks instead\n  // of one. (There are no problems if the previous block is stored or fixed.)\n  // To simplify the code, we assume the worst case of last real code encoded\n  // on one bit only.\n  function _tr_align() {\n    send_bits(STATIC_TREES << 1, 3);\n    send_code(END_BLOCK, StaticTree.static_ltree);\n    bi_flush();\n\n    // Of the 10 bits for the empty block, we have already sent\n    // (10 - bi_valid) bits. The lookahead for the last real code (before\n    // the EOB of the previous block) was thus at least one plus the length\n    // of the EOB plus what we have just sent of the empty static block.\n    if (1 + last_eob_len + 10 - bi_valid < 9) {\n      send_bits(STATIC_TREES << 1, 3);\n      send_code(END_BLOCK, StaticTree.static_ltree);\n      bi_flush();\n    }\n    last_eob_len = 7;\n  }\n\n  // Save the match info and tally the frequency counts. Return true if\n  // the current block must be flushed.\n  function _tr_tally(dist,\n  // distance of matched string\n  lc // match length-MIN_MATCH or unmatched char (if dist==0)\n  ) {\n    let out_length, in_length, dcode;\n    that.dist_buf[last_lit] = dist;\n    that.lc_buf[last_lit] = lc & 0xff;\n    last_lit++;\n    if (dist === 0) {\n      // lc is the unmatched char\n      dyn_ltree[lc * 2]++;\n    } else {\n      matches++;\n      // Here, lc is the match length - MIN_MATCH\n      dist--; // dist = match distance - 1\n      dyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\n      dyn_dtree[Tree.d_code(dist) * 2]++;\n    }\n    if ((last_lit & 0x1fff) === 0 && level > 2) {\n      // Compute an upper bound for the compressed length\n      out_length = last_lit * 8;\n      in_length = strstart - block_start;\n      for (dcode = 0; dcode < D_CODES; dcode++) {\n        out_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\n      }\n      out_length >>>= 3;\n      if (matches < Math.floor(last_lit / 2) && out_length < Math.floor(in_length / 2)) return true;\n    }\n    return last_lit == lit_bufsize - 1;\n    // We avoid equality with lit_bufsize because of wraparound at 64K\n    // on 16 bit machines and because stored blocks are restricted to\n    // 64K-1 bytes.\n  }\n\n  // Send the block data compressed using the given Huffman trees\n  function compress_block(ltree, dtree) {\n    let dist; // distance of matched string\n    let lc; // match length or unmatched char (if dist === 0)\n    let lx = 0; // running index in dist_buf and lc_buf\n    let code; // the code to send\n    let extra; // number of extra bits to send\n\n    if (last_lit !== 0) {\n      do {\n        dist = that.dist_buf[lx];\n        lc = that.lc_buf[lx];\n        lx++;\n        if (dist === 0) {\n          send_code(lc, ltree); // send a literal byte\n        } else {\n          // Here, lc is the match length - MIN_MATCH\n          code = Tree._length_code[lc];\n          send_code(code + LITERALS + 1, ltree); // send the length\n          // code\n          extra = Tree.extra_lbits[code];\n          if (extra !== 0) {\n            lc -= Tree.base_length[code];\n            send_bits(lc, extra); // send the extra length bits\n          }\n          dist--; // dist is now the match distance - 1\n          code = Tree.d_code(dist);\n          send_code(code, dtree); // send the distance code\n          extra = Tree.extra_dbits[code];\n          if (extra !== 0) {\n            dist -= Tree.base_dist[code];\n            send_bits(dist, extra); // send the extra distance bits\n          }\n        } // literal or match pair ?\n      } while (lx < last_lit);\n    }\n    send_code(END_BLOCK, ltree);\n    last_eob_len = ltree[END_BLOCK * 2 + 1];\n  }\n\n  // Flush the bit buffer and align the output on a byte boundary\n  function bi_windup() {\n    if (bi_valid > 8) {\n      put_short(bi_buf);\n    } else if (bi_valid > 0) {\n      put_byte(bi_buf & 0xff);\n    }\n    bi_buf = 0;\n    bi_valid = 0;\n  }\n\n  // Copy a stored block, storing first the length and its\n  // one's complement if requested.\n  function copy_block(buf,\n  // the input data\n  len,\n  // its length\n  header // true if block header must be written\n  ) {\n    bi_windup(); // align on byte boundary\n    last_eob_len = 8; // enough lookahead for inflate\n\n    if (header) {\n      put_short(len);\n      put_short(~len);\n    }\n    that.pending_buf.set(win.subarray(buf, buf + len), that.pending);\n    that.pending += len;\n  }\n\n  // Send a stored block\n  function _tr_stored_block(buf,\n  // input block\n  stored_len,\n  // length of input block\n  eof // true if this is the last block for a file\n  ) {\n    send_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\n    copy_block(buf, stored_len, true); // with header\n  }\n\n  // Determine the best encoding for the current block: dynamic trees, static\n  // trees or store, and output the encoded block to the zip file.\n  function _tr_flush_block(buf,\n  // input block, or NULL if too old\n  stored_len,\n  // length of input block\n  eof // true if this is the last block for a file\n  ) {\n    let opt_lenb, static_lenb; // opt_len and static_len in bytes\n    let max_blindex = 0; // index of last bit length code of non zero freq\n\n    // Build the Huffman trees unless a stored block is forced\n    if (level > 0) {\n      // Construct the literal and distance trees\n      l_desc.build_tree(that);\n      d_desc.build_tree(that);\n\n      // At this point, opt_len and static_len are the total bit lengths\n      // of\n      // the compressed block data, excluding the tree representations.\n\n      // Build the bit length tree for the above two trees, and get the\n      // index\n      // in bl_order of the last bit length code to send.\n      max_blindex = build_bl_tree();\n\n      // Determine the best encoding. Compute first the block length in\n      // bytes\n      opt_lenb = that.opt_len + 3 + 7 >>> 3;\n      static_lenb = that.static_len + 3 + 7 >>> 3;\n      if (static_lenb <= opt_lenb) opt_lenb = static_lenb;\n    } else {\n      opt_lenb = static_lenb = stored_len + 5; // force a stored block\n    }\n    if (stored_len + 4 <= opt_lenb && buf != -1) {\n      // 4: two words for the lengths\n      // The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n      // Otherwise we can't have processed more than WSIZE input bytes\n      // since\n      // the last block flush, because compression would have been\n      // successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n      // transform a block into a stored block.\n      _tr_stored_block(buf, stored_len, eof);\n    } else if (static_lenb == opt_lenb) {\n      send_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\n      compress_block(StaticTree.static_ltree, StaticTree.static_dtree);\n    } else {\n      send_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\n      send_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n      compress_block(dyn_ltree, dyn_dtree);\n    }\n\n    // The above check is made mod 2^32, for files larger than 512 MB\n    // and uLong implemented on 32 bits.\n\n    init_block();\n    if (eof) {\n      bi_windup();\n    }\n  }\n  function flush_block_only(eof) {\n    _tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\n    block_start = strstart;\n    strm.flush_pending();\n  }\n\n  // Fill the win when the lookahead becomes insufficient.\n  // Updates strstart and lookahead.\n  //\n  // IN assertion: lookahead < MIN_LOOKAHEAD\n  // OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n  // At least one byte has been read, or avail_in === 0; reads are\n  // performed for at least two bytes (required for the zip translate_eol\n  // option -- not supported here).\n  function fill_window() {\n    let n, m;\n    let p;\n    let more; // Amount of free space at the end of the win.\n\n    do {\n      more = window_size - lookahead - strstart;\n\n      // Deal with !@#$% 64K limit:\n      if (more === 0 && strstart === 0 && lookahead === 0) {\n        more = w_size;\n      } else if (more == -1) {\n        // Very unlikely, but possible on 16 bit machine if strstart ==\n        // 0\n        // and lookahead == 1 (input done one byte at time)\n        more--;\n\n        // If the win is almost full and there is insufficient\n        // lookahead,\n        // move the upper half to the lower one to make room in the\n        // upper half.\n      } else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\n        win.set(win.subarray(w_size, w_size + w_size), 0);\n        match_start -= w_size;\n        strstart -= w_size; // we now have strstart >= MAX_DIST\n        block_start -= w_size;\n\n        // Slide the hash table (could be avoided with 32 bit values\n        // at the expense of memory usage). We slide even when level ==\n        // 0\n        // to keep the hash table consistent if we switch back to level\n        // > 0\n        // later. (Using level 0 permanently is not an optimal usage of\n        // zlib, so we don't care about this pathological case.)\n\n        n = hash_size;\n        p = n;\n        do {\n          m = head[--p] & 0xffff;\n          head[p] = m >= w_size ? m - w_size : 0;\n        } while (--n !== 0);\n        n = w_size;\n        p = n;\n        do {\n          m = prev[--p] & 0xffff;\n          prev[p] = m >= w_size ? m - w_size : 0;\n          // If n is not on any hash chain, prev[n] is garbage but\n          // its value will never be used.\n        } while (--n !== 0);\n        more += w_size;\n      }\n      if (strm.avail_in === 0) return;\n\n      // If there was no sliding:\n      // strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n      // more == window_size - lookahead - strstart\n      // => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n      // => more >= window_size - 2*WSIZE + 2\n      // In the BIG_MEM or MMAP case (not yet supported),\n      // window_size == input_size + MIN_LOOKAHEAD &&\n      // strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n      // Otherwise, window_size == 2*WSIZE so more >= 2.\n      // If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\n      n = strm.read_buf(win, strstart + lookahead, more);\n      lookahead += n;\n\n      // Initialize the hash value now that we have some input:\n      if (lookahead >= MIN_MATCH) {\n        ins_h = win[strstart] & 0xff;\n        ins_h = (ins_h << hash_shift ^ win[strstart + 1] & 0xff) & hash_mask;\n      }\n      // If the whole input has less than MIN_MATCH bytes, ins_h is\n      // garbage,\n      // but this is not important since only literal bytes will be\n      // emitted.\n    } while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\n  }\n\n  // Copy without compression as much as possible from the input stream,\n  // return\n  // the current block state.\n  // This function does not insert new strings in the dictionary since\n  // uncompressible data is probably not useful. This function is used\n  // only for the level=0 compression option.\n  // NOTE: this function should be optimized to avoid extra copying from\n  // win to pending_buf.\n  function deflate_stored(flush) {\n    // Stored blocks are limited to 0xffff bytes, pending_buf is limited\n    // to pending_buf_size, and each stored block has a 5 byte header:\n\n    let max_block_size = 0xffff;\n    let max_start;\n    if (max_block_size > pending_buf_size - 5) {\n      max_block_size = pending_buf_size - 5;\n    }\n\n    // Copy as much as possible from input to output:\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Fill the win as much as possible:\n      if (lookahead <= 1) {\n        fill_window();\n        if (lookahead === 0 && flush == Z_NO_FLUSH) return NeedMore;\n        if (lookahead === 0) break; // flush the current block\n      }\n      strstart += lookahead;\n      lookahead = 0;\n\n      // Emit a stored block if pending_buf will be full:\n      max_start = block_start + max_block_size;\n      if (strstart === 0 || strstart >= max_start) {\n        // strstart === 0 is possible when wraparound on 16-bit machine\n        lookahead = strstart - max_start;\n        strstart = max_start;\n        flush_block_only(false);\n        if (strm.avail_out === 0) return NeedMore;\n      }\n\n      // Flush if we may have to slide, otherwise block_start may become\n      // negative and the data will be gone:\n      if (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\n        flush_block_only(false);\n        if (strm.avail_out === 0) return NeedMore;\n      }\n    }\n    flush_block_only(flush == Z_FINISH);\n    if (strm.avail_out === 0) return flush == Z_FINISH ? FinishStarted : NeedMore;\n    return flush == Z_FINISH ? FinishDone : BlockDone;\n  }\n  function longest_match(cur_match) {\n    let chain_length = max_chain_length; // max hash chain length\n    let scan = strstart; // current string\n    let match; // matched string\n    let len; // length of current match\n    let best_len = prev_length; // best match length so far\n    const limit = strstart > w_size - MIN_LOOKAHEAD ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\n    let _nice_match = nice_match;\n\n    // Stop when cur_match becomes <= limit. To simplify the code,\n    // we prevent matches with the string of win index 0.\n\n    const wmask = w_mask;\n    const strend = strstart + MAX_MATCH;\n    let scan_end1 = win[scan + best_len - 1];\n    let scan_end = win[scan + best_len];\n\n    // The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\n    // 16.\n    // It is easy to get rid of this optimization if necessary.\n\n    // Do not waste too much time if we already have a good match:\n    if (prev_length >= good_match) {\n      chain_length >>= 2;\n    }\n\n    // Do not look for matches beyond the end of the input. This is\n    // necessary\n    // to make deflate deterministic.\n    if (_nice_match > lookahead) _nice_match = lookahead;\n    do {\n      match = cur_match;\n\n      // Skip to next match if the match length cannot increase\n      // or if the match length is less than 2:\n      if (win[match + best_len] != scan_end || win[match + best_len - 1] != scan_end1 || win[match] != win[scan] || win[++match] != win[scan + 1]) continue;\n\n      // The check at best_len-1 can be removed because it will be made\n      // again later. (This heuristic is not always a win.)\n      // It is not necessary to compare scan[2] and match[2] since they\n      // are always equal when the other bytes match, given that\n      // the hash keys are equal and that HASH_BITS >= 8.\n      scan += 2;\n      match++;\n\n      // We check for insufficient lookahead only every 8th comparison;\n      // the 256th check will be made at strstart+258.\n      // eslint-disable-next-line no-empty\n      do {\n        // empty block\n      } while (win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && scan < strend);\n      len = MAX_MATCH - (strend - scan);\n      scan = strend - MAX_MATCH;\n      if (len > best_len) {\n        match_start = cur_match;\n        best_len = len;\n        if (len >= _nice_match) break;\n        scan_end1 = win[scan + best_len - 1];\n        scan_end = win[scan + best_len];\n      }\n    } while ((cur_match = prev[cur_match & wmask] & 0xffff) > limit && --chain_length !== 0);\n    if (best_len <= lookahead) return best_len;\n    return lookahead;\n  }\n\n  // Compress as much as possible from the input stream, return the current\n  // block state.\n  // This function does not perform lazy evaluation of matches and inserts\n  // new strings in the dictionary only for unmatched strings or for short\n  // matches. It is used only for the fast compression options.\n  function deflate_fast(flush) {\n    // short hash_head = 0; // head of the hash chain\n    let hash_head = 0; // head of the hash chain\n    let bflush; // set if current block must be flushed\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Make sure that we always have enough lookahead, except\n      // at the end of the input file. We need MAX_MATCH bytes\n      // for the next match, plus MIN_MATCH bytes to insert the\n      // string following the next match.\n      if (lookahead < MIN_LOOKAHEAD) {\n        fill_window();\n        if (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n          return NeedMore;\n        }\n        if (lookahead === 0) break; // flush the current block\n      }\n\n      // Insert the string win[strstart .. strstart+2] in the\n      // dictionary, and set hash_head to the head of the hash chain:\n      if (lookahead >= MIN_MATCH) {\n        ins_h = (ins_h << hash_shift ^ win[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask;\n\n        // prev[strstart&w_mask]=hash_head=head[ins_h];\n        hash_head = head[ins_h] & 0xffff;\n        prev[strstart & w_mask] = head[ins_h];\n        head[ins_h] = strstart;\n      }\n\n      // Find the longest match, discarding those <= prev_length.\n      // At this point we have always match_length < MIN_MATCH\n\n      if (hash_head !== 0 && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n        // To simplify the code, we prevent matches with the string\n        // of win index 0 (in particular we have to avoid a match\n        // of the string with itself at the start of the input file).\n        if (strategy != Z_HUFFMAN_ONLY) {\n          match_length = longest_match(hash_head);\n        }\n        // longest_match() sets match_start\n      }\n      if (match_length >= MIN_MATCH) {\n        // check_match(strstart, match_start, match_length);\n\n        bflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\n        lookahead -= match_length;\n\n        // Insert new strings in the hash table only if the match length\n        // is not too large. This saves time but degrades compression.\n        if (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\n          match_length--; // string at strstart already in hash table\n          do {\n            strstart++;\n            ins_h = (ins_h << hash_shift ^ win[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask;\n            // prev[strstart&w_mask]=hash_head=head[ins_h];\n            hash_head = head[ins_h] & 0xffff;\n            prev[strstart & w_mask] = head[ins_h];\n            head[ins_h] = strstart;\n\n            // strstart never exceeds WSIZE-MAX_MATCH, so there are\n            // always MIN_MATCH bytes ahead.\n          } while (--match_length !== 0);\n          strstart++;\n        } else {\n          strstart += match_length;\n          match_length = 0;\n          ins_h = win[strstart] & 0xff;\n          ins_h = (ins_h << hash_shift ^ win[strstart + 1] & 0xff) & hash_mask;\n          // If lookahead < MIN_MATCH, ins_h is garbage, but it does\n          // not\n          // matter since it will be recomputed at next deflate call.\n        }\n      } else {\n        // No match, output a literal byte\n\n        bflush = _tr_tally(0, win[strstart] & 0xff);\n        lookahead--;\n        strstart++;\n      }\n      if (bflush) {\n        flush_block_only(false);\n        if (strm.avail_out === 0) return NeedMore;\n      }\n    }\n    flush_block_only(flush == Z_FINISH);\n    if (strm.avail_out === 0) {\n      if (flush == Z_FINISH) return FinishStarted;else return NeedMore;\n    }\n    return flush == Z_FINISH ? FinishDone : BlockDone;\n  }\n\n  // Same as above, but achieves better compression. We use a lazy\n  // evaluation for matches: a match is finally adopted only if there is\n  // no better match at the next win position.\n  function deflate_slow(flush) {\n    // short hash_head = 0; // head of hash chain\n    let hash_head = 0; // head of hash chain\n    let bflush; // set if current block must be flushed\n    let max_insert;\n\n    // Process the input block.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Make sure that we always have enough lookahead, except\n      // at the end of the input file. We need MAX_MATCH bytes\n      // for the next match, plus MIN_MATCH bytes to insert the\n      // string following the next match.\n\n      if (lookahead < MIN_LOOKAHEAD) {\n        fill_window();\n        if (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n          return NeedMore;\n        }\n        if (lookahead === 0) break; // flush the current block\n      }\n\n      // Insert the string win[strstart .. strstart+2] in the\n      // dictionary, and set hash_head to the head of the hash chain:\n\n      if (lookahead >= MIN_MATCH) {\n        ins_h = (ins_h << hash_shift ^ win[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask;\n        // prev[strstart&w_mask]=hash_head=head[ins_h];\n        hash_head = head[ins_h] & 0xffff;\n        prev[strstart & w_mask] = head[ins_h];\n        head[ins_h] = strstart;\n      }\n\n      // Find the longest match, discarding those <= prev_length.\n      prev_length = match_length;\n      prev_match = match_start;\n      match_length = MIN_MATCH - 1;\n      if (hash_head !== 0 && prev_length < max_lazy_match && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n        // To simplify the code, we prevent matches with the string\n        // of win index 0 (in particular we have to avoid a match\n        // of the string with itself at the start of the input file).\n\n        if (strategy != Z_HUFFMAN_ONLY) {\n          match_length = longest_match(hash_head);\n        }\n        // longest_match() sets match_start\n\n        if (match_length <= 5 && (strategy == Z_FILTERED || match_length == MIN_MATCH && strstart - match_start > 4096)) {\n          // If prev_match is also MIN_MATCH, match_start is garbage\n          // but we will ignore the current match anyway.\n          match_length = MIN_MATCH - 1;\n        }\n      }\n\n      // If there was a match at the previous step and the current\n      // match is not better, output the previous match:\n      if (prev_length >= MIN_MATCH && match_length <= prev_length) {\n        max_insert = strstart + lookahead - MIN_MATCH;\n        // Do not insert strings in hash table beyond this.\n\n        // check_match(strstart-1, prev_match, prev_length);\n\n        bflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\n\n        // Insert in hash table all strings up to the end of the match.\n        // strstart-1 and strstart are already inserted. If there is not\n        // enough lookahead, the last two strings are not inserted in\n        // the hash table.\n        lookahead -= prev_length - 1;\n        prev_length -= 2;\n        do {\n          if (++strstart <= max_insert) {\n            ins_h = (ins_h << hash_shift ^ win[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask;\n            // prev[strstart&w_mask]=hash_head=head[ins_h];\n            hash_head = head[ins_h] & 0xffff;\n            prev[strstart & w_mask] = head[ins_h];\n            head[ins_h] = strstart;\n          }\n        } while (--prev_length !== 0);\n        match_available = 0;\n        match_length = MIN_MATCH - 1;\n        strstart++;\n        if (bflush) {\n          flush_block_only(false);\n          if (strm.avail_out === 0) return NeedMore;\n        }\n      } else if (match_available !== 0) {\n        // If there was no match at the previous position, output a\n        // single literal. If there was a match but the current match\n        // is longer, truncate the previous match to a single literal.\n\n        bflush = _tr_tally(0, win[strstart - 1] & 0xff);\n        if (bflush) {\n          flush_block_only(false);\n        }\n        strstart++;\n        lookahead--;\n        if (strm.avail_out === 0) return NeedMore;\n      } else {\n        // There is no previous match to compare with, wait for\n        // the next step to decide.\n\n        match_available = 1;\n        strstart++;\n        lookahead--;\n      }\n    }\n    if (match_available !== 0) {\n      bflush = _tr_tally(0, win[strstart - 1] & 0xff);\n      match_available = 0;\n    }\n    flush_block_only(flush == Z_FINISH);\n    if (strm.avail_out === 0) {\n      if (flush == Z_FINISH) return FinishStarted;else return NeedMore;\n    }\n    return flush == Z_FINISH ? FinishDone : BlockDone;\n  }\n  function deflateReset(strm) {\n    strm.total_in = strm.total_out = 0;\n    strm.msg = null; //\n\n    that.pending = 0;\n    that.pending_out = 0;\n    status = BUSY_STATE;\n    last_flush = Z_NO_FLUSH;\n    tr_init();\n    lm_init();\n    return Z_OK;\n  }\n  that.deflateInit = function (strm, _level, bits, _method, memLevel, _strategy) {\n    if (!_method) _method = Z_DEFLATED;\n    if (!memLevel) memLevel = DEF_MEM_LEVEL;\n    if (!_strategy) _strategy = Z_DEFAULT_STRATEGY;\n\n    // byte[] my_version=ZLIB_VERSION;\n\n    //\n    // if (!version || version[0] != my_version[0]\n    // || stream_size != sizeof(z_stream)) {\n    // return Z_VERSION_ERROR;\n    // }\n\n    strm.msg = null;\n    if (_level == Z_DEFAULT_COMPRESSION) _level = 6;\n    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n      return Z_STREAM_ERROR;\n    }\n    strm.dstate = that;\n    w_bits = bits;\n    w_size = 1 << w_bits;\n    w_mask = w_size - 1;\n    hash_bits = memLevel + 7;\n    hash_size = 1 << hash_bits;\n    hash_mask = hash_size - 1;\n    hash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n    win = new Uint8Array(w_size * 2);\n    prev = [];\n    head = [];\n    lit_bufsize = 1 << memLevel + 6; // 16K elements by default\n\n    that.pending_buf = new Uint8Array(lit_bufsize * 4);\n    pending_buf_size = lit_bufsize * 4;\n    that.dist_buf = new Uint16Array(lit_bufsize);\n    that.lc_buf = new Uint8Array(lit_bufsize);\n    level = _level;\n    strategy = _strategy;\n    return deflateReset(strm);\n  };\n  that.deflateEnd = function () {\n    if (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\n      return Z_STREAM_ERROR;\n    }\n    // Deallocate in reverse order of allocations:\n    that.lc_buf = null;\n    that.dist_buf = null;\n    that.pending_buf = null;\n    head = null;\n    prev = null;\n    win = null;\n    // free\n    that.dstate = null;\n    return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\n  };\n  that.deflateParams = function (strm, _level, _strategy) {\n    let err = Z_OK;\n    if (_level == Z_DEFAULT_COMPRESSION) {\n      _level = 6;\n    }\n    if (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n      return Z_STREAM_ERROR;\n    }\n    if (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\n      // Flush the last buffer:\n      err = strm.deflate(Z_PARTIAL_FLUSH);\n    }\n    if (level != _level) {\n      level = _level;\n      max_lazy_match = config_table[level].max_lazy;\n      good_match = config_table[level].good_length;\n      nice_match = config_table[level].nice_length;\n      max_chain_length = config_table[level].max_chain;\n    }\n    strategy = _strategy;\n    return err;\n  };\n  that.deflateSetDictionary = function (_strm, dictionary, dictLength) {\n    let length = dictLength;\n    let n,\n      index = 0;\n    if (!dictionary || status != INIT_STATE) return Z_STREAM_ERROR;\n    if (length < MIN_MATCH) return Z_OK;\n    if (length > w_size - MIN_LOOKAHEAD) {\n      length = w_size - MIN_LOOKAHEAD;\n      index = dictLength - length; // use the tail of the dictionary\n    }\n    win.set(dictionary.subarray(index, index + length), 0);\n    strstart = length;\n    block_start = length;\n\n    // Insert all strings in the hash table (except for the last two bytes).\n    // s->lookahead stays null, so s->ins_h will be recomputed at the next\n    // call of fill_window.\n\n    ins_h = win[0] & 0xff;\n    ins_h = (ins_h << hash_shift ^ win[1] & 0xff) & hash_mask;\n    for (n = 0; n <= length - MIN_MATCH; n++) {\n      ins_h = (ins_h << hash_shift ^ win[n + (MIN_MATCH - 1)] & 0xff) & hash_mask;\n      prev[n & w_mask] = head[ins_h];\n      head[ins_h] = n;\n    }\n    return Z_OK;\n  };\n  that.deflate = function (_strm, flush) {\n    let i, header, level_flags, old_flush, bstate;\n    if (flush > Z_FINISH || flush < 0) {\n      return Z_STREAM_ERROR;\n    }\n    if (!_strm.next_out || !_strm.next_in && _strm.avail_in !== 0 || status == FINISH_STATE && flush != Z_FINISH) {\n      _strm.msg = z_errmsg[Z_NEED_DICT - Z_STREAM_ERROR];\n      return Z_STREAM_ERROR;\n    }\n    if (_strm.avail_out === 0) {\n      _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n      return Z_BUF_ERROR;\n    }\n    strm = _strm; // just in case\n    old_flush = last_flush;\n    last_flush = flush;\n\n    // Write the zlib header\n    if (status == INIT_STATE) {\n      header = Z_DEFLATED + (w_bits - 8 << 4) << 8;\n      level_flags = (level - 1 & 0xff) >> 1;\n      if (level_flags > 3) level_flags = 3;\n      header |= level_flags << 6;\n      if (strstart !== 0) header |= PRESET_DICT;\n      header += 31 - header % 31;\n      status = BUSY_STATE;\n      putShortMSB(header);\n    }\n\n    // Flush as much pending output as possible\n    if (that.pending !== 0) {\n      strm.flush_pending();\n      if (strm.avail_out === 0) {\n        // console.log(\" avail_out==0\");\n        // Since avail_out is 0, deflate will be called again with\n        // more output space, but possibly with both pending and\n        // avail_in equal to zero. There won't be anything to do,\n        // but this is not an error situation so make sure we\n        // return OK instead of BUF_ERROR at next call of deflate:\n        last_flush = -1;\n        return Z_OK;\n      }\n\n      // Make sure there is something to do and avoid duplicate\n      // consecutive\n      // flushes. For repeated and useless calls with Z_FINISH, we keep\n      // returning Z_STREAM_END instead of Z_BUFF_ERROR.\n    } else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\n      strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n      return Z_BUF_ERROR;\n    }\n\n    // User must not provide more input after the first FINISH:\n    if (status == FINISH_STATE && strm.avail_in !== 0) {\n      _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n      return Z_BUF_ERROR;\n    }\n\n    // Start a new block or continue the current one.\n    if (strm.avail_in !== 0 || lookahead !== 0 || flush != Z_NO_FLUSH && status != FINISH_STATE) {\n      bstate = -1;\n      switch (config_table[level].func) {\n        case STORED:\n          bstate = deflate_stored(flush);\n          break;\n        case FAST:\n          bstate = deflate_fast(flush);\n          break;\n        case SLOW:\n          bstate = deflate_slow(flush);\n          break;\n        default:\n      }\n      if (bstate == FinishStarted || bstate == FinishDone) {\n        status = FINISH_STATE;\n      }\n      if (bstate == NeedMore || bstate == FinishStarted) {\n        if (strm.avail_out === 0) {\n          last_flush = -1; // avoid BUF_ERROR next call, see above\n        }\n        return Z_OK;\n        // If flush != Z_NO_FLUSH && avail_out === 0, the next call\n        // of deflate should use the same flush parameter to make sure\n        // that the flush is complete. So we don't have to output an\n        // empty block here, this will be done at next call. This also\n        // ensures that for a very small output buffer, we emit at most\n        // one empty block.\n      }\n      if (bstate == BlockDone) {\n        if (flush == Z_PARTIAL_FLUSH) {\n          _tr_align();\n        } else {\n          // FULL_FLUSH or SYNC_FLUSH\n          _tr_stored_block(0, 0, false);\n          // For a full flush, this empty block will be recognized\n          // as a special marker by inflate_sync().\n          if (flush == Z_FULL_FLUSH) {\n            // state.head[s.hash_size-1]=0;\n            for (i = 0; i < hash_size /*-1*/; i++)\n            // forget history\n            head[i] = 0;\n          }\n        }\n        strm.flush_pending();\n        if (strm.avail_out === 0) {\n          last_flush = -1; // avoid BUF_ERROR at next call, see above\n          return Z_OK;\n        }\n      }\n    }\n    if (flush != Z_FINISH) return Z_OK;\n    return Z_STREAM_END;\n  };\n}\n\n// ZStream\n\nfunction ZStream() {\n  const that = this;\n  that.next_in_index = 0;\n  that.next_out_index = 0;\n  // that.next_in; // next input byte\n  that.avail_in = 0; // number of bytes available at next_in\n  that.total_in = 0; // total nb of input bytes read so far\n  // that.next_out; // next output byte should be put there\n  that.avail_out = 0; // remaining free space at next_out\n  that.total_out = 0; // total nb of bytes output so far\n  // that.msg;\n  // that.dstate;\n}\nZStream.prototype = {\n  deflateInit(level, bits) {\n    const that = this;\n    that.dstate = new Deflate();\n    if (!bits) bits = MAX_BITS;\n    return that.dstate.deflateInit(that, level, bits);\n  },\n  deflate(flush) {\n    const that = this;\n    if (!that.dstate) {\n      return Z_STREAM_ERROR;\n    }\n    return that.dstate.deflate(that, flush);\n  },\n  deflateEnd() {\n    const that = this;\n    if (!that.dstate) return Z_STREAM_ERROR;\n    const ret = that.dstate.deflateEnd();\n    that.dstate = null;\n    return ret;\n  },\n  deflateParams(level, strategy) {\n    const that = this;\n    if (!that.dstate) return Z_STREAM_ERROR;\n    return that.dstate.deflateParams(that, level, strategy);\n  },\n  deflateSetDictionary(dictionary, dictLength) {\n    const that = this;\n    if (!that.dstate) return Z_STREAM_ERROR;\n    return that.dstate.deflateSetDictionary(that, dictionary, dictLength);\n  },\n  // Read a new buffer from the current input stream, update the\n  // total number of bytes read. All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  read_buf(buf, start, size) {\n    const that = this;\n    let len = that.avail_in;\n    if (len > size) len = size;\n    if (len === 0) return 0;\n    that.avail_in -= len;\n    buf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\n    that.next_in_index += len;\n    that.total_in += len;\n    return len;\n  },\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  flush_pending() {\n    const that = this;\n    let len = that.dstate.pending;\n    if (len > that.avail_out) len = that.avail_out;\n    if (len === 0) return;\n\n    // if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\n    // || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n    // len)) {\n    // console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\n    // that.next_out_index + \", \" + len);\n    // console.log(\"avail_out=\" + that.avail_out);\n    // }\n\n    that.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n    that.next_out_index += len;\n    that.dstate.pending_out += len;\n    that.total_out += len;\n    that.avail_out -= len;\n    that.dstate.pending -= len;\n    if (that.dstate.pending === 0) {\n      that.dstate.pending_out = 0;\n    }\n  }\n};\n\n// Deflate\n\nfunction ZipDeflate(options) {\n  const that = this;\n  const z = new ZStream();\n  const bufsize = getMaximumCompressedSize(options && options.chunkSize ? options.chunkSize : 64 * 1024);\n  const flush = Z_NO_FLUSH;\n  const buf = new Uint8Array(bufsize);\n  let level = options ? options.level : Z_DEFAULT_COMPRESSION;\n  if (typeof level == \"undefined\") level = Z_DEFAULT_COMPRESSION;\n  z.deflateInit(level);\n  z.next_out = buf;\n  that.append = function (data, onprogress) {\n    let err,\n      array,\n      lastIndex = 0,\n      bufferIndex = 0,\n      bufferSize = 0;\n    const buffers = [];\n    if (!data.length) return;\n    z.next_in_index = 0;\n    z.next_in = data;\n    z.avail_in = data.length;\n    do {\n      z.next_out_index = 0;\n      z.avail_out = bufsize;\n      err = z.deflate(flush);\n      if (err != Z_OK) throw new Error(\"deflating: \" + z.msg);\n      if (z.next_out_index) if (z.next_out_index == bufsize) buffers.push(new Uint8Array(buf));else buffers.push(buf.subarray(0, z.next_out_index));\n      bufferSize += z.next_out_index;\n      if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n        onprogress(z.next_in_index);\n        lastIndex = z.next_in_index;\n      }\n    } while (z.avail_in > 0 || z.avail_out === 0);\n    if (buffers.length > 1) {\n      array = new Uint8Array(bufferSize);\n      buffers.forEach(function (chunk) {\n        array.set(chunk, bufferIndex);\n        bufferIndex += chunk.length;\n      });\n    } else {\n      array = buffers[0] ? new Uint8Array(buffers[0]) : new Uint8Array();\n    }\n    return array;\n  };\n  that.flush = function () {\n    let err,\n      array,\n      bufferIndex = 0,\n      bufferSize = 0;\n    const buffers = [];\n    do {\n      z.next_out_index = 0;\n      z.avail_out = bufsize;\n      err = z.deflate(Z_FINISH);\n      if (err != Z_STREAM_END && err != Z_OK) throw new Error(\"deflating: \" + z.msg);\n      if (bufsize - z.avail_out > 0) buffers.push(buf.slice(0, z.next_out_index));\n      bufferSize += z.next_out_index;\n    } while (z.avail_in > 0 || z.avail_out === 0);\n    z.deflateEnd();\n    array = new Uint8Array(bufferSize);\n    buffers.forEach(function (chunk) {\n      array.set(chunk, bufferIndex);\n      bufferIndex += chunk.length;\n    });\n    return array;\n  };\n}\nfunction getMaximumCompressedSize(uncompressedSize) {\n  return uncompressedSize + 5 * (Math.floor(uncompressedSize / 16383) + 1);\n}\nexport { ZipDeflate as Deflate };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n// deno-lint-ignore-file no-this-alias prefer-const\n\n// Global\n\nconst MAX_BITS = 15;\nconst Z_OK = 0;\nconst Z_STREAM_END = 1;\nconst Z_NEED_DICT = 2;\nconst Z_STREAM_ERROR = -2;\nconst Z_DATA_ERROR = -3;\nconst Z_MEM_ERROR = -4;\nconst Z_BUF_ERROR = -5;\nconst inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\nconst MANY = 1440;\n\n// JZlib version : \"1.0.2\"\nconst Z_NO_FLUSH = 0;\nconst Z_FINISH = 4;\n\n// InfTree\nconst fixed_bl = 9;\nconst fixed_bd = 5;\nconst fixed_tl = [96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255];\nconst fixed_td = [80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577];\n\n// Tables for deflate from PKZIP's appnote.txt.\nconst cplens = [\n// Copy lengths for literal codes 257..285\n3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];\n\n// see note #13 above about 258\nconst cplext = [\n// Extra bits for literal codes 257..285\n0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n];\nconst cpdist = [\n// Copy offsets for distance codes 0..29\n1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];\nconst cpdext = [\n// Extra bits for distance codes\n0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\n\n// If BMAX needs to be larger than 16, then h and x[] should be uLong.\nconst BMAX = 15; // maximum bit length of any code\n\nfunction InfTree() {\n  const that = this;\n  let hn; // hufts used in space\n  let v; // work area for huft_build\n  let c; // bit length count table\n  let r; // table entry for structure assignment\n  let u; // table stack\n  let x; // bit offsets, then code stack\n\n  function huft_build(b,\n  // code lengths in bits (all assumed <=\n  // BMAX)\n  bindex, n,\n  // number of codes (assumed <= 288)\n  s,\n  // number of simple-valued codes (0..s-1)\n  d,\n  // list of base values for non-simple codes\n  e,\n  // list of extra bits for non-simple codes\n  t,\n  // result: starting table\n  m,\n  // maximum lookup bits, returns actual\n  hp,\n  // space for trees\n  hn,\n  // hufts used in space\n  v // working area: values in order of bit length\n  ) {\n    // Given a list of code lengths and a maximum table size, make a set of\n    // tables to decode that set of codes. Return Z_OK on success,\n    // Z_BUF_ERROR\n    // if the given code set is incomplete (the tables are still built in\n    // this\n    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\n    // of\n    // lengths), or Z_MEM_ERROR if not enough memory.\n\n    let a; // counter for codes of length k\n    let f; // i repeats in table every f entries\n    let g; // maximum code length\n    let h; // table level\n    let i; // counter, current code\n    let j; // counter\n    let k; // number of bits in current code\n    let l; // bits per table (returned in m)\n    let mask; // (1 << w) - 1, to avoid cc -O bug on HP\n    let p; // pointer into c[], b[], or v[]\n    let q; // points to current table\n    let w; // bits before this table == (l * h)\n    let xp; // pointer into x\n    let y; // number of dummy codes added\n    let z; // number of entries in current table\n\n    // Generate counts for each bit length\n\n    p = 0;\n    i = n;\n    do {\n      c[b[bindex + p]]++;\n      p++;\n      i--; // assume all entries <= BMAX\n    } while (i !== 0);\n    if (c[0] == n) {\n      // null input--all zero length codes\n      t[0] = -1;\n      m[0] = 0;\n      return Z_OK;\n    }\n\n    // Find minimum and maximum length, bound *m by those\n    l = m[0];\n    for (j = 1; j <= BMAX; j++) if (c[j] !== 0) break;\n    k = j; // minimum code length\n    if (l < j) {\n      l = j;\n    }\n    for (i = BMAX; i !== 0; i--) {\n      if (c[i] !== 0) break;\n    }\n    g = i; // maximum code length\n    if (l > i) {\n      l = i;\n    }\n    m[0] = l;\n\n    // Adjust last length count to fill out codes, if needed\n    for (y = 1 << j; j < i; j++, y <<= 1) {\n      if ((y -= c[j]) < 0) {\n        return Z_DATA_ERROR;\n      }\n    }\n    if ((y -= c[i]) < 0) {\n      return Z_DATA_ERROR;\n    }\n    c[i] += y;\n\n    // Generate starting offsets into the value table for each length\n    x[1] = j = 0;\n    p = 1;\n    xp = 2;\n    while (--i !== 0) {\n      // note that i == g from above\n      x[xp] = j += c[p];\n      xp++;\n      p++;\n    }\n\n    // Make a table of values in order of bit lengths\n    i = 0;\n    p = 0;\n    do {\n      if ((j = b[bindex + p]) !== 0) {\n        v[x[j]++] = i;\n      }\n      p++;\n    } while (++i < n);\n    n = x[g]; // set n to length of v\n\n    // Generate the Huffman codes and for each, make the table entries\n    x[0] = i = 0; // first Huffman code is zero\n    p = 0; // grab values in bit order\n    h = -1; // no tables yet--level -1\n    w = -l; // bits decoded == (l * h)\n    u[0] = 0; // just to keep compilers happy\n    q = 0; // ditto\n    z = 0; // ditto\n\n    // go through the bit lengths (k already is bits in shortest code)\n    for (; k <= g; k++) {\n      a = c[k];\n      while (a-- !== 0) {\n        // here i is the Huffman code of length k bits for value *p\n        // make tables up to required level\n        while (k > w + l) {\n          h++;\n          w += l; // previous table always l bits\n          // compute minimum size table less than or equal to l bits\n          z = g - w;\n          z = z > l ? l : z; // table size upper limit\n          if ((f = 1 << (j = k - w)) > a + 1) {\n            // try a k-w bit table\n            // too few codes for\n            // k-w bit table\n            f -= a + 1; // deduct codes from patterns left\n            xp = k;\n            if (j < z) {\n              while (++j < z) {\n                // try smaller tables up to z bits\n                if ((f <<= 1) <= c[++xp]) break; // enough codes to use up j bits\n                f -= c[xp]; // else deduct codes from patterns\n              }\n            }\n          }\n          z = 1 << j; // table entries for j-bit table\n\n          // allocate new table\n          if (hn[0] + z > MANY) {\n            // (note: doesn't matter for fixed)\n            return Z_DATA_ERROR; // overflow of MANY\n          }\n          u[h] = q = /* hp+ */hn[0]; // DEBUG\n          hn[0] += z;\n\n          // connect to last table, if there is one\n          if (h !== 0) {\n            x[h] = i; // save pattern for backing up\n            r[0] = /* (byte) */j; // bits in this table\n            r[1] = /* (byte) */l; // bits to dump before this table\n            j = i >>> w - l;\n            r[2] = /* (int) */q - u[h - 1] - j; // offset to this table\n            hp.set(r, (u[h - 1] + j) * 3);\n            // to\n            // last\n            // table\n          } else {\n            t[0] = q; // first table is returned result\n          }\n        }\n\n        // set up table entry in r\n        r[1] = /* (byte) */k - w;\n        if (p >= n) {\n          r[0] = 128 + 64; // out of values--invalid code\n        } else if (v[p] < s) {\n          r[0] = /* (byte) */v[p] < 256 ? 0 : 32 + 64; // 256 is\n          // end-of-block\n          r[2] = v[p++]; // simple code is just the value\n        } else {\n          r[0] = /* (byte) */e[v[p] - s] + 16 + 64; // non-simple--look\n          // up in lists\n          r[2] = d[v[p++] - s];\n        }\n\n        // fill code-like entries with r\n        f = 1 << k - w;\n        for (j = i >>> w; j < z; j += f) {\n          hp.set(r, (q + j) * 3);\n        }\n\n        // backwards increment the k-bit code i\n        for (j = 1 << k - 1; (i & j) !== 0; j >>>= 1) {\n          i ^= j;\n        }\n        i ^= j;\n\n        // backup over finished tables\n        mask = (1 << w) - 1; // needed on HP, cc -O bug\n        while ((i & mask) != x[h]) {\n          h--; // don't need to update q\n          w -= l;\n          mask = (1 << w) - 1;\n        }\n      }\n    }\n    // Return Z_BUF_ERROR if we were given an incomplete table\n    return y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n  }\n  function initWorkArea(vsize) {\n    let i;\n    if (!hn) {\n      hn = []; // []; //new Array(1);\n      v = []; // new Array(vsize);\n      c = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n      r = []; // new Array(3);\n      u = new Int32Array(BMAX); // new Array(BMAX);\n      x = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n    }\n    if (v.length < vsize) {\n      v = []; // new Array(vsize);\n    }\n    for (i = 0; i < vsize; i++) {\n      v[i] = 0;\n    }\n    for (i = 0; i < BMAX + 1; i++) {\n      c[i] = 0;\n    }\n    for (i = 0; i < 3; i++) {\n      r[i] = 0;\n    }\n    // for(int i=0; i<BMAX; i++){u[i]=0;}\n    u.set(c.subarray(0, BMAX), 0);\n    // for(int i=0; i<BMAX+1; i++){x[i]=0;}\n    x.set(c.subarray(0, BMAX + 1), 0);\n  }\n  that.inflate_trees_bits = function (c,\n  // 19 code lengths\n  bb,\n  // bits tree desired/actual depth\n  tb,\n  // bits tree result\n  hp,\n  // space for trees\n  z // for messages\n  ) {\n    let result;\n    initWorkArea(19);\n    hn[0] = 0;\n    result = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\n    if (result == Z_DATA_ERROR) {\n      z.msg = \"oversubscribed dynamic bit lengths tree\";\n    } else if (result == Z_BUF_ERROR || bb[0] === 0) {\n      z.msg = \"incomplete dynamic bit lengths tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n  };\n  that.inflate_trees_dynamic = function (nl,\n  // number of literal/length codes\n  nd,\n  // number of distance codes\n  c,\n  // that many (total) code lengths\n  bl,\n  // literal desired/actual bit depth\n  bd,\n  // distance desired/actual bit depth\n  tl,\n  // literal/length tree result\n  td,\n  // distance tree result\n  hp,\n  // space for trees\n  z // for messages\n  ) {\n    let result;\n\n    // build literal/length tree\n    initWorkArea(288);\n    hn[0] = 0;\n    result = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\n    if (result != Z_OK || bl[0] === 0) {\n      if (result == Z_DATA_ERROR) {\n        z.msg = \"oversubscribed literal/length tree\";\n      } else if (result != Z_MEM_ERROR) {\n        z.msg = \"incomplete literal/length tree\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    // build distance tree\n    initWorkArea(288);\n    result = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\n    if (result != Z_OK || bd[0] === 0 && nl > 257) {\n      if (result == Z_DATA_ERROR) {\n        z.msg = \"oversubscribed distance tree\";\n      } else if (result == Z_BUF_ERROR) {\n        z.msg = \"incomplete distance tree\";\n        result = Z_DATA_ERROR;\n      } else if (result != Z_MEM_ERROR) {\n        z.msg = \"empty distance tree with lengths\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n    return Z_OK;\n  };\n}\nInfTree.inflate_trees_fixed = function (bl,\n// literal desired/actual bit depth\nbd,\n// distance desired/actual bit depth\ntl,\n// literal/length tree result\ntd // distance tree result\n) {\n  bl[0] = fixed_bl;\n  bd[0] = fixed_bd;\n  tl[0] = fixed_tl;\n  td[0] = fixed_td;\n  return Z_OK;\n};\n\n// InfCodes\n\n// waiting for \"i:\"=input,\n// \"o:\"=output,\n// \"x:\"=nothing\nconst START = 0; // x: set up for LEN\nconst LEN = 1; // i: get length/literal/eob next\nconst LENEXT = 2; // i: getting length extra (have base)\nconst DIST = 3; // i: get distance next\nconst DISTEXT = 4; // i: getting distance extra\nconst COPY = 5; // o: copying bytes in win, waiting\n// for space\nconst LIT = 6; // o: got literal, waiting for output\n// space\nconst WASH = 7; // o: got eob, possibly still output\n// waiting\nconst END = 8; // x: got eob and all data flushed\nconst BADCODE = 9; // x: got error\n\nfunction InfCodes() {\n  const that = this;\n  let mode; // current inflate_codes mode\n\n  // mode dependent information\n  let len = 0;\n  let tree; // pointer into tree\n  let tree_index = 0;\n  let need = 0; // bits needed\n\n  let lit = 0;\n\n  // if EXT or COPY, where and how much\n  let get = 0; // bits to get for extra\n  let dist = 0; // distance back to copy from\n\n  let lbits = 0; // ltree bits decoded per branch\n  let dbits = 0; // dtree bits decoder per branch\n  let ltree; // literal/length/eob tree\n  let ltree_index = 0; // literal/length/eob tree\n  let dtree; // distance tree\n  let dtree_index = 0; // distance tree\n\n  // Called with number of bytes left to write in win at least 258\n  // (the maximum string length) and number of input bytes available\n  // at least ten. The ten bytes are six bytes for the longest length/\n  // distance pair plus four bytes for overloading the bit buffer.\n\n  function inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\n    let t; // temporary pointer\n    let tp; // temporary pointer\n    let tp_index; // temporary pointer\n    let e; // extra bits or operation\n    let b; // bit buffer\n    let k; // bits in bit buffer\n    let p; // input data pointer\n    let n; // bytes available there\n    let q; // output win write pointer\n    let m; // bytes to end of win or read pointer\n    let ml; // mask for literal/length tree\n    let md; // mask for distance tree\n    let c; // bytes to copy\n    let d; // distance back to copy from\n    let r; // copy source pointer\n\n    let tp_index_t_3; // (tp_index+t)*3\n\n    // load input, output, bit values\n    p = z.next_in_index;\n    n = z.avail_in;\n    b = s.bitb;\n    k = s.bitk;\n    q = s.write;\n    m = q < s.read ? s.read - q - 1 : s.end - q;\n\n    // initialize masks\n    ml = inflate_mask[bl];\n    md = inflate_mask[bd];\n\n    // do until not enough input or output space for fast loop\n    do {\n      // assume called with m >= 258 && n >= 10\n      // get literal/length code\n      while (k < 20) {\n        // max bits for literal/length code\n        n--;\n        b |= (z.read_byte(p++) & 0xff) << k;\n        k += 8;\n      }\n      t = b & ml;\n      tp = tl;\n      tp_index = tl_index;\n      tp_index_t_3 = (tp_index + t) * 3;\n      if ((e = tp[tp_index_t_3]) === 0) {\n        b >>= tp[tp_index_t_3 + 1];\n        k -= tp[tp_index_t_3 + 1];\n        s.win[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n        m--;\n        continue;\n      }\n      do {\n        b >>= tp[tp_index_t_3 + 1];\n        k -= tp[tp_index_t_3 + 1];\n        if ((e & 16) !== 0) {\n          e &= 15;\n          c = tp[tp_index_t_3 + 2] + ( /* (int) */b & inflate_mask[e]);\n          b >>= e;\n          k -= e;\n\n          // decode distance base of block to copy\n          while (k < 15) {\n            // max bits for distance code\n            n--;\n            b |= (z.read_byte(p++) & 0xff) << k;\n            k += 8;\n          }\n          t = b & md;\n          tp = td;\n          tp_index = td_index;\n          tp_index_t_3 = (tp_index + t) * 3;\n          e = tp[tp_index_t_3];\n          do {\n            b >>= tp[tp_index_t_3 + 1];\n            k -= tp[tp_index_t_3 + 1];\n            if ((e & 16) !== 0) {\n              // get extra bits to add to distance base\n              e &= 15;\n              while (k < e) {\n                // get extra bits (up to 13)\n                n--;\n                b |= (z.read_byte(p++) & 0xff) << k;\n                k += 8;\n              }\n              d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n              b >>= e;\n              k -= e;\n\n              // do the copy\n              m -= c;\n              if (q >= d) {\n                // offset before dest\n                // just copy\n                r = q - d;\n                if (q - r > 0 && 2 > q - r) {\n                  s.win[q++] = s.win[r++]; // minimum\n                  // count is\n                  // three,\n                  s.win[q++] = s.win[r++]; // so unroll\n                  // loop a\n                  // little\n                  c -= 2;\n                } else {\n                  s.win.set(s.win.subarray(r, r + 2), q);\n                  q += 2;\n                  r += 2;\n                  c -= 2;\n                }\n              } else {\n                // else offset after destination\n                r = q - d;\n                do {\n                  r += s.end; // force pointer in win\n                } while (r < 0); // covers invalid distances\n                e = s.end - r;\n                if (c > e) {\n                  // if source crosses,\n                  c -= e; // wrapped copy\n                  if (q - r > 0 && e > q - r) {\n                    do {\n                      s.win[q++] = s.win[r++];\n                    } while (--e !== 0);\n                  } else {\n                    s.win.set(s.win.subarray(r, r + e), q);\n                    q += e;\n                    r += e;\n                    e = 0;\n                  }\n                  r = 0; // copy rest from start of win\n                }\n              }\n\n              // copy all or what's left\n              if (q - r > 0 && c > q - r) {\n                do {\n                  s.win[q++] = s.win[r++];\n                } while (--c !== 0);\n              } else {\n                s.win.set(s.win.subarray(r, r + c), q);\n                q += c;\n                r += c;\n                c = 0;\n              }\n              break;\n            } else if ((e & 64) === 0) {\n              t += tp[tp_index_t_3 + 2];\n              t += b & inflate_mask[e];\n              tp_index_t_3 = (tp_index + t) * 3;\n              e = tp[tp_index_t_3];\n            } else {\n              z.msg = \"invalid distance code\";\n              c = z.avail_in - n;\n              c = k >> 3 < c ? k >> 3 : c;\n              n += c;\n              p -= c;\n              k -= c << 3;\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              return Z_DATA_ERROR;\n            }\n            // eslint-disable-next-line no-constant-condition\n          } while (true);\n          break;\n        }\n        if ((e & 64) === 0) {\n          t += tp[tp_index_t_3 + 2];\n          t += b & inflate_mask[e];\n          tp_index_t_3 = (tp_index + t) * 3;\n          if ((e = tp[tp_index_t_3]) === 0) {\n            b >>= tp[tp_index_t_3 + 1];\n            k -= tp[tp_index_t_3 + 1];\n            s.win[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n            m--;\n            break;\n          }\n        } else if ((e & 32) !== 0) {\n          c = z.avail_in - n;\n          c = k >> 3 < c ? k >> 3 : c;\n          n += c;\n          p -= c;\n          k -= c << 3;\n          s.bitb = b;\n          s.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          s.write = q;\n          return Z_STREAM_END;\n        } else {\n          z.msg = \"invalid literal/length code\";\n          c = z.avail_in - n;\n          c = k >> 3 < c ? k >> 3 : c;\n          n += c;\n          p -= c;\n          k -= c << 3;\n          s.bitb = b;\n          s.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          s.write = q;\n          return Z_DATA_ERROR;\n        }\n        // eslint-disable-next-line no-constant-condition\n      } while (true);\n    } while (m >= 258 && n >= 10);\n\n    // not enough input or output--restore pointers and return\n    c = z.avail_in - n;\n    c = k >> 3 < c ? k >> 3 : c;\n    n += c;\n    p -= c;\n    k -= c << 3;\n    s.bitb = b;\n    s.bitk = k;\n    z.avail_in = n;\n    z.total_in += p - z.next_in_index;\n    z.next_in_index = p;\n    s.write = q;\n    return Z_OK;\n  }\n  that.init = function (bl, bd, tl, tl_index, td, td_index) {\n    mode = START;\n    lbits = /* (byte) */bl;\n    dbits = /* (byte) */bd;\n    ltree = tl;\n    ltree_index = tl_index;\n    dtree = td;\n    dtree_index = td_index;\n    tree = null;\n  };\n  that.proc = function (s, z, r) {\n    let j; // temporary storage\n    let tindex; // temporary pointer\n    let e; // extra bits or operation\n    let b = 0; // bit buffer\n    let k = 0; // bits in bit buffer\n    let p = 0; // input data pointer\n    let n; // bytes available there\n    let q; // output win write pointer\n    let m; // bytes to end of win or read pointer\n    let f; // pointer to copy strings from\n\n    // copy input/output information to locals (UPDATE macro restores)\n    p = z.next_in_index;\n    n = z.avail_in;\n    b = s.bitb;\n    k = s.bitk;\n    q = s.write;\n    m = q < s.read ? s.read - q - 1 : s.end - q;\n\n    // process input and output based on current state\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      switch (mode) {\n        // waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n        case START:\n          // x: set up for LEN\n          if (m >= 258 && n >= 10) {\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            r = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\n            p = z.next_in_index;\n            n = z.avail_in;\n            b = s.bitb;\n            k = s.bitk;\n            q = s.write;\n            m = q < s.read ? s.read - q - 1 : s.end - q;\n            if (r != Z_OK) {\n              mode = r == Z_STREAM_END ? WASH : BADCODE;\n              break;\n            }\n          }\n          need = lbits;\n          tree = ltree;\n          tree_index = ltree_index;\n          mode = LEN;\n        /* falls through */\n        case LEN:\n          // i: get length/literal/eob next\n          j = need;\n          while (k < j) {\n            if (n !== 0) r = Z_OK;else {\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              return s.inflate_flush(z, r);\n            }\n            n--;\n            b |= (z.read_byte(p++) & 0xff) << k;\n            k += 8;\n          }\n          tindex = (tree_index + (b & inflate_mask[j])) * 3;\n          b >>>= tree[tindex + 1];\n          k -= tree[tindex + 1];\n          e = tree[tindex];\n          if (e === 0) {\n            // literal\n            lit = tree[tindex + 2];\n            mode = LIT;\n            break;\n          }\n          if ((e & 16) !== 0) {\n            // length\n            get = e & 15;\n            len = tree[tindex + 2];\n            mode = LENEXT;\n            break;\n          }\n          if ((e & 64) === 0) {\n            // next table\n            need = e;\n            tree_index = tindex / 3 + tree[tindex + 2];\n            break;\n          }\n          if ((e & 32) !== 0) {\n            // end of block\n            mode = WASH;\n            break;\n          }\n          mode = BADCODE; // invalid code\n          z.msg = \"invalid literal/length code\";\n          r = Z_DATA_ERROR;\n          s.bitb = b;\n          s.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          s.write = q;\n          return s.inflate_flush(z, r);\n        case LENEXT:\n          // i: getting length extra (have base)\n          j = get;\n          while (k < j) {\n            if (n !== 0) r = Z_OK;else {\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              return s.inflate_flush(z, r);\n            }\n            n--;\n            b |= (z.read_byte(p++) & 0xff) << k;\n            k += 8;\n          }\n          len += b & inflate_mask[j];\n          b >>= j;\n          k -= j;\n          need = dbits;\n          tree = dtree;\n          tree_index = dtree_index;\n          mode = DIST;\n        /* falls through */\n        case DIST:\n          // i: get distance next\n          j = need;\n          while (k < j) {\n            if (n !== 0) r = Z_OK;else {\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              return s.inflate_flush(z, r);\n            }\n            n--;\n            b |= (z.read_byte(p++) & 0xff) << k;\n            k += 8;\n          }\n          tindex = (tree_index + (b & inflate_mask[j])) * 3;\n          b >>= tree[tindex + 1];\n          k -= tree[tindex + 1];\n          e = tree[tindex];\n          if ((e & 16) !== 0) {\n            // distance\n            get = e & 15;\n            dist = tree[tindex + 2];\n            mode = DISTEXT;\n            break;\n          }\n          if ((e & 64) === 0) {\n            // next table\n            need = e;\n            tree_index = tindex / 3 + tree[tindex + 2];\n            break;\n          }\n          mode = BADCODE; // invalid code\n          z.msg = \"invalid distance code\";\n          r = Z_DATA_ERROR;\n          s.bitb = b;\n          s.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          s.write = q;\n          return s.inflate_flush(z, r);\n        case DISTEXT:\n          // i: getting distance extra\n          j = get;\n          while (k < j) {\n            if (n !== 0) r = Z_OK;else {\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              return s.inflate_flush(z, r);\n            }\n            n--;\n            b |= (z.read_byte(p++) & 0xff) << k;\n            k += 8;\n          }\n          dist += b & inflate_mask[j];\n          b >>= j;\n          k -= j;\n          mode = COPY;\n        /* falls through */\n        case COPY:\n          // o: copying bytes in win, waiting for space\n          f = q - dist;\n          while (f < 0) {\n            // modulo win size-\"while\" instead\n            f += s.end; // of \"if\" handles invalid distances\n          }\n          while (len !== 0) {\n            if (m === 0) {\n              if (q == s.end && s.read !== 0) {\n                q = 0;\n                m = q < s.read ? s.read - q - 1 : s.end - q;\n              }\n              if (m === 0) {\n                s.write = q;\n                r = s.inflate_flush(z, r);\n                q = s.write;\n                m = q < s.read ? s.read - q - 1 : s.end - q;\n                if (q == s.end && s.read !== 0) {\n                  q = 0;\n                  m = q < s.read ? s.read - q - 1 : s.end - q;\n                }\n                if (m === 0) {\n                  s.bitb = b;\n                  s.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  s.write = q;\n                  return s.inflate_flush(z, r);\n                }\n              }\n            }\n            s.win[q++] = s.win[f++];\n            m--;\n            if (f == s.end) f = 0;\n            len--;\n          }\n          mode = START;\n          break;\n        case LIT:\n          // o: got literal, waiting for output space\n          if (m === 0) {\n            if (q == s.end && s.read !== 0) {\n              q = 0;\n              m = q < s.read ? s.read - q - 1 : s.end - q;\n            }\n            if (m === 0) {\n              s.write = q;\n              r = s.inflate_flush(z, r);\n              q = s.write;\n              m = q < s.read ? s.read - q - 1 : s.end - q;\n              if (q == s.end && s.read !== 0) {\n                q = 0;\n                m = q < s.read ? s.read - q - 1 : s.end - q;\n              }\n              if (m === 0) {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n            }\n          }\n          r = Z_OK;\n          s.win[q++] = /* (byte) */lit;\n          m--;\n          mode = START;\n          break;\n        case WASH:\n          // o: got eob, possibly more output\n          if (k > 7) {\n            // return unused byte, if any\n            k -= 8;\n            n++;\n            p--; // can always return one\n          }\n          s.write = q;\n          r = s.inflate_flush(z, r);\n          q = s.write;\n          m = q < s.read ? s.read - q - 1 : s.end - q;\n          if (s.read != s.write) {\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n          }\n          mode = END;\n        /* falls through */\n        case END:\n          r = Z_STREAM_END;\n          s.bitb = b;\n          s.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          s.write = q;\n          return s.inflate_flush(z, r);\n        case BADCODE:\n          // x: got error\n\n          r = Z_DATA_ERROR;\n          s.bitb = b;\n          s.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          s.write = q;\n          return s.inflate_flush(z, r);\n        default:\n          r = Z_STREAM_ERROR;\n          s.bitb = b;\n          s.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          s.write = q;\n          return s.inflate_flush(z, r);\n      }\n    }\n  };\n  that.free = function () {\n    // ZFREE(z, c);\n  };\n}\n\n// InfBlocks\n\n// Table for deflate from PKZIP's appnote.txt.\nconst border = [\n// Order of the bit length code lengths\n16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\nconst TYPE = 0; // get type bits (3, including end bit)\nconst LENS = 1; // get lengths for stored\nconst STORED = 2; // processing stored block\nconst TABLE = 3; // get table lengths\nconst BTREE = 4; // get bit lengths tree for a dynamic\n// block\nconst DTREE = 5; // get length, distance trees for a\n// dynamic block\nconst CODES = 6; // processing fixed or dynamic block\nconst DRY = 7; // output remaining win bytes\nconst DONELOCKS = 8; // finished last block, done\nconst BADBLOCKS = 9; // ot a data error--stuck here\n\nfunction InfBlocks(z, w) {\n  const that = this;\n  let mode = TYPE; // current inflate_block mode\n\n  let left = 0; // if STORED, bytes left to copy\n\n  let table = 0; // table lengths (14 bits)\n  let index = 0; // index into blens (or border)\n  let blens; // bit lengths of codes\n  const bb = [0]; // bit length tree depth\n  const tb = [0]; // bit length decoding tree\n\n  const codes = new InfCodes(); // if CODES, current state\n\n  let last = 0; // true if this block is the last block\n\n  let hufts = new Int32Array(MANY * 3); // single malloc for tree space\n  const check = 0; // check on output\n  const inftree = new InfTree();\n  that.bitk = 0; // bits in bit buffer\n  that.bitb = 0; // bit buffer\n  that.win = new Uint8Array(w); // sliding win\n  that.end = w; // one byte after sliding win\n  that.read = 0; // win read pointer\n  that.write = 0; // win write pointer\n\n  that.reset = function (z, c) {\n    if (c) c[0] = check;\n    // if (mode == BTREE || mode == DTREE) {\n    // }\n    if (mode == CODES) {\n      codes.free(z);\n    }\n    mode = TYPE;\n    that.bitk = 0;\n    that.bitb = 0;\n    that.read = that.write = 0;\n  };\n  that.reset(z, null);\n\n  // copy as much as possible from the sliding win to the output area\n  that.inflate_flush = function (z, r) {\n    let n;\n    let p;\n    let q;\n\n    // local copies of source and destination pointers\n    p = z.next_out_index;\n    q = that.read;\n\n    // compute number of bytes to copy as far as end of win\n    n = /* (int) */(q <= that.write ? that.write : that.end) - q;\n    if (n > z.avail_out) n = z.avail_out;\n    if (n !== 0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // copy as far as end of win\n    z.next_out.set(that.win.subarray(q, q + n), p);\n    p += n;\n    q += n;\n\n    // see if more to copy at beginning of win\n    if (q == that.end) {\n      // wrap pointers\n      q = 0;\n      if (that.write == that.end) that.write = 0;\n\n      // compute bytes to copy\n      n = that.write - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n !== 0 && r == Z_BUF_ERROR) r = Z_OK;\n\n      // update counters\n      z.avail_out -= n;\n      z.total_out += n;\n\n      // copy\n      z.next_out.set(that.win.subarray(q, q + n), p);\n      p += n;\n      q += n;\n    }\n\n    // update pointers\n    z.next_out_index = p;\n    that.read = q;\n\n    // done\n    return r;\n  };\n  that.proc = function (z, r) {\n    let t; // temporary storage\n    let b; // bit buffer\n    let k; // bits in bit buffer\n    let p; // input data pointer\n    let n; // bytes available there\n    let q; // output win write pointer\n    let m; // bytes to end of win or read pointer\n\n    let i;\n\n    // copy input/output information to locals (UPDATE macro restores)\n    // {\n    p = z.next_in_index;\n    n = z.avail_in;\n    b = that.bitb;\n    k = that.bitk;\n    // }\n    // {\n    q = that.write;\n    m = /* (int) */q < that.read ? that.read - q - 1 : that.end - q;\n    // }\n\n    // process input based on current state\n    // DEBUG dtree\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let bl, bd, tl, td, bl_, bd_, tl_, td_;\n      switch (mode) {\n        case TYPE:\n          while (k < 3) {\n            if (n !== 0) {\n              r = Z_OK;\n            } else {\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n            n--;\n            b |= (z.read_byte(p++) & 0xff) << k;\n            k += 8;\n          }\n          t = /* (int) */b & 7;\n          last = t & 1;\n          switch (t >>> 1) {\n            case 0:\n              // stored\n              // {\n              b >>>= 3;\n              k -= 3;\n              // }\n              t = k & 7; // go to byte boundary\n\n              // {\n              b >>>= t;\n              k -= t;\n              // }\n              mode = LENS; // get length of stored block\n              break;\n            case 1:\n              // fixed\n              // {\n              bl = []; // new Array(1);\n              bd = []; // new Array(1);\n              tl = [[]]; // new Array(1);\n              td = [[]]; // new Array(1);\n\n              InfTree.inflate_trees_fixed(bl, bd, tl, td);\n              codes.init(bl[0], bd[0], tl[0], 0, td[0], 0);\n              // }\n\n              // {\n              b >>>= 3;\n              k -= 3;\n              // }\n\n              mode = CODES;\n              break;\n            case 2:\n              // dynamic\n\n              // {\n              b >>>= 3;\n              k -= 3;\n              // }\n\n              mode = TABLE;\n              break;\n            case 3:\n              // illegal\n\n              // {\n              b >>>= 3;\n              k -= 3;\n              // }\n              mode = BADBLOCKS;\n              z.msg = \"invalid block type\";\n              r = Z_DATA_ERROR;\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n          }\n          break;\n        case LENS:\n          while (k < 32) {\n            if (n !== 0) {\n              r = Z_OK;\n            } else {\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n            n--;\n            b |= (z.read_byte(p++) & 0xff) << k;\n            k += 8;\n          }\n          if ((~b >>> 16 & 0xffff) != (b & 0xffff)) {\n            mode = BADBLOCKS;\n            z.msg = \"invalid stored block lengths\";\n            r = Z_DATA_ERROR;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n          }\n          left = b & 0xffff;\n          b = k = 0; // dump bits\n          mode = left !== 0 ? STORED : last !== 0 ? DRY : TYPE;\n          break;\n        case STORED:\n          if (n === 0) {\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n          }\n          if (m === 0) {\n            if (q == that.end && that.read !== 0) {\n              q = 0;\n              m = /* (int) */q < that.read ? that.read - q - 1 : that.end - q;\n            }\n            if (m === 0) {\n              that.write = q;\n              r = that.inflate_flush(z, r);\n              q = that.write;\n              m = /* (int) */q < that.read ? that.read - q - 1 : that.end - q;\n              if (q == that.end && that.read !== 0) {\n                q = 0;\n                m = /* (int) */q < that.read ? that.read - q - 1 : that.end - q;\n              }\n              if (m === 0) {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n            }\n          }\n          r = Z_OK;\n          t = left;\n          if (t > n) t = n;\n          if (t > m) t = m;\n          that.win.set(z.read_buf(p, t), q);\n          p += t;\n          n -= t;\n          q += t;\n          m -= t;\n          if ((left -= t) !== 0) break;\n          mode = last !== 0 ? DRY : TYPE;\n          break;\n        case TABLE:\n          while (k < 14) {\n            if (n !== 0) {\n              r = Z_OK;\n            } else {\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n            n--;\n            b |= (z.read_byte(p++) & 0xff) << k;\n            k += 8;\n          }\n          table = t = b & 0x3fff;\n          if ((t & 0x1f) > 29 || (t >> 5 & 0x1f) > 29) {\n            mode = BADBLOCKS;\n            z.msg = \"too many length or distance symbols\";\n            r = Z_DATA_ERROR;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n          }\n          t = 258 + (t & 0x1f) + (t >> 5 & 0x1f);\n          if (!blens || blens.length < t) {\n            blens = []; // new Array(t);\n          } else {\n            for (i = 0; i < t; i++) {\n              blens[i] = 0;\n            }\n          }\n\n          // {\n          b >>>= 14;\n          k -= 14;\n          // }\n\n          index = 0;\n          mode = BTREE;\n        /* falls through */\n        case BTREE:\n          while (index < 4 + (table >>> 10)) {\n            while (k < 3) {\n              if (n !== 0) {\n                r = Z_OK;\n              } else {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n            blens[border[index++]] = b & 7;\n\n            // {\n            b >>>= 3;\n            k -= 3;\n            // }\n          }\n          while (index < 19) {\n            blens[border[index++]] = 0;\n          }\n          bb[0] = 7;\n          t = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\n          if (t != Z_OK) {\n            r = t;\n            if (r == Z_DATA_ERROR) {\n              blens = null;\n              mode = BADBLOCKS;\n            }\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n          }\n          index = 0;\n          mode = DTREE;\n        /* falls through */\n        case DTREE:\n          // eslint-disable-next-line no-constant-condition\n          while (true) {\n            t = table;\n            if (index >= 258 + (t & 0x1f) + (t >> 5 & 0x1f)) {\n              break;\n            }\n            let j, c;\n            t = bb[0];\n            while (k < t) {\n              if (n !== 0) {\n                r = Z_OK;\n              } else {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            // if (tb[0] == -1) {\n            // System.err.println(\"null...\");\n            // }\n\n            t = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\n            c = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\n            if (c < 16) {\n              b >>>= t;\n              k -= t;\n              blens[index++] = c;\n            } else {\n              // c == 16..18\n              i = c == 18 ? 7 : c - 14;\n              j = c == 18 ? 11 : 3;\n              while (k < t + i) {\n                if (n !== 0) {\n                  r = Z_OK;\n                } else {\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n                n--;\n                b |= (z.read_byte(p++) & 0xff) << k;\n                k += 8;\n              }\n              b >>>= t;\n              k -= t;\n              j += b & inflate_mask[i];\n              b >>>= i;\n              k -= i;\n              i = index;\n              t = table;\n              if (i + j > 258 + (t & 0x1f) + (t >> 5 & 0x1f) || c == 16 && i < 1) {\n                blens = null;\n                mode = BADBLOCKS;\n                z.msg = \"invalid bit length repeat\";\n                r = Z_DATA_ERROR;\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n              c = c == 16 ? blens[i - 1] : 0;\n              do {\n                blens[i++] = c;\n              } while (--j !== 0);\n              index = i;\n            }\n          }\n          tb[0] = -1;\n          // {\n          bl_ = []; // new Array(1);\n          bd_ = []; // new Array(1);\n          tl_ = []; // new Array(1);\n          td_ = []; // new Array(1);\n          bl_[0] = 9; // must be <= 9 for lookahead assumptions\n          bd_[0] = 6; // must be <= 9 for lookahead assumptions\n\n          t = table;\n          t = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + (t >> 5 & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\n          if (t != Z_OK) {\n            if (t == Z_DATA_ERROR) {\n              blens = null;\n              mode = BADBLOCKS;\n            }\n            r = t;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n          }\n          codes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);\n          // }\n          mode = CODES;\n        /* falls through */\n        case CODES:\n          that.bitb = b;\n          that.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          that.write = q;\n          if ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\n            return that.inflate_flush(z, r);\n          }\n          r = Z_OK;\n          codes.free(z);\n          p = z.next_in_index;\n          n = z.avail_in;\n          b = that.bitb;\n          k = that.bitk;\n          q = that.write;\n          m = /* (int) */q < that.read ? that.read - q - 1 : that.end - q;\n          if (last === 0) {\n            mode = TYPE;\n            break;\n          }\n          mode = DRY;\n        /* falls through */\n        case DRY:\n          that.write = q;\n          r = that.inflate_flush(z, r);\n          q = that.write;\n          m = /* (int) */q < that.read ? that.read - q - 1 : that.end - q;\n          if (that.read != that.write) {\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n          }\n          mode = DONELOCKS;\n        /* falls through */\n        case DONELOCKS:\n          r = Z_STREAM_END;\n          that.bitb = b;\n          that.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          that.write = q;\n          return that.inflate_flush(z, r);\n        case BADBLOCKS:\n          r = Z_DATA_ERROR;\n          that.bitb = b;\n          that.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          that.write = q;\n          return that.inflate_flush(z, r);\n        default:\n          r = Z_STREAM_ERROR;\n          that.bitb = b;\n          that.bitk = k;\n          z.avail_in = n;\n          z.total_in += p - z.next_in_index;\n          z.next_in_index = p;\n          that.write = q;\n          return that.inflate_flush(z, r);\n      }\n    }\n  };\n  that.free = function (z) {\n    that.reset(z, null);\n    that.win = null;\n    hufts = null;\n    // ZFREE(z, s);\n  };\n  that.set_dictionary = function (d, start, n) {\n    that.win.set(d.subarray(start, start + n), 0);\n    that.read = that.write = n;\n  };\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH.\n  that.sync_point = function () {\n    return mode == LENS ? 1 : 0;\n  };\n}\n\n// Inflate\n\n// preset dictionary flag in zlib header\nconst PRESET_DICT = 0x20;\nconst Z_DEFLATED = 8;\nconst METHOD = 0; // waiting for method byte\nconst FLAG = 1; // waiting for flag byte\nconst DICT4 = 2; // four dictionary check bytes to go\nconst DICT3 = 3; // three dictionary check bytes to go\nconst DICT2 = 4; // two dictionary check bytes to go\nconst DICT1 = 5; // one dictionary check byte to go\nconst DICT0 = 6; // waiting for inflateSetDictionary\nconst BLOCKS = 7; // decompressing blocks\nconst DONE = 12; // finished check, done\nconst BAD = 13; // got an error--stay here\n\nconst mark = [0, 0, 0xff, 0xff];\nfunction Inflate() {\n  const that = this;\n  that.mode = 0; // current inflate mode\n\n  // mode dependent information\n  that.method = 0; // if FLAGS, method byte\n\n  // if CHECK, check values to compare\n  that.was = [0]; // new Array(1); // computed check value\n  that.need = 0; // stream check value\n\n  // if BAD, inflateSync's marker bytes count\n  that.marker = 0;\n\n  // mode independent information\n  that.wbits = 0; // log2(win size) (8..15, defaults to 15)\n\n  // this.blocks; // current inflate_blocks state\n\n  function inflateReset(z) {\n    if (!z || !z.istate) return Z_STREAM_ERROR;\n    z.total_in = z.total_out = 0;\n    z.msg = null;\n    z.istate.mode = BLOCKS;\n    z.istate.blocks.reset(z, null);\n    return Z_OK;\n  }\n  that.inflateEnd = function (z) {\n    if (that.blocks) that.blocks.free(z);\n    that.blocks = null;\n    // ZFREE(z, z->state);\n    return Z_OK;\n  };\n  that.inflateInit = function (z, w) {\n    z.msg = null;\n    that.blocks = null;\n\n    // set win size\n    if (w < 8 || w > 15) {\n      that.inflateEnd(z);\n      return Z_STREAM_ERROR;\n    }\n    that.wbits = w;\n    z.istate.blocks = new InfBlocks(z, 1 << w);\n\n    // reset state\n    inflateReset(z);\n    return Z_OK;\n  };\n  that.inflate = function (z, f) {\n    let r;\n    let b;\n    if (!z || !z.istate || !z.next_in) return Z_STREAM_ERROR;\n    const istate = z.istate;\n    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n    r = Z_BUF_ERROR;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      switch (istate.mode) {\n        case METHOD:\n          if (z.avail_in === 0) return r;\n          r = f;\n          z.avail_in--;\n          z.total_in++;\n          if (((istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\n            istate.mode = BAD;\n            z.msg = \"unknown compression method\";\n            istate.marker = 5; // can't try inflateSync\n            break;\n          }\n          if ((istate.method >> 4) + 8 > istate.wbits) {\n            istate.mode = BAD;\n            z.msg = \"invalid win size\";\n            istate.marker = 5; // can't try inflateSync\n            break;\n          }\n          istate.mode = FLAG;\n        /* falls through */\n        case FLAG:\n          if (z.avail_in === 0) return r;\n          r = f;\n          z.avail_in--;\n          z.total_in++;\n          b = z.read_byte(z.next_in_index++) & 0xff;\n          if (((istate.method << 8) + b) % 31 !== 0) {\n            istate.mode = BAD;\n            z.msg = \"incorrect header check\";\n            istate.marker = 5; // can't try inflateSync\n            break;\n          }\n          if ((b & PRESET_DICT) === 0) {\n            istate.mode = BLOCKS;\n            break;\n          }\n          istate.mode = DICT4;\n        /* falls through */\n        case DICT4:\n          if (z.avail_in === 0) return r;\n          r = f;\n          z.avail_in--;\n          z.total_in++;\n          istate.need = (z.read_byte(z.next_in_index++) & 0xff) << 24 & 0xff000000;\n          istate.mode = DICT3;\n        /* falls through */\n        case DICT3:\n          if (z.avail_in === 0) return r;\n          r = f;\n          z.avail_in--;\n          z.total_in++;\n          istate.need += (z.read_byte(z.next_in_index++) & 0xff) << 16 & 0xff0000;\n          istate.mode = DICT2;\n        /* falls through */\n        case DICT2:\n          if (z.avail_in === 0) return r;\n          r = f;\n          z.avail_in--;\n          z.total_in++;\n          istate.need += (z.read_byte(z.next_in_index++) & 0xff) << 8 & 0xff00;\n          istate.mode = DICT1;\n        /* falls through */\n        case DICT1:\n          if (z.avail_in === 0) return r;\n          r = f;\n          z.avail_in--;\n          z.total_in++;\n          istate.need += z.read_byte(z.next_in_index++) & 0xff;\n          istate.mode = DICT0;\n          return Z_NEED_DICT;\n        case DICT0:\n          istate.mode = BAD;\n          z.msg = \"need dictionary\";\n          istate.marker = 0; // can try inflateSync\n          return Z_STREAM_ERROR;\n        case BLOCKS:\n          r = istate.blocks.proc(z, r);\n          if (r == Z_DATA_ERROR) {\n            istate.mode = BAD;\n            istate.marker = 0; // can try inflateSync\n            break;\n          }\n          if (r == Z_OK) {\n            r = f;\n          }\n          if (r != Z_STREAM_END) {\n            return r;\n          }\n          r = f;\n          istate.blocks.reset(z, istate.was);\n          istate.mode = DONE;\n        /* falls through */\n        case DONE:\n          z.avail_in = 0;\n          return Z_STREAM_END;\n        case BAD:\n          return Z_DATA_ERROR;\n        default:\n          return Z_STREAM_ERROR;\n      }\n    }\n  };\n  that.inflateSetDictionary = function (z, dictionary, dictLength) {\n    let index = 0,\n      length = dictLength;\n    if (!z || !z.istate || z.istate.mode != DICT0) return Z_STREAM_ERROR;\n    const istate = z.istate;\n    if (length >= 1 << istate.wbits) {\n      length = (1 << istate.wbits) - 1;\n      index = dictLength - length;\n    }\n    istate.blocks.set_dictionary(dictionary, index, length);\n    istate.mode = BLOCKS;\n    return Z_OK;\n  };\n  that.inflateSync = function (z) {\n    let n; // number of bytes to look at\n    let p; // pointer to bytes\n    let m; // number of marker bytes found in a row\n    let r, w; // temporaries to save total_in and total_out\n\n    // set up\n    if (!z || !z.istate) return Z_STREAM_ERROR;\n    const istate = z.istate;\n    if (istate.mode != BAD) {\n      istate.mode = BAD;\n      istate.marker = 0;\n    }\n    if ((n = z.avail_in) === 0) return Z_BUF_ERROR;\n    p = z.next_in_index;\n    m = istate.marker;\n\n    // search\n    while (n !== 0 && m < 4) {\n      if (z.read_byte(p) == mark[m]) {\n        m++;\n      } else if (z.read_byte(p) !== 0) {\n        m = 0;\n      } else {\n        m = 4 - m;\n      }\n      p++;\n      n--;\n    }\n\n    // restore\n    z.total_in += p - z.next_in_index;\n    z.next_in_index = p;\n    z.avail_in = n;\n    istate.marker = m;\n\n    // return no joy or set up to restart on a new block\n    if (m != 4) {\n      return Z_DATA_ERROR;\n    }\n    r = z.total_in;\n    w = z.total_out;\n    inflateReset(z);\n    z.total_in = r;\n    z.total_out = w;\n    istate.mode = BLOCKS;\n    return Z_OK;\n  };\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n  // implementation to provide an additional safety check. PPP uses\n  // Z_SYNC_FLUSH\n  // but removes the length bytes of the resulting empty stored block. When\n  // decompressing, PPP checks that at the end of input packet, inflate is\n  // waiting for these length bytes.\n  that.inflateSyncPoint = function (z) {\n    if (!z || !z.istate || !z.istate.blocks) return Z_STREAM_ERROR;\n    return z.istate.blocks.sync_point();\n  };\n}\n\n// ZStream\n\nfunction ZStream() {}\nZStream.prototype = {\n  inflateInit(bits) {\n    const that = this;\n    that.istate = new Inflate();\n    if (!bits) bits = MAX_BITS;\n    return that.istate.inflateInit(that, bits);\n  },\n  inflate(f) {\n    const that = this;\n    if (!that.istate) return Z_STREAM_ERROR;\n    return that.istate.inflate(that, f);\n  },\n  inflateEnd() {\n    const that = this;\n    if (!that.istate) return Z_STREAM_ERROR;\n    const ret = that.istate.inflateEnd(that);\n    that.istate = null;\n    return ret;\n  },\n  inflateSync() {\n    const that = this;\n    if (!that.istate) return Z_STREAM_ERROR;\n    return that.istate.inflateSync(that);\n  },\n  inflateSetDictionary(dictionary, dictLength) {\n    const that = this;\n    if (!that.istate) return Z_STREAM_ERROR;\n    return that.istate.inflateSetDictionary(that, dictionary, dictLength);\n  },\n  read_byte(start) {\n    const that = this;\n    return that.next_in[start];\n  },\n  read_buf(start, size) {\n    const that = this;\n    return that.next_in.subarray(start, start + size);\n  }\n};\n\n// Inflater\n\nfunction ZipInflate(options) {\n  const that = this;\n  const z = new ZStream();\n  const bufsize = options && options.chunkSize ? Math.floor(options.chunkSize * 2) : 128 * 1024;\n  const flush = Z_NO_FLUSH;\n  const buf = new Uint8Array(bufsize);\n  let nomoreinput = false;\n  z.inflateInit();\n  z.next_out = buf;\n  that.append = function (data, onprogress) {\n    const buffers = [];\n    let err,\n      array,\n      lastIndex = 0,\n      bufferIndex = 0,\n      bufferSize = 0;\n    if (data.length === 0) return;\n    z.next_in_index = 0;\n    z.next_in = data;\n    z.avail_in = data.length;\n    do {\n      z.next_out_index = 0;\n      z.avail_out = bufsize;\n      if (z.avail_in === 0 && !nomoreinput) {\n        // if buffer is empty and more input is available, refill it\n        z.next_in_index = 0;\n        nomoreinput = true;\n      }\n      err = z.inflate(flush);\n      if (nomoreinput && err === Z_BUF_ERROR) {\n        if (z.avail_in !== 0) throw new Error(\"inflating: bad input\");\n      } else if (err !== Z_OK && err !== Z_STREAM_END) throw new Error(\"inflating: \" + z.msg);\n      if ((nomoreinput || err === Z_STREAM_END) && z.avail_in === data.length) throw new Error(\"inflating: bad input\");\n      if (z.next_out_index) if (z.next_out_index === bufsize) buffers.push(new Uint8Array(buf));else buffers.push(buf.subarray(0, z.next_out_index));\n      bufferSize += z.next_out_index;\n      if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n        onprogress(z.next_in_index);\n        lastIndex = z.next_in_index;\n      }\n    } while (z.avail_in > 0 || z.avail_out === 0);\n    if (buffers.length > 1) {\n      array = new Uint8Array(bufferSize);\n      buffers.forEach(function (chunk) {\n        array.set(chunk, bufferIndex);\n        bufferIndex += chunk.length;\n      });\n    } else {\n      array = buffers[0] ? new Uint8Array(buffers[0]) : new Uint8Array();\n    }\n    return array;\n  };\n  that.flush = function () {\n    z.inflateEnd();\n  };\n}\nexport { ZipInflate as Inflate };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst MAX_32_BITS = 0xffffffff;\nconst MAX_16_BITS = 0xffff;\nconst COMPRESSION_METHOD_DEFLATE = 0x08;\nconst COMPRESSION_METHOD_STORE = 0x00;\nconst COMPRESSION_METHOD_AES = 0x63;\nconst LOCAL_FILE_HEADER_SIGNATURE = 0x04034b50;\nconst SPLIT_ZIP_FILE_SIGNATURE = 0x08074b50;\nconst DATA_DESCRIPTOR_RECORD_SIGNATURE = SPLIT_ZIP_FILE_SIGNATURE;\nconst CENTRAL_FILE_HEADER_SIGNATURE = 0x02014b50;\nconst END_OF_CENTRAL_DIR_SIGNATURE = 0x06054b50;\nconst ZIP64_END_OF_CENTRAL_DIR_SIGNATURE = 0x06064b50;\nconst ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE = 0x07064b50;\nconst END_OF_CENTRAL_DIR_LENGTH = 22;\nconst ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH = 20;\nconst ZIP64_END_OF_CENTRAL_DIR_LENGTH = 56;\nconst ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH = END_OF_CENTRAL_DIR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LENGTH;\nconst EXTRAFIELD_TYPE_ZIP64 = 0x0001;\nconst EXTRAFIELD_TYPE_AES = 0x9901;\nconst EXTRAFIELD_TYPE_NTFS = 0x000a;\nconst EXTRAFIELD_TYPE_NTFS_TAG1 = 0x0001;\nconst EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP = 0x5455;\nconst EXTRAFIELD_TYPE_UNICODE_PATH = 0x7075;\nconst EXTRAFIELD_TYPE_UNICODE_COMMENT = 0x6375;\nconst EXTRAFIELD_TYPE_USDZ = 0x1986;\nconst BITFLAG_ENCRYPTED = 0x01;\nconst BITFLAG_LEVEL = 0x06;\nconst BITFLAG_DATA_DESCRIPTOR = 0x0008;\nconst BITFLAG_LANG_ENCODING_FLAG = 0x0800;\nconst FILE_ATTR_MSDOS_DIR_MASK = 0x10;\nconst VERSION_DEFLATE = 0x14;\nconst VERSION_ZIP64 = 0x2D;\nconst VERSION_AES = 0x33;\nconst DIRECTORY_SIGNATURE = \"/\";\nconst MAX_DATE = new Date(2107, 11, 31);\nconst MIN_DATE = new Date(1980, 0, 1);\nconst UNDEFINED_VALUE = undefined;\nconst UNDEFINED_TYPE = \"undefined\";\nconst FUNCTION_TYPE = \"function\";\nexport { MAX_32_BITS, MAX_16_BITS, COMPRESSION_METHOD_DEFLATE, COMPRESSION_METHOD_STORE, COMPRESSION_METHOD_AES, SPLIT_ZIP_FILE_SIGNATURE, LOCAL_FILE_HEADER_SIGNATURE, DATA_DESCRIPTOR_RECORD_SIGNATURE, CENTRAL_FILE_HEADER_SIGNATURE, END_OF_CENTRAL_DIR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_SIGNATURE, EXTRAFIELD_TYPE_ZIP64, EXTRAFIELD_TYPE_AES, EXTRAFIELD_TYPE_NTFS, EXTRAFIELD_TYPE_NTFS_TAG1, EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP, EXTRAFIELD_TYPE_UNICODE_PATH, EXTRAFIELD_TYPE_UNICODE_COMMENT, EXTRAFIELD_TYPE_USDZ, END_OF_CENTRAL_DIR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH, BITFLAG_ENCRYPTED, BITFLAG_LEVEL, BITFLAG_DATA_DESCRIPTOR, BITFLAG_LANG_ENCODING_FLAG, FILE_ATTR_MSDOS_DIR_MASK, VERSION_DEFLATE, VERSION_ZIP64, VERSION_AES, DIRECTORY_SIGNATURE, MIN_DATE, MAX_DATE, UNDEFINED_VALUE, UNDEFINED_TYPE, FUNCTION_TYPE };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n\nexport { StreamAdapter };\nclass StreamAdapter {\n  constructor(Codec) {\n    return class extends TransformStream {\n      constructor(_format, options) {\n        const codec = new Codec(options);\n        super({\n          transform(chunk, controller) {\n            controller.enqueue(codec.append(chunk));\n          },\n          flush(controller) {\n            const chunk = codec.flush();\n            if (chunk) {\n              controller.enqueue(chunk);\n            }\n          }\n        });\n      }\n    };\n  }\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global navigator, CompressionStream, DecompressionStream */\n\nimport { UNDEFINED_VALUE, UNDEFINED_TYPE } from \"./constants.js\";\nimport { StreamAdapter } from \"./streams/stream-adapter.js\";\nconst MINIMUM_CHUNK_SIZE = 64;\nlet maxWorkers = 2;\ntry {\n  if (typeof navigator != UNDEFINED_TYPE && navigator.hardwareConcurrency) {\n    maxWorkers = navigator.hardwareConcurrency;\n  }\n} catch (_error) {\n  // ignored\n}\nconst DEFAULT_CONFIGURATION = {\n  chunkSize: 512 * 1024,\n  maxWorkers,\n  terminateWorkerTimeout: 5000,\n  useWebWorkers: true,\n  useCompressionStream: true,\n  workerScripts: UNDEFINED_VALUE,\n  CompressionStreamNative: typeof CompressionStream != UNDEFINED_TYPE && CompressionStream,\n  DecompressionStreamNative: typeof DecompressionStream != UNDEFINED_TYPE && DecompressionStream\n};\nconst config = Object.assign({}, DEFAULT_CONFIGURATION);\nexport { configure, getConfiguration, getChunkSize };\nfunction getConfiguration() {\n  return config;\n}\nfunction getChunkSize(config) {\n  return Math.max(config.chunkSize, MINIMUM_CHUNK_SIZE);\n}\nfunction configure(configuration) {\n  const {\n    baseURL,\n    chunkSize,\n    maxWorkers,\n    terminateWorkerTimeout,\n    useCompressionStream,\n    useWebWorkers,\n    Deflate,\n    Inflate,\n    CompressionStream,\n    DecompressionStream,\n    workerScripts\n  } = configuration;\n  setIfDefined(\"baseURL\", baseURL);\n  setIfDefined(\"chunkSize\", chunkSize);\n  setIfDefined(\"maxWorkers\", maxWorkers);\n  setIfDefined(\"terminateWorkerTimeout\", terminateWorkerTimeout);\n  setIfDefined(\"useCompressionStream\", useCompressionStream);\n  setIfDefined(\"useWebWorkers\", useWebWorkers);\n  if (Deflate) {\n    config.CompressionStream = new StreamAdapter(Deflate);\n  }\n  if (Inflate) {\n    config.DecompressionStream = new StreamAdapter(Inflate);\n  }\n  setIfDefined(\"CompressionStream\", CompressionStream);\n  setIfDefined(\"DecompressionStream\", DecompressionStream);\n  if (workerScripts !== UNDEFINED_VALUE) {\n    const {\n      deflate,\n      inflate\n    } = workerScripts;\n    if (deflate || inflate) {\n      if (!config.workerScripts) {\n        config.workerScripts = {};\n      }\n    }\n    if (deflate) {\n      if (!Array.isArray(deflate)) {\n        throw new Error(\"workerScripts.deflate must be an array\");\n      }\n      config.workerScripts.deflate = deflate;\n    }\n    if (inflate) {\n      if (!Array.isArray(inflate)) {\n        throw new Error(\"workerScripts.inflate must be an array\");\n      }\n      config.workerScripts.inflate = inflate;\n    }\n  }\n}\nfunction setIfDefined(propertyName, propertyValue) {\n  if (propertyValue !== UNDEFINED_VALUE) {\n    config[propertyName] = propertyValue;\n  }\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// deno-lint-ignore-file no-prototype-builtins\n\nimport { getMimeType as getDefaultMimeType } from \"./default-mime-type.js\";\nconst table = {\n  \"application\": {\n    \"andrew-inset\": \"ez\",\n    \"annodex\": \"anx\",\n    \"atom+xml\": \"atom\",\n    \"atomcat+xml\": \"atomcat\",\n    \"atomserv+xml\": \"atomsrv\",\n    \"bbolin\": \"lin\",\n    \"cu-seeme\": \"cu\",\n    \"davmount+xml\": \"davmount\",\n    \"dsptype\": \"tsp\",\n    \"ecmascript\": [\"es\", \"ecma\"],\n    \"futuresplash\": \"spl\",\n    \"hta\": \"hta\",\n    \"java-archive\": \"jar\",\n    \"java-serialized-object\": \"ser\",\n    \"java-vm\": \"class\",\n    \"m3g\": \"m3g\",\n    \"mac-binhex40\": \"hqx\",\n    \"mathematica\": [\"nb\", \"ma\", \"mb\"],\n    \"msaccess\": \"mdb\",\n    \"msword\": [\"doc\", \"dot\", \"wiz\"],\n    \"mxf\": \"mxf\",\n    \"oda\": \"oda\",\n    \"ogg\": \"ogx\",\n    \"pdf\": \"pdf\",\n    \"pgp-keys\": \"key\",\n    \"pgp-signature\": [\"asc\", \"sig\"],\n    \"pics-rules\": \"prf\",\n    \"postscript\": [\"ps\", \"ai\", \"eps\", \"epsi\", \"epsf\", \"eps2\", \"eps3\"],\n    \"rar\": \"rar\",\n    \"rdf+xml\": \"rdf\",\n    \"rss+xml\": \"rss\",\n    \"rtf\": \"rtf\",\n    \"xhtml+xml\": [\"xhtml\", \"xht\"],\n    \"xml\": [\"xml\", \"xsl\", \"xsd\", \"xpdl\"],\n    \"xspf+xml\": \"xspf\",\n    \"zip\": \"zip\",\n    \"vnd.android.package-archive\": \"apk\",\n    \"vnd.cinderella\": \"cdy\",\n    \"vnd.google-earth.kml+xml\": \"kml\",\n    \"vnd.google-earth.kmz\": \"kmz\",\n    \"vnd.mozilla.xul+xml\": \"xul\",\n    \"vnd.ms-excel\": [\"xls\", \"xlb\", \"xlt\", \"xlm\", \"xla\", \"xlc\", \"xlw\"],\n    \"vnd.ms-pki.seccat\": \"cat\",\n    \"vnd.ms-pki.stl\": \"stl\",\n    \"vnd.ms-powerpoint\": [\"ppt\", \"pps\", \"pot\", \"ppa\", \"pwz\"],\n    \"vnd.oasis.opendocument.chart\": \"odc\",\n    \"vnd.oasis.opendocument.database\": \"odb\",\n    \"vnd.oasis.opendocument.formula\": \"odf\",\n    \"vnd.oasis.opendocument.graphics\": \"odg\",\n    \"vnd.oasis.opendocument.graphics-template\": \"otg\",\n    \"vnd.oasis.opendocument.image\": \"odi\",\n    \"vnd.oasis.opendocument.presentation\": \"odp\",\n    \"vnd.oasis.opendocument.presentation-template\": \"otp\",\n    \"vnd.oasis.opendocument.spreadsheet\": \"ods\",\n    \"vnd.oasis.opendocument.spreadsheet-template\": \"ots\",\n    \"vnd.oasis.opendocument.text\": \"odt\",\n    \"vnd.oasis.opendocument.text-master\": [\"odm\", \"otm\"],\n    \"vnd.oasis.opendocument.text-template\": \"ott\",\n    \"vnd.oasis.opendocument.text-web\": \"oth\",\n    \"vnd.openxmlformats-officedocument.spreadsheetml.sheet\": \"xlsx\",\n    \"vnd.openxmlformats-officedocument.spreadsheetml.template\": \"xltx\",\n    \"vnd.openxmlformats-officedocument.presentationml.presentation\": \"pptx\",\n    \"vnd.openxmlformats-officedocument.presentationml.slideshow\": \"ppsx\",\n    \"vnd.openxmlformats-officedocument.presentationml.template\": \"potx\",\n    \"vnd.openxmlformats-officedocument.wordprocessingml.document\": \"docx\",\n    \"vnd.openxmlformats-officedocument.wordprocessingml.template\": \"dotx\",\n    \"vnd.smaf\": \"mmf\",\n    \"vnd.stardivision.calc\": \"sdc\",\n    \"vnd.stardivision.chart\": \"sds\",\n    \"vnd.stardivision.draw\": \"sda\",\n    \"vnd.stardivision.impress\": \"sdd\",\n    \"vnd.stardivision.math\": [\"sdf\", \"smf\"],\n    \"vnd.stardivision.writer\": [\"sdw\", \"vor\"],\n    \"vnd.stardivision.writer-global\": \"sgl\",\n    \"vnd.sun.xml.calc\": \"sxc\",\n    \"vnd.sun.xml.calc.template\": \"stc\",\n    \"vnd.sun.xml.draw\": \"sxd\",\n    \"vnd.sun.xml.draw.template\": \"std\",\n    \"vnd.sun.xml.impress\": \"sxi\",\n    \"vnd.sun.xml.impress.template\": \"sti\",\n    \"vnd.sun.xml.math\": \"sxm\",\n    \"vnd.sun.xml.writer\": \"sxw\",\n    \"vnd.sun.xml.writer.global\": \"sxg\",\n    \"vnd.sun.xml.writer.template\": \"stw\",\n    \"vnd.symbian.install\": [\"sis\", \"sisx\"],\n    \"vnd.visio\": [\"vsd\", \"vst\", \"vss\", \"vsw\", \"vsdx\", \"vssx\", \"vstx\", \"vssm\", \"vstm\"],\n    \"vnd.wap.wbxml\": \"wbxml\",\n    \"vnd.wap.wmlc\": \"wmlc\",\n    \"vnd.wap.wmlscriptc\": \"wmlsc\",\n    \"vnd.wordperfect\": \"wpd\",\n    \"vnd.wordperfect5.1\": \"wp5\",\n    \"x-123\": \"wk\",\n    \"x-7z-compressed\": \"7z\",\n    \"x-abiword\": \"abw\",\n    \"x-apple-diskimage\": \"dmg\",\n    \"x-bcpio\": \"bcpio\",\n    \"x-bittorrent\": \"torrent\",\n    \"x-cbr\": [\"cbr\", \"cba\", \"cbt\", \"cb7\"],\n    \"x-cbz\": \"cbz\",\n    \"x-cdf\": [\"cdf\", \"cda\"],\n    \"x-cdlink\": \"vcd\",\n    \"x-chess-pgn\": \"pgn\",\n    \"x-cpio\": \"cpio\",\n    \"x-csh\": \"csh\",\n    \"x-director\": [\"dir\", \"dxr\", \"cst\", \"cct\", \"cxt\", \"w3d\", \"fgd\", \"swa\"],\n    \"x-dms\": \"dms\",\n    \"x-doom\": \"wad\",\n    \"x-dvi\": \"dvi\",\n    \"x-httpd-eruby\": \"rhtml\",\n    \"x-font\": \"pcf.Z\",\n    \"x-freemind\": \"mm\",\n    \"x-gnumeric\": \"gnumeric\",\n    \"x-go-sgf\": \"sgf\",\n    \"x-graphing-calculator\": \"gcf\",\n    \"x-gtar\": [\"gtar\", \"taz\"],\n    \"x-hdf\": \"hdf\",\n    \"x-httpd-php\": [\"phtml\", \"pht\", \"php\"],\n    \"x-httpd-php-source\": \"phps\",\n    \"x-httpd-php3\": \"php3\",\n    \"x-httpd-php3-preprocessed\": \"php3p\",\n    \"x-httpd-php4\": \"php4\",\n    \"x-httpd-php5\": \"php5\",\n    \"x-ica\": \"ica\",\n    \"x-info\": \"info\",\n    \"x-internet-signup\": [\"ins\", \"isp\"],\n    \"x-iphone\": \"iii\",\n    \"x-iso9660-image\": \"iso\",\n    \"x-java-jnlp-file\": \"jnlp\",\n    \"x-jmol\": \"jmz\",\n    \"x-killustrator\": \"kil\",\n    \"x-latex\": \"latex\",\n    \"x-lyx\": \"lyx\",\n    \"x-lzx\": \"lzx\",\n    \"x-maker\": [\"frm\", \"fb\", \"fbdoc\"],\n    \"x-ms-wmd\": \"wmd\",\n    \"x-msdos-program\": [\"com\", \"exe\", \"bat\", \"dll\"],\n    \"x-netcdf\": [\"nc\"],\n    \"x-ns-proxy-autoconfig\": [\"pac\", \"dat\"],\n    \"x-nwc\": \"nwc\",\n    \"x-object\": \"o\",\n    \"x-oz-application\": \"oza\",\n    \"x-pkcs7-certreqresp\": \"p7r\",\n    \"x-python-code\": [\"pyc\", \"pyo\"],\n    \"x-qgis\": [\"qgs\", \"shp\", \"shx\"],\n    \"x-quicktimeplayer\": \"qtl\",\n    \"x-redhat-package-manager\": [\"rpm\", \"rpa\"],\n    \"x-ruby\": \"rb\",\n    \"x-sh\": \"sh\",\n    \"x-shar\": \"shar\",\n    \"x-shockwave-flash\": [\"swf\", \"swfl\"],\n    \"x-silverlight\": \"scr\",\n    \"x-stuffit\": \"sit\",\n    \"x-sv4cpio\": \"sv4cpio\",\n    \"x-sv4crc\": \"sv4crc\",\n    \"x-tar\": \"tar\",\n    \"x-tex-gf\": \"gf\",\n    \"x-tex-pk\": \"pk\",\n    \"x-texinfo\": [\"texinfo\", \"texi\"],\n    \"x-trash\": [\"~\", \"%\", \"bak\", \"old\", \"sik\"],\n    \"x-ustar\": \"ustar\",\n    \"x-wais-source\": \"src\",\n    \"x-wingz\": \"wz\",\n    \"x-x509-ca-cert\": [\"crt\", \"der\", \"cer\"],\n    \"x-xcf\": \"xcf\",\n    \"x-xfig\": \"fig\",\n    \"x-xpinstall\": \"xpi\",\n    \"applixware\": \"aw\",\n    \"atomsvc+xml\": \"atomsvc\",\n    \"ccxml+xml\": \"ccxml\",\n    \"cdmi-capability\": \"cdmia\",\n    \"cdmi-container\": \"cdmic\",\n    \"cdmi-domain\": \"cdmid\",\n    \"cdmi-object\": \"cdmio\",\n    \"cdmi-queue\": \"cdmiq\",\n    \"docbook+xml\": \"dbk\",\n    \"dssc+der\": \"dssc\",\n    \"dssc+xml\": \"xdssc\",\n    \"emma+xml\": \"emma\",\n    \"epub+zip\": \"epub\",\n    \"exi\": \"exi\",\n    \"font-tdpfr\": \"pfr\",\n    \"gml+xml\": \"gml\",\n    \"gpx+xml\": \"gpx\",\n    \"gxf\": \"gxf\",\n    \"hyperstudio\": \"stk\",\n    \"inkml+xml\": [\"ink\", \"inkml\"],\n    \"ipfix\": \"ipfix\",\n    \"jsonml+json\": \"jsonml\",\n    \"lost+xml\": \"lostxml\",\n    \"mads+xml\": \"mads\",\n    \"marc\": \"mrc\",\n    \"marcxml+xml\": \"mrcx\",\n    \"mathml+xml\": [\"mathml\", \"mml\"],\n    \"mbox\": \"mbox\",\n    \"mediaservercontrol+xml\": \"mscml\",\n    \"metalink+xml\": \"metalink\",\n    \"metalink4+xml\": \"meta4\",\n    \"mets+xml\": \"mets\",\n    \"mods+xml\": \"mods\",\n    \"mp21\": [\"m21\", \"mp21\"],\n    \"mp4\": \"mp4s\",\n    \"oebps-package+xml\": \"opf\",\n    \"omdoc+xml\": \"omdoc\",\n    \"onenote\": [\"onetoc\", \"onetoc2\", \"onetmp\", \"onepkg\"],\n    \"oxps\": \"oxps\",\n    \"patch-ops-error+xml\": \"xer\",\n    \"pgp-encrypted\": \"pgp\",\n    \"pkcs10\": \"p10\",\n    \"pkcs7-mime\": [\"p7m\", \"p7c\"],\n    \"pkcs7-signature\": \"p7s\",\n    \"pkcs8\": \"p8\",\n    \"pkix-attr-cert\": \"ac\",\n    \"pkix-crl\": \"crl\",\n    \"pkix-pkipath\": \"pkipath\",\n    \"pkixcmp\": \"pki\",\n    \"pls+xml\": \"pls\",\n    \"prs.cww\": \"cww\",\n    \"pskc+xml\": \"pskcxml\",\n    \"reginfo+xml\": \"rif\",\n    \"relax-ng-compact-syntax\": \"rnc\",\n    \"resource-lists+xml\": \"rl\",\n    \"resource-lists-diff+xml\": \"rld\",\n    \"rls-services+xml\": \"rs\",\n    \"rpki-ghostbusters\": \"gbr\",\n    \"rpki-manifest\": \"mft\",\n    \"rpki-roa\": \"roa\",\n    \"rsd+xml\": \"rsd\",\n    \"sbml+xml\": \"sbml\",\n    \"scvp-cv-request\": \"scq\",\n    \"scvp-cv-response\": \"scs\",\n    \"scvp-vp-request\": \"spq\",\n    \"scvp-vp-response\": \"spp\",\n    \"sdp\": \"sdp\",\n    \"set-payment-initiation\": \"setpay\",\n    \"set-registration-initiation\": \"setreg\",\n    \"shf+xml\": \"shf\",\n    \"sparql-query\": \"rq\",\n    \"sparql-results+xml\": \"srx\",\n    \"srgs\": \"gram\",\n    \"srgs+xml\": \"grxml\",\n    \"sru+xml\": \"sru\",\n    \"ssdl+xml\": \"ssdl\",\n    \"ssml+xml\": \"ssml\",\n    \"tei+xml\": [\"tei\", \"teicorpus\"],\n    \"thraud+xml\": \"tfi\",\n    \"timestamped-data\": \"tsd\",\n    \"vnd.3gpp.pic-bw-large\": \"plb\",\n    \"vnd.3gpp.pic-bw-small\": \"psb\",\n    \"vnd.3gpp.pic-bw-var\": \"pvb\",\n    \"vnd.3gpp2.tcap\": \"tcap\",\n    \"vnd.3m.post-it-notes\": \"pwn\",\n    \"vnd.accpac.simply.aso\": \"aso\",\n    \"vnd.accpac.simply.imp\": \"imp\",\n    \"vnd.acucobol\": \"acu\",\n    \"vnd.acucorp\": [\"atc\", \"acutc\"],\n    \"vnd.adobe.air-application-installer-package+zip\": \"air\",\n    \"vnd.adobe.formscentral.fcdt\": \"fcdt\",\n    \"vnd.adobe.fxp\": [\"fxp\", \"fxpl\"],\n    \"vnd.adobe.xdp+xml\": \"xdp\",\n    \"vnd.adobe.xfdf\": \"xfdf\",\n    \"vnd.ahead.space\": \"ahead\",\n    \"vnd.airzip.filesecure.azf\": \"azf\",\n    \"vnd.airzip.filesecure.azs\": \"azs\",\n    \"vnd.amazon.ebook\": \"azw\",\n    \"vnd.americandynamics.acc\": \"acc\",\n    \"vnd.amiga.ami\": \"ami\",\n    \"vnd.anser-web-certificate-issue-initiation\": \"cii\",\n    \"vnd.anser-web-funds-transfer-initiation\": \"fti\",\n    \"vnd.antix.game-component\": \"atx\",\n    \"vnd.apple.installer+xml\": \"mpkg\",\n    \"vnd.apple.mpegurl\": \"m3u8\",\n    \"vnd.aristanetworks.swi\": \"swi\",\n    \"vnd.astraea-software.iota\": \"iota\",\n    \"vnd.audiograph\": \"aep\",\n    \"vnd.blueice.multipass\": \"mpm\",\n    \"vnd.bmi\": \"bmi\",\n    \"vnd.businessobjects\": \"rep\",\n    \"vnd.chemdraw+xml\": \"cdxml\",\n    \"vnd.chipnuts.karaoke-mmd\": \"mmd\",\n    \"vnd.claymore\": \"cla\",\n    \"vnd.cloanto.rp9\": \"rp9\",\n    \"vnd.clonk.c4group\": [\"c4g\", \"c4d\", \"c4f\", \"c4p\", \"c4u\"],\n    \"vnd.cluetrust.cartomobile-config\": \"c11amc\",\n    \"vnd.cluetrust.cartomobile-config-pkg\": \"c11amz\",\n    \"vnd.commonspace\": \"csp\",\n    \"vnd.contact.cmsg\": \"cdbcmsg\",\n    \"vnd.cosmocaller\": \"cmc\",\n    \"vnd.crick.clicker\": \"clkx\",\n    \"vnd.crick.clicker.keyboard\": \"clkk\",\n    \"vnd.crick.clicker.palette\": \"clkp\",\n    \"vnd.crick.clicker.template\": \"clkt\",\n    \"vnd.crick.clicker.wordbank\": \"clkw\",\n    \"vnd.criticaltools.wbs+xml\": \"wbs\",\n    \"vnd.ctc-posml\": \"pml\",\n    \"vnd.cups-ppd\": \"ppd\",\n    \"vnd.curl.car\": \"car\",\n    \"vnd.curl.pcurl\": \"pcurl\",\n    \"vnd.dart\": \"dart\",\n    \"vnd.data-vision.rdz\": \"rdz\",\n    \"vnd.dece.data\": [\"uvf\", \"uvvf\", \"uvd\", \"uvvd\"],\n    \"vnd.dece.ttml+xml\": [\"uvt\", \"uvvt\"],\n    \"vnd.dece.unspecified\": [\"uvx\", \"uvvx\"],\n    \"vnd.dece.zip\": [\"uvz\", \"uvvz\"],\n    \"vnd.denovo.fcselayout-link\": \"fe_launch\",\n    \"vnd.dna\": \"dna\",\n    \"vnd.dolby.mlp\": \"mlp\",\n    \"vnd.dpgraph\": \"dpg\",\n    \"vnd.dreamfactory\": \"dfac\",\n    \"vnd.ds-keypoint\": \"kpxx\",\n    \"vnd.dvb.ait\": \"ait\",\n    \"vnd.dvb.service\": \"svc\",\n    \"vnd.dynageo\": \"geo\",\n    \"vnd.ecowin.chart\": \"mag\",\n    \"vnd.enliven\": \"nml\",\n    \"vnd.epson.esf\": \"esf\",\n    \"vnd.epson.msf\": \"msf\",\n    \"vnd.epson.quickanime\": \"qam\",\n    \"vnd.epson.salt\": \"slt\",\n    \"vnd.epson.ssf\": \"ssf\",\n    \"vnd.eszigno3+xml\": [\"es3\", \"et3\"],\n    \"vnd.ezpix-album\": \"ez2\",\n    \"vnd.ezpix-package\": \"ez3\",\n    \"vnd.fdf\": \"fdf\",\n    \"vnd.fdsn.mseed\": \"mseed\",\n    \"vnd.fdsn.seed\": [\"seed\", \"dataless\"],\n    \"vnd.flographit\": \"gph\",\n    \"vnd.fluxtime.clip\": \"ftc\",\n    \"vnd.framemaker\": [\"fm\", \"frame\", \"maker\", \"book\"],\n    \"vnd.frogans.fnc\": \"fnc\",\n    \"vnd.frogans.ltf\": \"ltf\",\n    \"vnd.fsc.weblaunch\": \"fsc\",\n    \"vnd.fujitsu.oasys\": \"oas\",\n    \"vnd.fujitsu.oasys2\": \"oa2\",\n    \"vnd.fujitsu.oasys3\": \"oa3\",\n    \"vnd.fujitsu.oasysgp\": \"fg5\",\n    \"vnd.fujitsu.oasysprs\": \"bh2\",\n    \"vnd.fujixerox.ddd\": \"ddd\",\n    \"vnd.fujixerox.docuworks\": \"xdw\",\n    \"vnd.fujixerox.docuworks.binder\": \"xbd\",\n    \"vnd.fuzzysheet\": \"fzs\",\n    \"vnd.genomatix.tuxedo\": \"txd\",\n    \"vnd.geogebra.file\": \"ggb\",\n    \"vnd.geogebra.tool\": \"ggt\",\n    \"vnd.geometry-explorer\": [\"gex\", \"gre\"],\n    \"vnd.geonext\": \"gxt\",\n    \"vnd.geoplan\": \"g2w\",\n    \"vnd.geospace\": \"g3w\",\n    \"vnd.gmx\": \"gmx\",\n    \"vnd.grafeq\": [\"gqf\", \"gqs\"],\n    \"vnd.groove-account\": \"gac\",\n    \"vnd.groove-help\": \"ghf\",\n    \"vnd.groove-identity-message\": \"gim\",\n    \"vnd.groove-injector\": \"grv\",\n    \"vnd.groove-tool-message\": \"gtm\",\n    \"vnd.groove-tool-template\": \"tpl\",\n    \"vnd.groove-vcard\": \"vcg\",\n    \"vnd.hal+xml\": \"hal\",\n    \"vnd.handheld-entertainment+xml\": \"zmm\",\n    \"vnd.hbci\": \"hbci\",\n    \"vnd.hhe.lesson-player\": \"les\",\n    \"vnd.hp-hpgl\": \"hpgl\",\n    \"vnd.hp-hpid\": \"hpid\",\n    \"vnd.hp-hps\": \"hps\",\n    \"vnd.hp-jlyt\": \"jlt\",\n    \"vnd.hp-pcl\": \"pcl\",\n    \"vnd.hp-pclxl\": \"pclxl\",\n    \"vnd.hydrostatix.sof-data\": \"sfd-hdstx\",\n    \"vnd.ibm.minipay\": \"mpy\",\n    \"vnd.ibm.modcap\": [\"afp\", \"listafp\", \"list3820\"],\n    \"vnd.ibm.rights-management\": \"irm\",\n    \"vnd.ibm.secure-container\": \"sc\",\n    \"vnd.iccprofile\": [\"icc\", \"icm\"],\n    \"vnd.igloader\": \"igl\",\n    \"vnd.immervision-ivp\": \"ivp\",\n    \"vnd.immervision-ivu\": \"ivu\",\n    \"vnd.insors.igm\": \"igm\",\n    \"vnd.intercon.formnet\": [\"xpw\", \"xpx\"],\n    \"vnd.intergeo\": \"i2g\",\n    \"vnd.intu.qbo\": \"qbo\",\n    \"vnd.intu.qfx\": \"qfx\",\n    \"vnd.ipunplugged.rcprofile\": \"rcprofile\",\n    \"vnd.irepository.package+xml\": \"irp\",\n    \"vnd.is-xpr\": \"xpr\",\n    \"vnd.isac.fcs\": \"fcs\",\n    \"vnd.jam\": \"jam\",\n    \"vnd.jcp.javame.midlet-rms\": \"rms\",\n    \"vnd.jisp\": \"jisp\",\n    \"vnd.joost.joda-archive\": \"joda\",\n    \"vnd.kahootz\": [\"ktz\", \"ktr\"],\n    \"vnd.kde.karbon\": \"karbon\",\n    \"vnd.kde.kchart\": \"chrt\",\n    \"vnd.kde.kformula\": \"kfo\",\n    \"vnd.kde.kivio\": \"flw\",\n    \"vnd.kde.kontour\": \"kon\",\n    \"vnd.kde.kpresenter\": [\"kpr\", \"kpt\"],\n    \"vnd.kde.kspread\": \"ksp\",\n    \"vnd.kde.kword\": [\"kwd\", \"kwt\"],\n    \"vnd.kenameaapp\": \"htke\",\n    \"vnd.kidspiration\": \"kia\",\n    \"vnd.kinar\": [\"kne\", \"knp\"],\n    \"vnd.koan\": [\"skp\", \"skd\", \"skt\", \"skm\"],\n    \"vnd.kodak-descriptor\": \"sse\",\n    \"vnd.las.las+xml\": \"lasxml\",\n    \"vnd.llamagraphics.life-balance.desktop\": \"lbd\",\n    \"vnd.llamagraphics.life-balance.exchange+xml\": \"lbe\",\n    \"vnd.lotus-1-2-3\": \"123\",\n    \"vnd.lotus-approach\": \"apr\",\n    \"vnd.lotus-freelance\": \"pre\",\n    \"vnd.lotus-notes\": \"nsf\",\n    \"vnd.lotus-organizer\": \"org\",\n    \"vnd.lotus-screencam\": \"scm\",\n    \"vnd.lotus-wordpro\": \"lwp\",\n    \"vnd.macports.portpkg\": \"portpkg\",\n    \"vnd.mcd\": \"mcd\",\n    \"vnd.medcalcdata\": \"mc1\",\n    \"vnd.mediastation.cdkey\": \"cdkey\",\n    \"vnd.mfer\": \"mwf\",\n    \"vnd.mfmp\": \"mfm\",\n    \"vnd.micrografx.flo\": \"flo\",\n    \"vnd.micrografx.igx\": \"igx\",\n    \"vnd.mif\": \"mif\",\n    \"vnd.mobius.daf\": \"daf\",\n    \"vnd.mobius.dis\": \"dis\",\n    \"vnd.mobius.mbk\": \"mbk\",\n    \"vnd.mobius.mqy\": \"mqy\",\n    \"vnd.mobius.msl\": \"msl\",\n    \"vnd.mobius.plc\": \"plc\",\n    \"vnd.mobius.txf\": \"txf\",\n    \"vnd.mophun.application\": \"mpn\",\n    \"vnd.mophun.certificate\": \"mpc\",\n    \"vnd.ms-artgalry\": \"cil\",\n    \"vnd.ms-cab-compressed\": \"cab\",\n    \"vnd.ms-excel.addin.macroenabled.12\": \"xlam\",\n    \"vnd.ms-excel.sheet.binary.macroenabled.12\": \"xlsb\",\n    \"vnd.ms-excel.sheet.macroenabled.12\": \"xlsm\",\n    \"vnd.ms-excel.template.macroenabled.12\": \"xltm\",\n    \"vnd.ms-fontobject\": \"eot\",\n    \"vnd.ms-htmlhelp\": \"chm\",\n    \"vnd.ms-ims\": \"ims\",\n    \"vnd.ms-lrm\": \"lrm\",\n    \"vnd.ms-officetheme\": \"thmx\",\n    \"vnd.ms-powerpoint.addin.macroenabled.12\": \"ppam\",\n    \"vnd.ms-powerpoint.presentation.macroenabled.12\": \"pptm\",\n    \"vnd.ms-powerpoint.slide.macroenabled.12\": \"sldm\",\n    \"vnd.ms-powerpoint.slideshow.macroenabled.12\": \"ppsm\",\n    \"vnd.ms-powerpoint.template.macroenabled.12\": \"potm\",\n    \"vnd.ms-project\": [\"mpp\", \"mpt\"],\n    \"vnd.ms-word.document.macroenabled.12\": \"docm\",\n    \"vnd.ms-word.template.macroenabled.12\": \"dotm\",\n    \"vnd.ms-works\": [\"wps\", \"wks\", \"wcm\", \"wdb\"],\n    \"vnd.ms-wpl\": \"wpl\",\n    \"vnd.ms-xpsdocument\": \"xps\",\n    \"vnd.mseq\": \"mseq\",\n    \"vnd.musician\": \"mus\",\n    \"vnd.muvee.style\": \"msty\",\n    \"vnd.mynfc\": \"taglet\",\n    \"vnd.neurolanguage.nlu\": \"nlu\",\n    \"vnd.nitf\": [\"ntf\", \"nitf\"],\n    \"vnd.noblenet-directory\": \"nnd\",\n    \"vnd.noblenet-sealer\": \"nns\",\n    \"vnd.noblenet-web\": \"nnw\",\n    \"vnd.nokia.n-gage.data\": \"ngdat\",\n    \"vnd.nokia.n-gage.symbian.install\": \"n-gage\",\n    \"vnd.nokia.radio-preset\": \"rpst\",\n    \"vnd.nokia.radio-presets\": \"rpss\",\n    \"vnd.novadigm.edm\": \"edm\",\n    \"vnd.novadigm.edx\": \"edx\",\n    \"vnd.novadigm.ext\": \"ext\",\n    \"vnd.oasis.opendocument.chart-template\": \"otc\",\n    \"vnd.oasis.opendocument.formula-template\": \"odft\",\n    \"vnd.oasis.opendocument.image-template\": \"oti\",\n    \"vnd.olpc-sugar\": \"xo\",\n    \"vnd.oma.dd2+xml\": \"dd2\",\n    \"vnd.openofficeorg.extension\": \"oxt\",\n    \"vnd.openxmlformats-officedocument.presentationml.slide\": \"sldx\",\n    \"vnd.osgeo.mapguide.package\": \"mgp\",\n    \"vnd.osgi.dp\": \"dp\",\n    \"vnd.osgi.subsystem\": \"esa\",\n    \"vnd.palm\": [\"pdb\", \"pqa\", \"oprc\"],\n    \"vnd.pawaafile\": \"paw\",\n    \"vnd.pg.format\": \"str\",\n    \"vnd.pg.osasli\": \"ei6\",\n    \"vnd.picsel\": \"efif\",\n    \"vnd.pmi.widget\": \"wg\",\n    \"vnd.pocketlearn\": \"plf\",\n    \"vnd.powerbuilder6\": \"pbd\",\n    \"vnd.previewsystems.box\": \"box\",\n    \"vnd.proteus.magazine\": \"mgz\",\n    \"vnd.publishare-delta-tree\": \"qps\",\n    \"vnd.pvi.ptid1\": \"ptid\",\n    \"vnd.quark.quarkxpress\": [\"qxd\", \"qxt\", \"qwd\", \"qwt\", \"qxl\", \"qxb\"],\n    \"vnd.realvnc.bed\": \"bed\",\n    \"vnd.recordare.musicxml\": \"mxl\",\n    \"vnd.recordare.musicxml+xml\": \"musicxml\",\n    \"vnd.rig.cryptonote\": \"cryptonote\",\n    \"vnd.rn-realmedia\": \"rm\",\n    \"vnd.rn-realmedia-vbr\": \"rmvb\",\n    \"vnd.route66.link66+xml\": \"link66\",\n    \"vnd.sailingtracker.track\": \"st\",\n    \"vnd.seemail\": \"see\",\n    \"vnd.sema\": \"sema\",\n    \"vnd.semd\": \"semd\",\n    \"vnd.semf\": \"semf\",\n    \"vnd.shana.informed.formdata\": \"ifm\",\n    \"vnd.shana.informed.formtemplate\": \"itp\",\n    \"vnd.shana.informed.interchange\": \"iif\",\n    \"vnd.shana.informed.package\": \"ipk\",\n    \"vnd.simtech-mindmapper\": [\"twd\", \"twds\"],\n    \"vnd.smart.teacher\": \"teacher\",\n    \"vnd.solent.sdkm+xml\": [\"sdkm\", \"sdkd\"],\n    \"vnd.spotfire.dxp\": \"dxp\",\n    \"vnd.spotfire.sfs\": \"sfs\",\n    \"vnd.stepmania.package\": \"smzip\",\n    \"vnd.stepmania.stepchart\": \"sm\",\n    \"vnd.sus-calendar\": [\"sus\", \"susp\"],\n    \"vnd.svd\": \"svd\",\n    \"vnd.syncml+xml\": \"xsm\",\n    \"vnd.syncml.dm+wbxml\": \"bdm\",\n    \"vnd.syncml.dm+xml\": \"xdm\",\n    \"vnd.tao.intent-module-archive\": \"tao\",\n    \"vnd.tcpdump.pcap\": [\"pcap\", \"cap\", \"dmp\"],\n    \"vnd.tmobile-livetv\": \"tmo\",\n    \"vnd.trid.tpt\": \"tpt\",\n    \"vnd.triscape.mxs\": \"mxs\",\n    \"vnd.trueapp\": \"tra\",\n    \"vnd.ufdl\": [\"ufd\", \"ufdl\"],\n    \"vnd.uiq.theme\": \"utz\",\n    \"vnd.umajin\": \"umj\",\n    \"vnd.unity\": \"unityweb\",\n    \"vnd.uoml+xml\": \"uoml\",\n    \"vnd.vcx\": \"vcx\",\n    \"vnd.visionary\": \"vis\",\n    \"vnd.vsf\": \"vsf\",\n    \"vnd.webturbo\": \"wtb\",\n    \"vnd.wolfram.player\": \"nbp\",\n    \"vnd.wqd\": \"wqd\",\n    \"vnd.wt.stf\": \"stf\",\n    \"vnd.xara\": \"xar\",\n    \"vnd.xfdl\": \"xfdl\",\n    \"vnd.yamaha.hv-dic\": \"hvd\",\n    \"vnd.yamaha.hv-script\": \"hvs\",\n    \"vnd.yamaha.hv-voice\": \"hvp\",\n    \"vnd.yamaha.openscoreformat\": \"osf\",\n    \"vnd.yamaha.openscoreformat.osfpvg+xml\": \"osfpvg\",\n    \"vnd.yamaha.smaf-audio\": \"saf\",\n    \"vnd.yamaha.smaf-phrase\": \"spf\",\n    \"vnd.yellowriver-custom-menu\": \"cmp\",\n    \"vnd.zul\": [\"zir\", \"zirz\"],\n    \"vnd.zzazz.deck+xml\": \"zaz\",\n    \"voicexml+xml\": \"vxml\",\n    \"widget\": \"wgt\",\n    \"winhlp\": \"hlp\",\n    \"wsdl+xml\": \"wsdl\",\n    \"wspolicy+xml\": \"wspolicy\",\n    \"x-ace-compressed\": \"ace\",\n    \"x-authorware-bin\": [\"aab\", \"x32\", \"u32\", \"vox\"],\n    \"x-authorware-map\": \"aam\",\n    \"x-authorware-seg\": \"aas\",\n    \"x-blorb\": [\"blb\", \"blorb\"],\n    \"x-bzip\": \"bz\",\n    \"x-bzip2\": [\"bz2\", \"boz\"],\n    \"x-cfs-compressed\": \"cfs\",\n    \"x-chat\": \"chat\",\n    \"x-conference\": \"nsc\",\n    \"x-dgc-compressed\": \"dgc\",\n    \"x-dtbncx+xml\": \"ncx\",\n    \"x-dtbook+xml\": \"dtb\",\n    \"x-dtbresource+xml\": \"res\",\n    \"x-eva\": \"eva\",\n    \"x-font-bdf\": \"bdf\",\n    \"x-font-ghostscript\": \"gsf\",\n    \"x-font-linux-psf\": \"psf\",\n    \"x-font-pcf\": \"pcf\",\n    \"x-font-snf\": \"snf\",\n    \"x-font-ttf\": [\"ttf\", \"ttc\"],\n    \"x-font-type1\": [\"pfa\", \"pfb\", \"pfm\", \"afm\"],\n    \"x-freearc\": \"arc\",\n    \"x-gca-compressed\": \"gca\",\n    \"x-glulx\": \"ulx\",\n    \"x-gramps-xml\": \"gramps\",\n    \"x-install-instructions\": \"install\",\n    \"x-lzh-compressed\": [\"lzh\", \"lha\"],\n    \"x-mie\": \"mie\",\n    \"x-mobipocket-ebook\": [\"prc\", \"mobi\"],\n    \"x-ms-application\": \"application\",\n    \"x-ms-shortcut\": \"lnk\",\n    \"x-ms-xbap\": \"xbap\",\n    \"x-msbinder\": \"obd\",\n    \"x-mscardfile\": \"crd\",\n    \"x-msclip\": \"clp\",\n    \"application/x-ms-installer\": \"msi\",\n    \"x-msmediaview\": [\"mvb\", \"m13\", \"m14\"],\n    \"x-msmetafile\": [\"wmf\", \"wmz\", \"emf\", \"emz\"],\n    \"x-msmoney\": \"mny\",\n    \"x-mspublisher\": \"pub\",\n    \"x-msschedule\": \"scd\",\n    \"x-msterminal\": \"trm\",\n    \"x-mswrite\": \"wri\",\n    \"x-nzb\": \"nzb\",\n    \"x-pkcs12\": [\"p12\", \"pfx\"],\n    \"x-pkcs7-certificates\": [\"p7b\", \"spc\"],\n    \"x-research-info-systems\": \"ris\",\n    \"x-silverlight-app\": \"xap\",\n    \"x-sql\": \"sql\",\n    \"x-stuffitx\": \"sitx\",\n    \"x-subrip\": \"srt\",\n    \"x-t3vm-image\": \"t3\",\n    \"x-tex-tfm\": \"tfm\",\n    \"x-tgif\": \"obj\",\n    \"x-xliff+xml\": \"xlf\",\n    \"x-xz\": \"xz\",\n    \"x-zmachine\": [\"z1\", \"z2\", \"z3\", \"z4\", \"z5\", \"z6\", \"z7\", \"z8\"],\n    \"xaml+xml\": \"xaml\",\n    \"xcap-diff+xml\": \"xdf\",\n    \"xenc+xml\": \"xenc\",\n    \"xml-dtd\": \"dtd\",\n    \"xop+xml\": \"xop\",\n    \"xproc+xml\": \"xpl\",\n    \"xslt+xml\": \"xslt\",\n    \"xv+xml\": [\"mxml\", \"xhvml\", \"xvml\", \"xvm\"],\n    \"yang\": \"yang\",\n    \"yin+xml\": \"yin\",\n    \"envoy\": \"evy\",\n    \"fractals\": \"fif\",\n    \"internet-property-stream\": \"acx\",\n    \"olescript\": \"axs\",\n    \"vnd.ms-outlook\": \"msg\",\n    \"vnd.ms-pkicertstore\": \"sst\",\n    \"x-compress\": \"z\",\n    \"x-perfmon\": [\"pma\", \"pmc\", \"pmr\", \"pmw\"],\n    \"ynd.ms-pkipko\": \"pko\",\n    \"gzip\": [\"gz\", \"tgz\"],\n    \"smil+xml\": [\"smi\", \"smil\"],\n    \"vnd.debian.binary-package\": [\"deb\", \"udeb\"],\n    \"vnd.hzn-3d-crossword\": \"x3d\",\n    \"vnd.sqlite3\": [\"db\", \"sqlite\", \"sqlite3\", \"db-wal\", \"sqlite-wal\", \"db-shm\", \"sqlite-shm\"],\n    \"vnd.wap.sic\": \"sic\",\n    \"vnd.wap.slc\": \"slc\",\n    \"x-krita\": [\"kra\", \"krz\"],\n    \"x-perl\": [\"pm\", \"pl\"],\n    \"yaml\": [\"yaml\", \"yml\"]\n  },\n  \"audio\": {\n    \"amr\": \"amr\",\n    \"amr-wb\": \"awb\",\n    \"annodex\": \"axa\",\n    \"basic\": [\"au\", \"snd\"],\n    \"flac\": \"flac\",\n    \"midi\": [\"mid\", \"midi\", \"kar\", \"rmi\"],\n    \"mpeg\": [\"mpga\", \"mpega\", \"mp3\", \"m4a\", \"mp2a\", \"m2a\", \"m3a\"],\n    \"mpegurl\": \"m3u\",\n    \"ogg\": [\"oga\", \"ogg\", \"spx\"],\n    \"prs.sid\": \"sid\",\n    \"x-aiff\": \"aifc\",\n    \"x-gsm\": \"gsm\",\n    \"x-ms-wma\": \"wma\",\n    \"x-ms-wax\": \"wax\",\n    \"x-pn-realaudio\": \"ram\",\n    \"x-realaudio\": \"ra\",\n    \"x-sd2\": \"sd2\",\n    \"adpcm\": \"adp\",\n    \"mp4\": \"mp4a\",\n    \"s3m\": \"s3m\",\n    \"silk\": \"sil\",\n    \"vnd.dece.audio\": [\"uva\", \"uvva\"],\n    \"vnd.digital-winds\": \"eol\",\n    \"vnd.dra\": \"dra\",\n    \"vnd.dts\": \"dts\",\n    \"vnd.dts.hd\": \"dtshd\",\n    \"vnd.lucent.voice\": \"lvp\",\n    \"vnd.ms-playready.media.pya\": \"pya\",\n    \"vnd.nuera.ecelp4800\": \"ecelp4800\",\n    \"vnd.nuera.ecelp7470\": \"ecelp7470\",\n    \"vnd.nuera.ecelp9600\": \"ecelp9600\",\n    \"vnd.rip\": \"rip\",\n    \"webm\": \"weba\",\n    \"x-caf\": \"caf\",\n    \"x-matroska\": \"mka\",\n    \"x-pn-realaudio-plugin\": \"rmp\",\n    \"xm\": \"xm\",\n    \"aac\": \"aac\",\n    \"aiff\": [\"aiff\", \"aif\", \"aff\"],\n    \"opus\": \"opus\",\n    \"wav\": \"wav\"\n  },\n  \"chemical\": {\n    \"x-alchemy\": \"alc\",\n    \"x-cache\": [\"cac\", \"cache\"],\n    \"x-cache-csf\": \"csf\",\n    \"x-cactvs-binary\": [\"cbin\", \"cascii\", \"ctab\"],\n    \"x-cdx\": \"cdx\",\n    \"x-chem3d\": \"c3d\",\n    \"x-cif\": \"cif\",\n    \"x-cmdf\": \"cmdf\",\n    \"x-cml\": \"cml\",\n    \"x-compass\": \"cpa\",\n    \"x-crossfire\": \"bsd\",\n    \"x-csml\": [\"csml\", \"csm\"],\n    \"x-ctx\": \"ctx\",\n    \"x-cxf\": [\"cxf\", \"cef\"],\n    \"x-embl-dl-nucleotide\": [\"emb\", \"embl\"],\n    \"x-gamess-input\": [\"inp\", \"gam\", \"gamin\"],\n    \"x-gaussian-checkpoint\": [\"fch\", \"fchk\"],\n    \"x-gaussian-cube\": \"cub\",\n    \"x-gaussian-input\": [\"gau\", \"gjc\", \"gjf\"],\n    \"x-gaussian-log\": \"gal\",\n    \"x-gcg8-sequence\": \"gcg\",\n    \"x-genbank\": \"gen\",\n    \"x-hin\": \"hin\",\n    \"x-isostar\": [\"istr\", \"ist\"],\n    \"x-jcamp-dx\": [\"jdx\", \"dx\"],\n    \"x-kinemage\": \"kin\",\n    \"x-macmolecule\": \"mcm\",\n    \"x-macromodel-input\": \"mmod\",\n    \"x-mdl-molfile\": \"mol\",\n    \"x-mdl-rdfile\": \"rd\",\n    \"x-mdl-rxnfile\": \"rxn\",\n    \"x-mdl-sdfile\": \"sd\",\n    \"x-mdl-tgf\": \"tgf\",\n    \"x-mmcif\": \"mcif\",\n    \"x-mol2\": \"mol2\",\n    \"x-molconn-Z\": \"b\",\n    \"x-mopac-graph\": \"gpt\",\n    \"x-mopac-input\": [\"mop\", \"mopcrt\", \"zmt\"],\n    \"x-mopac-out\": \"moo\",\n    \"x-ncbi-asn1\": \"asn\",\n    \"x-ncbi-asn1-ascii\": [\"prt\", \"ent\"],\n    \"x-ncbi-asn1-binary\": \"val\",\n    \"x-rosdal\": \"ros\",\n    \"x-swissprot\": \"sw\",\n    \"x-vamas-iso14976\": \"vms\",\n    \"x-vmd\": \"vmd\",\n    \"x-xtel\": \"xtel\",\n    \"x-xyz\": \"xyz\"\n  },\n  \"font\": {\n    \"otf\": \"otf\",\n    \"woff\": \"woff\",\n    \"woff2\": \"woff2\"\n  },\n  \"image\": {\n    \"gif\": \"gif\",\n    \"ief\": \"ief\",\n    \"jpeg\": [\"jpeg\", \"jpg\", \"jpe\", \"jfif\", \"jfif-tbnl\", \"jif\"],\n    \"pcx\": \"pcx\",\n    \"png\": \"png\",\n    \"svg+xml\": [\"svg\", \"svgz\"],\n    \"tiff\": [\"tiff\", \"tif\"],\n    \"vnd.djvu\": [\"djvu\", \"djv\"],\n    \"vnd.wap.wbmp\": \"wbmp\",\n    \"x-canon-cr2\": \"cr2\",\n    \"x-canon-crw\": \"crw\",\n    \"x-cmu-raster\": \"ras\",\n    \"x-coreldraw\": \"cdr\",\n    \"x-coreldrawpattern\": \"pat\",\n    \"x-coreldrawtemplate\": \"cdt\",\n    \"x-corelphotopaint\": \"cpt\",\n    \"x-epson-erf\": \"erf\",\n    \"x-icon\": \"ico\",\n    \"x-jg\": \"art\",\n    \"x-jng\": \"jng\",\n    \"x-nikon-nef\": \"nef\",\n    \"x-olympus-orf\": \"orf\",\n    \"x-portable-anymap\": \"pnm\",\n    \"x-portable-bitmap\": \"pbm\",\n    \"x-portable-graymap\": \"pgm\",\n    \"x-portable-pixmap\": \"ppm\",\n    \"x-rgb\": \"rgb\",\n    \"x-xbitmap\": \"xbm\",\n    \"x-xpixmap\": \"xpm\",\n    \"x-xwindowdump\": \"xwd\",\n    \"bmp\": \"bmp\",\n    \"cgm\": \"cgm\",\n    \"g3fax\": \"g3\",\n    \"ktx\": \"ktx\",\n    \"prs.btif\": \"btif\",\n    \"sgi\": \"sgi\",\n    \"vnd.dece.graphic\": [\"uvi\", \"uvvi\", \"uvg\", \"uvvg\"],\n    \"vnd.dwg\": \"dwg\",\n    \"vnd.dxf\": \"dxf\",\n    \"vnd.fastbidsheet\": \"fbs\",\n    \"vnd.fpx\": \"fpx\",\n    \"vnd.fst\": \"fst\",\n    \"vnd.fujixerox.edmics-mmr\": \"mmr\",\n    \"vnd.fujixerox.edmics-rlc\": \"rlc\",\n    \"vnd.ms-modi\": \"mdi\",\n    \"vnd.ms-photo\": \"wdp\",\n    \"vnd.net-fpx\": \"npx\",\n    \"vnd.xiff\": \"xif\",\n    \"webp\": \"webp\",\n    \"x-3ds\": \"3ds\",\n    \"x-cmx\": \"cmx\",\n    \"x-freehand\": [\"fh\", \"fhc\", \"fh4\", \"fh5\", \"fh7\"],\n    \"x-pict\": [\"pic\", \"pct\"],\n    \"x-tga\": \"tga\",\n    \"cis-cod\": \"cod\",\n    \"avif\": \"avifs\",\n    \"heic\": [\"heif\", \"heic\"],\n    \"pjpeg\": [\"pjpg\"],\n    \"vnd.adobe.photoshop\": \"psd\",\n    \"x-adobe-dng\": \"dng\",\n    \"x-fuji-raf\": \"raf\",\n    \"x-icns\": \"icns\",\n    \"x-kodak-dcr\": \"dcr\",\n    \"x-kodak-k25\": \"k25\",\n    \"x-kodak-kdc\": \"kdc\",\n    \"x-minolta-mrw\": \"mrw\",\n    \"x-panasonic-raw\": [\"raw\", \"rw2\", \"rwl\"],\n    \"x-pentax-pef\": [\"pef\", \"ptx\"],\n    \"x-sigma-x3f\": \"x3f\",\n    \"x-sony-arw\": \"arw\",\n    \"x-sony-sr2\": \"sr2\",\n    \"x-sony-srf\": \"srf\"\n  },\n  \"message\": {\n    \"rfc822\": [\"eml\", \"mime\", \"mht\", \"mhtml\", \"nws\"]\n  },\n  \"model\": {\n    \"iges\": [\"igs\", \"iges\"],\n    \"mesh\": [\"msh\", \"mesh\", \"silo\"],\n    \"vrml\": [\"wrl\", \"vrml\"],\n    \"x3d+vrml\": [\"x3dv\", \"x3dvz\"],\n    \"x3d+xml\": \"x3dz\",\n    \"x3d+binary\": [\"x3db\", \"x3dbz\"],\n    \"vnd.collada+xml\": \"dae\",\n    \"vnd.dwf\": \"dwf\",\n    \"vnd.gdl\": \"gdl\",\n    \"vnd.gtw\": \"gtw\",\n    \"vnd.mts\": \"mts\",\n    \"vnd.usdz+zip\": \"usdz\",\n    \"vnd.vtu\": \"vtu\"\n  },\n  \"text\": {\n    \"cache-manifest\": [\"manifest\", \"appcache\"],\n    \"calendar\": [\"ics\", \"icz\", \"ifb\"],\n    \"css\": \"css\",\n    \"csv\": \"csv\",\n    \"h323\": \"323\",\n    \"html\": [\"html\", \"htm\", \"shtml\", \"stm\"],\n    \"iuls\": \"uls\",\n    \"plain\": [\"txt\", \"text\", \"brf\", \"conf\", \"def\", \"list\", \"log\", \"in\", \"bas\", \"diff\", \"ksh\"],\n    \"richtext\": \"rtx\",\n    \"scriptlet\": [\"sct\", \"wsc\"],\n    \"texmacs\": \"tm\",\n    \"tab-separated-values\": \"tsv\",\n    \"vnd.sun.j2me.app-descriptor\": \"jad\",\n    \"vnd.wap.wml\": \"wml\",\n    \"vnd.wap.wmlscript\": \"wmls\",\n    \"x-bibtex\": \"bib\",\n    \"x-boo\": \"boo\",\n    \"x-c++hdr\": [\"h++\", \"hpp\", \"hxx\", \"hh\"],\n    \"x-c++src\": [\"c++\", \"cpp\", \"cxx\", \"cc\"],\n    \"x-component\": \"htc\",\n    \"x-dsrc\": \"d\",\n    \"x-diff\": \"patch\",\n    \"x-haskell\": \"hs\",\n    \"x-java\": \"java\",\n    \"x-literate-haskell\": \"lhs\",\n    \"x-moc\": \"moc\",\n    \"x-pascal\": [\"p\", \"pas\", \"pp\", \"inc\"],\n    \"x-pcs-gcd\": \"gcd\",\n    \"x-python\": \"py\",\n    \"x-scala\": \"scala\",\n    \"x-setext\": \"etx\",\n    \"x-tcl\": [\"tcl\", \"tk\"],\n    \"x-tex\": [\"tex\", \"ltx\", \"sty\", \"cls\"],\n    \"x-vcalendar\": \"vcs\",\n    \"x-vcard\": \"vcf\",\n    \"n3\": \"n3\",\n    \"prs.lines.tag\": \"dsc\",\n    \"sgml\": [\"sgml\", \"sgm\"],\n    \"troff\": [\"t\", \"tr\", \"roff\", \"man\", \"me\", \"ms\"],\n    \"turtle\": \"ttl\",\n    \"uri-list\": [\"uri\", \"uris\", \"urls\"],\n    \"vcard\": \"vcard\",\n    \"vnd.curl\": \"curl\",\n    \"vnd.curl.dcurl\": \"dcurl\",\n    \"vnd.curl.scurl\": \"scurl\",\n    \"vnd.curl.mcurl\": \"mcurl\",\n    \"vnd.dvb.subtitle\": \"sub\",\n    \"vnd.fly\": \"fly\",\n    \"vnd.fmi.flexstor\": \"flx\",\n    \"vnd.graphviz\": \"gv\",\n    \"vnd.in3d.3dml\": \"3dml\",\n    \"vnd.in3d.spot\": \"spot\",\n    \"x-asm\": [\"s\", \"asm\"],\n    \"x-c\": [\"c\", \"h\", \"dic\"],\n    \"x-fortran\": [\"f\", \"for\", \"f77\", \"f90\"],\n    \"x-opml\": \"opml\",\n    \"x-nfo\": \"nfo\",\n    \"x-sfv\": \"sfv\",\n    \"x-uuencode\": \"uu\",\n    \"webviewhtml\": \"htt\",\n    \"javascript\": \"js\",\n    \"json\": \"json\",\n    \"markdown\": [\"md\", \"markdown\", \"mdown\", \"markdn\"],\n    \"vnd.wap.si\": \"si\",\n    \"vnd.wap.sl\": \"sl\"\n  },\n  \"video\": {\n    \"avif\": \"avif\",\n    \"3gpp\": \"3gp\",\n    \"annodex\": \"axv\",\n    \"dl\": \"dl\",\n    \"dv\": [\"dif\", \"dv\"],\n    \"fli\": \"fli\",\n    \"gl\": \"gl\",\n    \"mpeg\": [\"mpeg\", \"mpg\", \"mpe\", \"m1v\", \"m2v\", \"mp2\", \"mpa\", \"mpv2\"],\n    \"mp4\": [\"mp4\", \"mp4v\", \"mpg4\"],\n    \"quicktime\": [\"qt\", \"mov\"],\n    \"ogg\": \"ogv\",\n    \"vnd.mpegurl\": [\"mxu\", \"m4u\"],\n    \"x-flv\": \"flv\",\n    \"x-la-asf\": [\"lsf\", \"lsx\"],\n    \"x-mng\": \"mng\",\n    \"x-ms-asf\": [\"asf\", \"asx\", \"asr\"],\n    \"x-ms-wm\": \"wm\",\n    \"x-ms-wmv\": \"wmv\",\n    \"x-ms-wmx\": \"wmx\",\n    \"x-ms-wvx\": \"wvx\",\n    \"x-msvideo\": \"avi\",\n    \"x-sgi-movie\": \"movie\",\n    \"x-matroska\": [\"mpv\", \"mkv\", \"mk3d\", \"mks\"],\n    \"3gpp2\": \"3g2\",\n    \"h261\": \"h261\",\n    \"h263\": \"h263\",\n    \"h264\": \"h264\",\n    \"jpeg\": \"jpgv\",\n    \"jpm\": [\"jpm\", \"jpgm\"],\n    \"mj2\": [\"mj2\", \"mjp2\"],\n    \"vnd.dece.hd\": [\"uvh\", \"uvvh\"],\n    \"vnd.dece.mobile\": [\"uvm\", \"uvvm\"],\n    \"vnd.dece.pd\": [\"uvp\", \"uvvp\"],\n    \"vnd.dece.sd\": [\"uvs\", \"uvvs\"],\n    \"vnd.dece.video\": [\"uvv\", \"uvvv\"],\n    \"vnd.dvb.file\": \"dvb\",\n    \"vnd.fvt\": \"fvt\",\n    \"vnd.ms-playready.media.pyv\": \"pyv\",\n    \"vnd.uvvu.mp4\": [\"uvu\", \"uvvu\"],\n    \"vnd.vivo\": \"viv\",\n    \"webm\": \"webm\",\n    \"x-f4v\": \"f4v\",\n    \"x-m4v\": \"m4v\",\n    \"x-ms-vob\": \"vob\",\n    \"x-smv\": \"smv\",\n    \"mp2t\": \"ts\"\n  },\n  \"x-conference\": {\n    \"x-cooltalk\": \"ice\"\n  },\n  \"x-world\": {\n    \"x-vrml\": [\"vrm\", \"flr\", \"wrz\", \"xaf\", \"xof\"]\n  }\n};\nconst mimeTypes = (() => {\n  const mimeTypes = {};\n  for (const type of Object.keys(table)) {\n    for (const subtype of Object.keys(table[type])) {\n      const value = table[type][subtype];\n      if (typeof value == \"string\") {\n        mimeTypes[value] = type + \"/\" + subtype;\n      } else {\n        for (let indexMimeType = 0; indexMimeType < value.length; indexMimeType++) {\n          mimeTypes[value[indexMimeType]] = type + \"/\" + subtype;\n        }\n      }\n    }\n  }\n  return mimeTypes;\n})();\nexport { mimeTypes, getMimeType };\nfunction getMimeType(filename) {\n  return filename && mimeTypes[filename.split(\".\").pop().toLowerCase()] || getDefaultMimeType();\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst table = [];\nfor (let i = 0; i < 256; i++) {\n  let t = i;\n  for (let j = 0; j < 8; j++) {\n    if (t & 1) {\n      t = t >>> 1 ^ 0xEDB88320;\n    } else {\n      t = t >>> 1;\n    }\n  }\n  table[i] = t;\n}\nclass Crc32 {\n  constructor(crc) {\n    this.crc = crc || -1;\n  }\n  append(data) {\n    let crc = this.crc | 0;\n    for (let offset = 0, length = data.length | 0; offset < length; offset++) {\n      crc = crc >>> 8 ^ table[(crc ^ data[offset]) & 0xFF];\n    }\n    this.crc = crc;\n  }\n  get() {\n    return ~this.crc;\n  }\n}\nexport { Crc32 };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n\nimport { Crc32 } from \"./codecs/crc32.js\";\nclass Crc32Stream extends TransformStream {\n  constructor() {\n    let stream;\n    const crc32 = new Crc32();\n    super({\n      transform(chunk, controller) {\n        crc32.append(chunk);\n        controller.enqueue(chunk);\n      },\n      flush() {\n        const value = new Uint8Array(4);\n        const dataView = new DataView(value.buffer);\n        dataView.setUint32(0, crc32.get());\n        stream.value = value;\n      }\n    });\n    stream = this;\n  }\n}\nexport { Crc32Stream };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TextEncoder */\n\nimport { UNDEFINED_TYPE } from \"../constants.js\";\nexport { encodeText };\nfunction encodeText(value) {\n  if (typeof TextEncoder == UNDEFINED_TYPE) {\n    value = unescape(encodeURIComponent(value));\n    const result = new Uint8Array(value.length);\n    for (let i = 0; i < result.length; i++) {\n      result[i] = value.charCodeAt(i);\n    }\n    return result;\n  } else {\n    return new TextEncoder().encode(value);\n  }\n}", "// Derived from https://github.com/xqdoo00o/jszip/blob/master/lib/sjcl.js and https://github.com/bitwiseshiftleft/sjcl\n\n// deno-lint-ignore-file no-this-alias\n\n/*\n * SJCL is open. You can use, modify and redistribute it under a BSD\n * license or under the GNU GPL, version 2.0.\n */\n\n/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nconst bitArray = {\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat(a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    const last = a1[a1.length - 1],\n      shift = bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return bitArray._shiftRight(a2, shift, last | 0, a1.slice(0, a1.length - 1));\n    }\n  },\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength(a) {\n    const l = a.length;\n    if (l === 0) {\n      return 0;\n    }\n    const x = a[l - 1];\n    return (l - 1) * 32 + bitArray.getPartial(x);\n  },\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp(a, len) {\n    if (a.length * 32 < len) {\n      return a;\n    }\n    a = a.slice(0, Math.ceil(len / 32));\n    const l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l - 1] = bitArray.partial(len, a[l - 1] & 0x80000000 >> len - 1, 1);\n    }\n    return a;\n  },\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial(len, x, _end) {\n    if (len === 32) {\n      return x;\n    }\n    return (_end ? x | 0 : x << 32 - len) + len * 0x10000000000;\n  },\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial(x) {\n    return Math.round(x / 0x10000000000) || 32;\n  },\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight(a, shift, carry, out) {\n    if (out === undefined) {\n      out = [];\n    }\n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    for (let i = 0; i < a.length; i++) {\n      out.push(carry | a[i] >>> shift);\n      carry = a[i] << 32 - shift;\n    }\n    const last2 = a.length ? a[a.length - 1] : 0;\n    const shift2 = bitArray.getPartial(last2);\n    out.push(bitArray.partial(shift + shift2 & 31, shift + shift2 > 32 ? carry : out.pop(), 1));\n    return out;\n  }\n};\n\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bytes\n * @namespace\n */\nconst codec = {\n  bytes: {\n    /** Convert from a bitArray to an array of bytes. */\n    fromBits(arr) {\n      const bl = bitArray.bitLength(arr);\n      const byteLength = bl / 8;\n      const out = new Uint8Array(byteLength);\n      let tmp;\n      for (let i = 0; i < byteLength; i++) {\n        if ((i & 3) === 0) {\n          tmp = arr[i / 4];\n        }\n        out[i] = tmp >>> 24;\n        tmp <<= 8;\n      }\n      return out;\n    },\n    /** Convert from an array of bytes to a bitArray. */\n    toBits(bytes) {\n      const out = [];\n      let i;\n      let tmp = 0;\n      for (i = 0; i < bytes.length; i++) {\n        tmp = tmp << 8 | bytes[i];\n        if ((i & 3) === 3) {\n          out.push(tmp);\n          tmp = 0;\n        }\n      }\n      if (i & 3) {\n        out.push(bitArray.partial(8 * (i & 3), tmp));\n      }\n      return out;\n    }\n  }\n};\nconst hash = {};\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nhash.sha1 = class {\n  constructor(hash) {\n    const sha1 = this;\n    /**\n     * The hash's block size, in bits.\n     * @constant\n     */\n    sha1.blockSize = 512;\n    /**\n     * The SHA-1 initialization vector.\n     * @private\n     */\n    sha1._init = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];\n    /**\n     * The SHA-1 hash key.\n     * @private\n     */\n    sha1._key = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n    if (hash) {\n      sha1._h = hash._h.slice(0);\n      sha1._buffer = hash._buffer.slice(0);\n      sha1._length = hash._length;\n    } else {\n      sha1.reset();\n    }\n  }\n\n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset() {\n    const sha1 = this;\n    sha1._h = sha1._init.slice(0);\n    sha1._buffer = [];\n    sha1._length = 0;\n    return sha1;\n  }\n\n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update(data) {\n    const sha1 = this;\n    if (typeof data === \"string\") {\n      data = codec.utf8String.toBits(data);\n    }\n    const b = sha1._buffer = bitArray.concat(sha1._buffer, data);\n    const ol = sha1._length;\n    const nl = sha1._length = ol + bitArray.bitLength(data);\n    if (nl > 9007199254740991) {\n      throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n    const c = new Uint32Array(b);\n    let j = 0;\n    for (let i = sha1.blockSize + ol - (sha1.blockSize + ol & sha1.blockSize - 1); i <= nl; i += sha1.blockSize) {\n      sha1._block(c.subarray(16 * j, 16 * (j + 1)));\n      j += 1;\n    }\n    b.splice(0, 16 * j);\n    return sha1;\n  }\n\n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize() {\n    const sha1 = this;\n    let b = sha1._buffer;\n    const h = sha1._h;\n\n    // Round out and push the buffer\n    b = bitArray.concat(b, [bitArray.partial(1, 1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (let i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(sha1._length / 0x100000000));\n    b.push(sha1._length | 0);\n    while (b.length) {\n      sha1._block(b.splice(0, 16));\n    }\n    sha1.reset();\n    return h;\n  }\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f(t, b, c, d) {\n    if (t <= 19) {\n      return b & c | ~b & d;\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return b & c | b & d | c & d;\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  }\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S(n, x) {\n    return x << n | x >>> 32 - n;\n  }\n\n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block(words) {\n    const sha1 = this;\n    const h = sha1._h;\n    // When words is passed to _block, it has 16 elements. SHA1 _block\n    // function extends words with new elements (at the end there are 80 elements). \n    // The problem is that if we use Uint32Array instead of Array, \n    // the length of Uint32Array cannot be changed. Thus, we replace words with a \n    // normal Array here.\n    const w = Array(80); // do not use Uint32Array here as the instantiation is slower\n    for (let j = 0; j < 16; j++) {\n      w[j] = words[j];\n    }\n    let a = h[0];\n    let b = h[1];\n    let c = h[2];\n    let d = h[3];\n    let e = h[4];\n    for (let t = 0; t <= 79; t++) {\n      if (t >= 16) {\n        w[t] = sha1._S(1, w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16]);\n      }\n      const tmp = sha1._S(5, a) + sha1._f(t, b, c, d) + e + w[t] + sha1._key[Math.floor(t / 20)] | 0;\n      e = d;\n      d = c;\n      c = sha1._S(30, b);\n      b = a;\n      a = tmp;\n    }\n    h[0] = h[0] + a | 0;\n    h[1] = h[1] + b | 0;\n    h[2] = h[2] + c | 0;\n    h[3] = h[3] + d | 0;\n    h[4] = h[4] + e | 0;\n  }\n};\n\n/** @fileOverview Low-level AES implementation.\n *\n * This file contains a low-level implementation of AES, optimized for\n * size and for efficiency on several browsers.  It is based on\n * OpenSSL's aes_core.c, a public-domain implementation by Vincent\n * Rijmen, Antoon Bosselaers and Paulo Barreto.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\nconst cipher = {};\n\n/**\n * Schedule out an AES key for both encryption and decryption.  This\n * is a low-level class.  Use a cipher mode to do bulk encryption.\n *\n * @constructor\n * @param {Array} key The key as an array of 4, 6 or 8 words.\n */\ncipher.aes = class {\n  constructor(key) {\n    /**\n     * The expanded S-box and inverse S-box tables.  These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns.  The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    const aes = this;\n    aes._tables = [[[], [], [], [], []], [[], [], [], [], []]];\n    if (!aes._tables[0][0][0]) {\n      aes._precompute();\n    }\n    const sbox = aes._tables[0][4];\n    const decTable = aes._tables[1];\n    const keyLen = key.length;\n    let i,\n      encKey,\n      decKey,\n      rcon = 1;\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error(\"invalid aes key size\");\n    }\n    aes._key = [encKey = key.slice(0), decKey = []];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      let tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (let j = 0; i; j++, i--) {\n      const tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n  // public\n  /* Something like this might appear here eventually\n  name: \"AES\",\n  blockSize: 4,\n  keySizes: [4,6,8],\n  */\n\n  /**\n   * Encrypt an array of 4 big-endian words.\n   * @param {Array} data The plaintext.\n   * @return {Array} The ciphertext.\n   */\n  encrypt(data) {\n    return this._crypt(data, 0);\n  }\n\n  /**\n   * Decrypt an array of 4 big-endian words.\n   * @param {Array} data The ciphertext.\n   * @return {Array} The plaintext.\n   */\n  decrypt(data) {\n    return this._crypt(data, 1);\n  }\n\n  /**\n   * Expand the S-box tables.\n   *\n   * @private\n   */\n  _precompute() {\n    const encTable = this._tables[0];\n    const decTable = this._tables[1];\n    const sbox = encTable[4];\n    const sboxInv = decTable[4];\n    const d = [];\n    const th = [];\n    let xInv, x2, x4, x8;\n\n    // Compute double and third tables\n    for (let i = 0; i < 256; i++) {\n      th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n    }\n    for (let x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n      // Compute sbox\n      let s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n      s = s >> 8 ^ s & 255 ^ 99;\n      sbox[x] = s;\n      sboxInv[s] = x;\n\n      // Compute MixColumns\n      x8 = d[x4 = d[x2 = d[x]]];\n      let tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n      let tEnc = d[s] * 0x101 ^ s * 0x1010100;\n      for (let i = 0; i < 4; i++) {\n        encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n      }\n    }\n\n    // Compactify.  Considerable speedup on Firefox.\n    for (let i = 0; i < 5; i++) {\n      encTable[i] = encTable[i].slice(0);\n      decTable[i] = decTable[i].slice(0);\n    }\n  }\n\n  /**\n   * Encryption and decryption core.\n   * @param {Array} input Four words to be encrypted or decrypted.\n   * @param dir The direction, 0 for encrypt and 1 for decrypt.\n   * @return {Array} The four encrypted or decrypted words.\n   * @private\n   */\n  _crypt(input, dir) {\n    if (input.length !== 4) {\n      throw new Error(\"invalid aes block size\");\n    }\n    const key = this._key[dir];\n    const nInnerRounds = key.length / 4 - 2;\n    const out = [0, 0, 0, 0];\n    const table = this._tables[dir];\n\n    // load up the tables\n    const t0 = table[0];\n    const t1 = table[1];\n    const t2 = table[2];\n    const t3 = table[3];\n    const sbox = table[4];\n\n    // state variables a,b,c,d are loaded with pre-whitened data\n    let a = input[0] ^ key[0];\n    let b = input[dir ? 3 : 1] ^ key[1];\n    let c = input[2] ^ key[2];\n    let d = input[dir ? 1 : 3] ^ key[3];\n    let kIndex = 4;\n    let a2, b2, c2;\n\n    // Inner rounds.  Cribbed from OpenSSL.\n    for (let i = 0; i < nInnerRounds; i++) {\n      a2 = t0[a >>> 24] ^ t1[b >> 16 & 255] ^ t2[c >> 8 & 255] ^ t3[d & 255] ^ key[kIndex];\n      b2 = t0[b >>> 24] ^ t1[c >> 16 & 255] ^ t2[d >> 8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];\n      c2 = t0[c >>> 24] ^ t1[d >> 16 & 255] ^ t2[a >> 8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];\n      d = t0[d >>> 24] ^ t1[a >> 16 & 255] ^ t2[b >> 8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a = a2;\n      b = b2;\n      c = c2;\n    }\n\n    // Last round.\n    for (let i = 0; i < 4; i++) {\n      out[dir ? 3 & -i : i] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n      a2 = a;\n      a = b;\n      b = c;\n      c = d;\n      d = a2;\n    }\n    return out;\n  }\n};\n\n/**\n * Random values\n * @namespace\n */\nconst random = {\n  /** \n   * Generate random words with pure js, cryptographically not as strong & safe as native implementation.\n   * @param {TypedArray} typedArray The array to fill.\n   * @return {TypedArray} The random values.\n   */\n  getRandomValues(typedArray) {\n    const words = new Uint32Array(typedArray.buffer);\n    const r = m_w => {\n      let m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n      return function () {\n        m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;\n        m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;\n        const result = ((m_z << 0x10) + m_w & mask) / 0x100000000 + .5;\n        return result * (Math.random() > .5 ? 1 : -1);\n      };\n    };\n    for (let i = 0, rcache; i < typedArray.length; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n      rcache = _r() * 0x3ade67b7;\n      words[i / 4] = _r() * 0x100000000 | 0;\n    }\n    return typedArray;\n  }\n};\n\n/** @fileOverview CTR mode implementation.\n *\n * Special thanks to Roy Nicholson for pointing out a bug in our\n * implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** Brian Gladman's CTR Mode.\n* @constructor\n* @param {Object} _prf The aes instance to generate key.\n* @param {bitArray} _iv The iv for ctr mode, it must be 128 bits.\n*/\n\nconst mode = {};\n\n/**\n * Brian Gladman's CTR Mode.\n * @namespace\n */\nmode.ctrGladman = class {\n  constructor(prf, iv) {\n    this._prf = prf;\n    this._initIv = iv;\n    this._iv = iv;\n  }\n  reset() {\n    this._iv = this._initIv;\n  }\n\n  /** Input some data to calculate.\n   * @param {bitArray} data the data to process, it must be intergral multiple of 128 bits unless it's the last.\n   */\n  update(data) {\n    return this.calculate(this._prf, data, this._iv);\n  }\n  incWord(word) {\n    if ((word >> 24 & 0xff) === 0xff) {\n      //overflow\n      let b1 = word >> 16 & 0xff;\n      let b2 = word >> 8 & 0xff;\n      let b3 = word & 0xff;\n      if (b1 === 0xff) {\n        // overflow b1   \n        b1 = 0;\n        if (b2 === 0xff) {\n          b2 = 0;\n          if (b3 === 0xff) {\n            b3 = 0;\n          } else {\n            ++b3;\n          }\n        } else {\n          ++b2;\n        }\n      } else {\n        ++b1;\n      }\n      word = 0;\n      word += b1 << 16;\n      word += b2 << 8;\n      word += b3;\n    } else {\n      word += 0x01 << 24;\n    }\n    return word;\n  }\n  incCounter(counter) {\n    if ((counter[0] = this.incWord(counter[0])) === 0) {\n      // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n      counter[1] = this.incWord(counter[1]);\n    }\n  }\n  calculate(prf, data, iv) {\n    let l;\n    if (!(l = data.length)) {\n      return [];\n    }\n    const bl = bitArray.bitLength(data);\n    for (let i = 0; i < l; i += 4) {\n      this.incCounter(iv);\n      const e = prf.encrypt(iv);\n      data[i] ^= e[0];\n      data[i + 1] ^= e[1];\n      data[i + 2] ^= e[2];\n      data[i + 3] ^= e[3];\n    }\n    return bitArray.clamp(data, bl);\n  }\n};\nconst misc = {\n  importKey(password) {\n    return new misc.hmacSha1(codec.bytes.toBits(password));\n  },\n  pbkdf2(prf, salt, count, length) {\n    count = count || 10000;\n    if (length < 0 || count < 0) {\n      throw new Error(\"invalid params to pbkdf2\");\n    }\n    const byteLength = (length >> 5) + 1 << 2;\n    let u, ui, i, j, k;\n    const arrayBuffer = new ArrayBuffer(byteLength);\n    const out = new DataView(arrayBuffer);\n    let outLength = 0;\n    const b = bitArray;\n    salt = codec.bytes.toBits(salt);\n    for (k = 1; outLength < (byteLength || 1); k++) {\n      u = ui = prf.encrypt(b.concat(salt, [k]));\n      for (i = 1; i < count; i++) {\n        ui = prf.encrypt(ui);\n        for (j = 0; j < ui.length; j++) {\n          u[j] ^= ui[j];\n        }\n      }\n      for (i = 0; outLength < (byteLength || 1) && i < u.length; i++) {\n        out.setInt32(outLength, u[i]);\n        outLength += 4;\n      }\n    }\n    return arrayBuffer.slice(0, length / 8);\n  }\n};\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=hash.sha1] The hash function to use.\n */\nmisc.hmacSha1 = class {\n  constructor(key) {\n    const hmac = this;\n    const Hash = hmac._hash = hash.sha1;\n    const exKey = [[], []];\n    hmac._baseHash = [new Hash(), new Hash()];\n    const bs = hmac._baseHash[0].blockSize / 32;\n    if (key.length > bs) {\n      key = new Hash().update(key).finalize();\n    }\n    for (let i = 0; i < bs; i++) {\n      exKey[0][i] = key[i] ^ 0x36363636;\n      exKey[1][i] = key[i] ^ 0x5C5C5C5C;\n    }\n    hmac._baseHash[0].update(exKey[0]);\n    hmac._baseHash[1].update(exKey[1]);\n    hmac._resultHash = new Hash(hmac._baseHash[0]);\n  }\n  reset() {\n    const hmac = this;\n    hmac._resultHash = new hmac._hash(hmac._baseHash[0]);\n    hmac._updated = false;\n  }\n  update(data) {\n    const hmac = this;\n    hmac._updated = true;\n    hmac._resultHash.update(data);\n  }\n  digest() {\n    const hmac = this;\n    const w = hmac._resultHash.finalize();\n    const result = new hmac._hash(hmac._baseHash[1]).update(w).finalize();\n    hmac.reset();\n    return result;\n  }\n  encrypt(data) {\n    if (!this._updated) {\n      this.update(data);\n      return this.digest(data);\n    } else {\n      throw new Error(\"encrypt on already updated hmac called!\");\n    }\n  }\n};\nexport { cipher, codec, misc, mode, random };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global crypto */\n\nimport { FUNCTION_TYPE, UNDEFINED_TYPE } from \"../constants.js\";\nimport { random } from \"./codecs/sjcl.js\";\nconst GET_RANDOM_VALUES_SUPPORTED = typeof crypto != UNDEFINED_TYPE && typeof crypto.getRandomValues == FUNCTION_TYPE;\nconst ERR_INVALID_PASSWORD = \"Invalid password\";\nconst ERR_INVALID_SIGNATURE = \"Invalid signature\";\nconst ERR_ABORT_CHECK_PASSWORD = \"zipjs-abort-check-password\";\nexport { getRandomValues, ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, ERR_ABORT_CHECK_PASSWORD };\nfunction getRandomValues(array) {\n  if (GET_RANDOM_VALUES_SUPPORTED) {\n    return crypto.getRandomValues(array);\n  } else {\n    return random.getRandomValues(array);\n  }\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global crypto, TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { UNDEFINED_VALUE, UNDEFINED_TYPE, FUNCTION_TYPE } from \"../constants.js\";\nimport { encodeText } from \"./../util/encode-text.js\";\nimport { cipher, codec, misc, mode } from \"./codecs/sjcl.js\";\nimport { ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, ERR_ABORT_CHECK_PASSWORD, getRandomValues } from \"./common-crypto.js\";\nconst BLOCK_LENGTH = 16;\nconst RAW_FORMAT = \"raw\";\nconst PBKDF2_ALGORITHM = {\n  name: \"PBKDF2\"\n};\nconst HASH_ALGORITHM = {\n  name: \"HMAC\"\n};\nconst HASH_FUNCTION = \"SHA-1\";\nconst BASE_KEY_ALGORITHM = Object.assign({\n  hash: HASH_ALGORITHM\n}, PBKDF2_ALGORITHM);\nconst DERIVED_BITS_ALGORITHM = Object.assign({\n  iterations: 1000,\n  hash: {\n    name: HASH_FUNCTION\n  }\n}, PBKDF2_ALGORITHM);\nconst DERIVED_BITS_USAGE = [\"deriveBits\"];\nconst SALT_LENGTH = [8, 12, 16];\nconst KEY_LENGTH = [16, 24, 32];\nconst SIGNATURE_LENGTH = 10;\nconst COUNTER_DEFAULT_VALUE = [0, 0, 0, 0];\n// deno-lint-ignore valid-typeof\nconst CRYPTO_API_SUPPORTED = typeof crypto != UNDEFINED_TYPE;\nconst subtle = CRYPTO_API_SUPPORTED && crypto.subtle;\nconst SUBTLE_API_SUPPORTED = CRYPTO_API_SUPPORTED && typeof subtle != UNDEFINED_TYPE;\nconst codecBytes = codec.bytes;\nconst Aes = cipher.aes;\nconst CtrGladman = mode.ctrGladman;\nconst HmacSha1 = misc.hmacSha1;\nlet IMPORT_KEY_SUPPORTED = CRYPTO_API_SUPPORTED && SUBTLE_API_SUPPORTED && typeof subtle.importKey == FUNCTION_TYPE;\nlet DERIVE_BITS_SUPPORTED = CRYPTO_API_SUPPORTED && SUBTLE_API_SUPPORTED && typeof subtle.deriveBits == FUNCTION_TYPE;\nclass AESDecryptionStream extends TransformStream {\n  constructor({\n    password,\n    rawPassword,\n    signed,\n    encryptionStrength,\n    checkPasswordOnly\n  }) {\n    super({\n      start() {\n        Object.assign(this, {\n          ready: new Promise(resolve => this.resolveReady = resolve),\n          password: encodePassword(password, rawPassword),\n          signed,\n          strength: encryptionStrength - 1,\n          pending: new Uint8Array()\n        });\n      },\n      async transform(chunk, controller) {\n        const aesCrypto = this;\n        const {\n          password,\n          strength,\n          resolveReady,\n          ready\n        } = aesCrypto;\n        if (password) {\n          await createDecryptionKeys(aesCrypto, strength, password, subarray(chunk, 0, SALT_LENGTH[strength] + 2));\n          chunk = subarray(chunk, SALT_LENGTH[strength] + 2);\n          if (checkPasswordOnly) {\n            controller.error(new Error(ERR_ABORT_CHECK_PASSWORD));\n          } else {\n            resolveReady();\n          }\n        } else {\n          await ready;\n        }\n        const output = new Uint8Array(chunk.length - SIGNATURE_LENGTH - (chunk.length - SIGNATURE_LENGTH) % BLOCK_LENGTH);\n        controller.enqueue(append(aesCrypto, chunk, output, 0, SIGNATURE_LENGTH, true));\n      },\n      async flush(controller) {\n        const {\n          signed,\n          ctr,\n          hmac,\n          pending,\n          ready\n        } = this;\n        if (hmac && ctr) {\n          await ready;\n          const chunkToDecrypt = subarray(pending, 0, pending.length - SIGNATURE_LENGTH);\n          const originalSignature = subarray(pending, pending.length - SIGNATURE_LENGTH);\n          let decryptedChunkArray = new Uint8Array();\n          if (chunkToDecrypt.length) {\n            const encryptedChunk = toBits(codecBytes, chunkToDecrypt);\n            hmac.update(encryptedChunk);\n            const decryptedChunk = ctr.update(encryptedChunk);\n            decryptedChunkArray = fromBits(codecBytes, decryptedChunk);\n          }\n          if (signed) {\n            const signature = subarray(fromBits(codecBytes, hmac.digest()), 0, SIGNATURE_LENGTH);\n            for (let indexSignature = 0; indexSignature < SIGNATURE_LENGTH; indexSignature++) {\n              if (signature[indexSignature] != originalSignature[indexSignature]) {\n                throw new Error(ERR_INVALID_SIGNATURE);\n              }\n            }\n          }\n          controller.enqueue(decryptedChunkArray);\n        }\n      }\n    });\n  }\n}\nclass AESEncryptionStream extends TransformStream {\n  constructor({\n    password,\n    rawPassword,\n    encryptionStrength\n  }) {\n    // deno-lint-ignore prefer-const\n    let stream;\n    super({\n      start() {\n        Object.assign(this, {\n          ready: new Promise(resolve => this.resolveReady = resolve),\n          password: encodePassword(password, rawPassword),\n          strength: encryptionStrength - 1,\n          pending: new Uint8Array()\n        });\n      },\n      async transform(chunk, controller) {\n        const aesCrypto = this;\n        const {\n          password,\n          strength,\n          resolveReady,\n          ready\n        } = aesCrypto;\n        let preamble = new Uint8Array();\n        if (password) {\n          preamble = await createEncryptionKeys(aesCrypto, strength, password);\n          resolveReady();\n        } else {\n          await ready;\n        }\n        const output = new Uint8Array(preamble.length + chunk.length - chunk.length % BLOCK_LENGTH);\n        output.set(preamble, 0);\n        controller.enqueue(append(aesCrypto, chunk, output, preamble.length, 0));\n      },\n      async flush(controller) {\n        const {\n          ctr,\n          hmac,\n          pending,\n          ready\n        } = this;\n        if (hmac && ctr) {\n          await ready;\n          let encryptedChunkArray = new Uint8Array();\n          if (pending.length) {\n            const encryptedChunk = ctr.update(toBits(codecBytes, pending));\n            hmac.update(encryptedChunk);\n            encryptedChunkArray = fromBits(codecBytes, encryptedChunk);\n          }\n          stream.signature = fromBits(codecBytes, hmac.digest()).slice(0, SIGNATURE_LENGTH);\n          controller.enqueue(concat(encryptedChunkArray, stream.signature));\n        }\n      }\n    });\n    stream = this;\n  }\n}\nexport { AESDecryptionStream, AESEncryptionStream, ERR_INVALID_PASSWORD };\nfunction append(aesCrypto, input, output, paddingStart, paddingEnd, verifySignature) {\n  const {\n    ctr,\n    hmac,\n    pending\n  } = aesCrypto;\n  const inputLength = input.length - paddingEnd;\n  if (pending.length) {\n    input = concat(pending, input);\n    output = expand(output, inputLength - inputLength % BLOCK_LENGTH);\n  }\n  let offset;\n  for (offset = 0; offset <= inputLength - BLOCK_LENGTH; offset += BLOCK_LENGTH) {\n    const inputChunk = toBits(codecBytes, subarray(input, offset, offset + BLOCK_LENGTH));\n    if (verifySignature) {\n      hmac.update(inputChunk);\n    }\n    const outputChunk = ctr.update(inputChunk);\n    if (!verifySignature) {\n      hmac.update(outputChunk);\n    }\n    output.set(fromBits(codecBytes, outputChunk), offset + paddingStart);\n  }\n  aesCrypto.pending = subarray(input, offset);\n  return output;\n}\nasync function createDecryptionKeys(decrypt, strength, password, preamble) {\n  const passwordVerificationKey = await createKeys(decrypt, strength, password, subarray(preamble, 0, SALT_LENGTH[strength]));\n  const passwordVerification = subarray(preamble, SALT_LENGTH[strength]);\n  if (passwordVerificationKey[0] != passwordVerification[0] || passwordVerificationKey[1] != passwordVerification[1]) {\n    throw new Error(ERR_INVALID_PASSWORD);\n  }\n}\nasync function createEncryptionKeys(encrypt, strength, password) {\n  const salt = getRandomValues(new Uint8Array(SALT_LENGTH[strength]));\n  const passwordVerification = await createKeys(encrypt, strength, password, salt);\n  return concat(salt, passwordVerification);\n}\nasync function createKeys(aesCrypto, strength, password, salt) {\n  aesCrypto.password = null;\n  const baseKey = await importKey(RAW_FORMAT, password, BASE_KEY_ALGORITHM, false, DERIVED_BITS_USAGE);\n  const derivedBits = await deriveBits(Object.assign({\n    salt\n  }, DERIVED_BITS_ALGORITHM), baseKey, 8 * (KEY_LENGTH[strength] * 2 + 2));\n  const compositeKey = new Uint8Array(derivedBits);\n  const key = toBits(codecBytes, subarray(compositeKey, 0, KEY_LENGTH[strength]));\n  const authentication = toBits(codecBytes, subarray(compositeKey, KEY_LENGTH[strength], KEY_LENGTH[strength] * 2));\n  const passwordVerification = subarray(compositeKey, KEY_LENGTH[strength] * 2);\n  Object.assign(aesCrypto, {\n    keys: {\n      key,\n      authentication,\n      passwordVerification\n    },\n    ctr: new CtrGladman(new Aes(key), Array.from(COUNTER_DEFAULT_VALUE)),\n    hmac: new HmacSha1(authentication)\n  });\n  return passwordVerification;\n}\nasync function importKey(format, password, algorithm, extractable, keyUsages) {\n  if (IMPORT_KEY_SUPPORTED) {\n    try {\n      return await subtle.importKey(format, password, algorithm, extractable, keyUsages);\n    } catch (_error) {\n      IMPORT_KEY_SUPPORTED = false;\n      return misc.importKey(password);\n    }\n  } else {\n    return misc.importKey(password);\n  }\n}\nasync function deriveBits(algorithm, baseKey, length) {\n  if (DERIVE_BITS_SUPPORTED) {\n    try {\n      return await subtle.deriveBits(algorithm, baseKey, length);\n    } catch (_error) {\n      DERIVE_BITS_SUPPORTED = false;\n      return misc.pbkdf2(baseKey, algorithm.salt, DERIVED_BITS_ALGORITHM.iterations, length);\n    }\n  } else {\n    return misc.pbkdf2(baseKey, algorithm.salt, DERIVED_BITS_ALGORITHM.iterations, length);\n  }\n}\nfunction encodePassword(password, rawPassword) {\n  if (rawPassword === UNDEFINED_VALUE) {\n    return encodeText(password);\n  } else {\n    return rawPassword;\n  }\n}\nfunction concat(leftArray, rightArray) {\n  let array = leftArray;\n  if (leftArray.length + rightArray.length) {\n    array = new Uint8Array(leftArray.length + rightArray.length);\n    array.set(leftArray, 0);\n    array.set(rightArray, leftArray.length);\n  }\n  return array;\n}\nfunction expand(inputArray, length) {\n  if (length && length > inputArray.length) {\n    const array = inputArray;\n    inputArray = new Uint8Array(length);\n    inputArray.set(array, 0);\n  }\n  return inputArray;\n}\nfunction subarray(array, begin, end) {\n  return array.subarray(begin, end);\n}\nfunction fromBits(codecBytes, chunk) {\n  return codecBytes.fromBits(chunk);\n}\nfunction toBits(codecBytes, chunk) {\n  return codecBytes.toBits(chunk);\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { Crc32 } from \"./codecs/crc32.js\";\nimport { ERR_INVALID_PASSWORD, ERR_ABORT_CHECK_PASSWORD, getRandomValues } from \"./common-crypto.js\";\nconst HEADER_LENGTH = 12;\nclass ZipCryptoDecryptionStream extends TransformStream {\n  constructor({\n    password,\n    passwordVerification,\n    checkPasswordOnly\n  }) {\n    super({\n      start() {\n        Object.assign(this, {\n          password,\n          passwordVerification\n        });\n        createKeys(this, password);\n      },\n      transform(chunk, controller) {\n        const zipCrypto = this;\n        if (zipCrypto.password) {\n          const decryptedHeader = decrypt(zipCrypto, chunk.subarray(0, HEADER_LENGTH));\n          zipCrypto.password = null;\n          if (decryptedHeader[HEADER_LENGTH - 1] != zipCrypto.passwordVerification) {\n            throw new Error(ERR_INVALID_PASSWORD);\n          }\n          chunk = chunk.subarray(HEADER_LENGTH);\n        }\n        if (checkPasswordOnly) {\n          controller.error(new Error(ERR_ABORT_CHECK_PASSWORD));\n        } else {\n          controller.enqueue(decrypt(zipCrypto, chunk));\n        }\n      }\n    });\n  }\n}\nclass ZipCryptoEncryptionStream extends TransformStream {\n  constructor({\n    password,\n    passwordVerification\n  }) {\n    super({\n      start() {\n        Object.assign(this, {\n          password,\n          passwordVerification\n        });\n        createKeys(this, password);\n      },\n      transform(chunk, controller) {\n        const zipCrypto = this;\n        let output;\n        let offset;\n        if (zipCrypto.password) {\n          zipCrypto.password = null;\n          const header = getRandomValues(new Uint8Array(HEADER_LENGTH));\n          header[HEADER_LENGTH - 1] = zipCrypto.passwordVerification;\n          output = new Uint8Array(chunk.length + header.length);\n          output.set(encrypt(zipCrypto, header), 0);\n          offset = HEADER_LENGTH;\n        } else {\n          output = new Uint8Array(chunk.length);\n          offset = 0;\n        }\n        output.set(encrypt(zipCrypto, chunk), offset);\n        controller.enqueue(output);\n      }\n    });\n  }\n}\nexport { ZipCryptoDecryptionStream, ZipCryptoEncryptionStream, ERR_INVALID_PASSWORD };\nfunction decrypt(target, input) {\n  const output = new Uint8Array(input.length);\n  for (let index = 0; index < input.length; index++) {\n    output[index] = getByte(target) ^ input[index];\n    updateKeys(target, output[index]);\n  }\n  return output;\n}\nfunction encrypt(target, input) {\n  const output = new Uint8Array(input.length);\n  for (let index = 0; index < input.length; index++) {\n    output[index] = getByte(target) ^ input[index];\n    updateKeys(target, input[index]);\n  }\n  return output;\n}\nfunction createKeys(target, password) {\n  const keys = [0x12345678, 0x23456789, 0x34567890];\n  Object.assign(target, {\n    keys,\n    crcKey0: new Crc32(keys[0]),\n    crcKey2: new Crc32(keys[2])\n  });\n  for (let index = 0; index < password.length; index++) {\n    updateKeys(target, password.charCodeAt(index));\n  }\n}\nfunction updateKeys(target, byte) {\n  let [key0, key1, key2] = target.keys;\n  target.crcKey0.append([byte]);\n  key0 = ~target.crcKey0.get();\n  key1 = getInt32(Math.imul(getInt32(key1 + getInt8(key0)), 134775813) + 1);\n  target.crcKey2.append([key1 >>> 24]);\n  key2 = ~target.crcKey2.get();\n  target.keys = [key0, key1, key2];\n}\nfunction getByte(target) {\n  const temp = target.keys[2] | 2;\n  return getInt8(Math.imul(temp, temp ^ 1) >>> 8);\n}\nfunction getInt8(number) {\n  return number & 0xFF;\n}\nfunction getInt32(number) {\n  return number & 0xFFFFFFFF;\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { Crc32Stream } from \"./crc32-stream.js\";\nimport { AESEncryptionStream, AESDecryptionStream } from \"./aes-crypto-stream.js\";\nimport { ZipCryptoEncryptionStream, ZipCryptoDecryptionStream } from \"./zip-crypto-stream.js\";\nimport { ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, ERR_ABORT_CHECK_PASSWORD } from \"./common-crypto.js\";\nconst COMPRESSION_FORMAT = \"deflate-raw\";\nclass DeflateStream extends TransformStream {\n  constructor(options, {\n    chunkSize,\n    CompressionStream,\n    CompressionStreamNative\n  }) {\n    super({});\n    const {\n      compressed,\n      encrypted,\n      useCompressionStream,\n      zipCrypto,\n      signed,\n      level\n    } = options;\n    const stream = this;\n    let crc32Stream, encryptionStream;\n    let readable = filterEmptyChunks(super.readable);\n    if ((!encrypted || zipCrypto) && signed) {\n      crc32Stream = new Crc32Stream();\n      readable = pipeThrough(readable, crc32Stream);\n    }\n    if (compressed) {\n      readable = pipeThroughCommpressionStream(readable, useCompressionStream, {\n        level,\n        chunkSize\n      }, CompressionStreamNative, CompressionStream);\n    }\n    if (encrypted) {\n      if (zipCrypto) {\n        readable = pipeThrough(readable, new ZipCryptoEncryptionStream(options));\n      } else {\n        encryptionStream = new AESEncryptionStream(options);\n        readable = pipeThrough(readable, encryptionStream);\n      }\n    }\n    setReadable(stream, readable, () => {\n      let signature;\n      if (encrypted && !zipCrypto) {\n        signature = encryptionStream.signature;\n      }\n      if ((!encrypted || zipCrypto) && signed) {\n        signature = new DataView(crc32Stream.value.buffer).getUint32(0);\n      }\n      stream.signature = signature;\n    });\n  }\n}\nclass InflateStream extends TransformStream {\n  constructor(options, {\n    chunkSize,\n    DecompressionStream,\n    DecompressionStreamNative\n  }) {\n    super({});\n    const {\n      zipCrypto,\n      encrypted,\n      signed,\n      signature,\n      compressed,\n      useCompressionStream\n    } = options;\n    let crc32Stream, decryptionStream;\n    let readable = filterEmptyChunks(super.readable);\n    if (encrypted) {\n      if (zipCrypto) {\n        readable = pipeThrough(readable, new ZipCryptoDecryptionStream(options));\n      } else {\n        decryptionStream = new AESDecryptionStream(options);\n        readable = pipeThrough(readable, decryptionStream);\n      }\n    }\n    if (compressed) {\n      readable = pipeThroughCommpressionStream(readable, useCompressionStream, {\n        chunkSize\n      }, DecompressionStreamNative, DecompressionStream);\n    }\n    if ((!encrypted || zipCrypto) && signed) {\n      crc32Stream = new Crc32Stream();\n      readable = pipeThrough(readable, crc32Stream);\n    }\n    setReadable(this, readable, () => {\n      if ((!encrypted || zipCrypto) && signed) {\n        const dataViewSignature = new DataView(crc32Stream.value.buffer);\n        if (signature != dataViewSignature.getUint32(0, false)) {\n          throw new Error(ERR_INVALID_SIGNATURE);\n        }\n      }\n    });\n  }\n}\nexport { DeflateStream, InflateStream, ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, ERR_ABORT_CHECK_PASSWORD };\nfunction filterEmptyChunks(readable) {\n  return pipeThrough(readable, new TransformStream({\n    transform(chunk, controller) {\n      if (chunk && chunk.length) {\n        controller.enqueue(chunk);\n      }\n    }\n  }));\n}\nfunction setReadable(stream, readable, flush) {\n  readable = pipeThrough(readable, new TransformStream({\n    flush\n  }));\n  Object.defineProperty(stream, \"readable\", {\n    get() {\n      return readable;\n    }\n  });\n}\nfunction pipeThroughCommpressionStream(readable, useCompressionStream, options, CodecStreamNative, CodecStream) {\n  try {\n    const CompressionStream = useCompressionStream && CodecStreamNative ? CodecStreamNative : CodecStream;\n    readable = pipeThrough(readable, new CompressionStream(COMPRESSION_FORMAT, options));\n  } catch (error) {\n    if (useCompressionStream) {\n      try {\n        readable = pipeThrough(readable, new CodecStream(COMPRESSION_FORMAT, options));\n      } catch (error) {\n        return readable;\n      }\n    } else {\n      return readable;\n    }\n  }\n  return readable;\n}\nfunction pipeThrough(readable, transformStream) {\n  return readable.pipeThrough(transformStream);\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, ERR_ABORT_CHECK_PASSWORD, InflateStream, DeflateStream } from \"./zip-entry-stream.js\";\nconst MESSAGE_EVENT_TYPE = \"message\";\nconst MESSAGE_START = \"start\";\nconst MESSAGE_PULL = \"pull\";\nconst MESSAGE_DATA = \"data\";\nconst MESSAGE_ACK_DATA = \"ack\";\nconst MESSAGE_CLOSE = \"close\";\nconst CODEC_DEFLATE = \"deflate\";\nconst CODEC_INFLATE = \"inflate\";\nexport { CODEC_DEFLATE, CODEC_INFLATE, MESSAGE_EVENT_TYPE, MESSAGE_START, MESSAGE_PULL, MESSAGE_DATA, MESSAGE_ACK_DATA, MESSAGE_CLOSE, ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, ERR_ABORT_CHECK_PASSWORD, CodecStream, ChunkStream };\nclass CodecStream extends TransformStream {\n  constructor(options, config) {\n    super({});\n    const codec = this;\n    const {\n      codecType\n    } = options;\n    let Stream;\n    if (codecType.startsWith(CODEC_DEFLATE)) {\n      Stream = DeflateStream;\n    } else if (codecType.startsWith(CODEC_INFLATE)) {\n      Stream = InflateStream;\n    }\n    let outputSize = 0;\n    let inputSize = 0;\n    const stream = new Stream(options, config);\n    const readable = super.readable;\n    const inputSizeStream = new TransformStream({\n      transform(chunk, controller) {\n        if (chunk && chunk.length) {\n          inputSize += chunk.length;\n          controller.enqueue(chunk);\n        }\n      },\n      flush() {\n        Object.assign(codec, {\n          inputSize\n        });\n      }\n    });\n    const outputSizeStream = new TransformStream({\n      transform(chunk, controller) {\n        if (chunk && chunk.length) {\n          outputSize += chunk.length;\n          controller.enqueue(chunk);\n        }\n      },\n      flush() {\n        const {\n          signature\n        } = stream;\n        Object.assign(codec, {\n          signature,\n          outputSize,\n          inputSize\n        });\n      }\n    });\n    Object.defineProperty(codec, \"readable\", {\n      get() {\n        return readable.pipeThrough(inputSizeStream).pipeThrough(stream).pipeThrough(outputSizeStream);\n      }\n    });\n  }\n}\nclass ChunkStream extends TransformStream {\n  constructor(chunkSize) {\n    let pendingChunk;\n    super({\n      transform,\n      flush(controller) {\n        if (pendingChunk && pendingChunk.length) {\n          controller.enqueue(pendingChunk);\n        }\n      }\n    });\n    function transform(chunk, controller) {\n      if (pendingChunk) {\n        const newChunk = new Uint8Array(pendingChunk.length + chunk.length);\n        newChunk.set(pendingChunk);\n        newChunk.set(chunk, pendingChunk.length);\n        chunk = newChunk;\n        pendingChunk = null;\n      }\n      if (chunk.length > chunkSize) {\n        controller.enqueue(chunk.slice(0, chunkSize));\n        transform(chunk.slice(chunkSize), controller);\n      } else {\n        pendingChunk = chunk;\n      }\n    }\n  }\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global Worker, URL, TransformStream, WritableStream */\n\nimport { UNDEFINED_TYPE, FUNCTION_TYPE } from \"./constants.js\";\nimport { CodecStream, ChunkStream, MESSAGE_EVENT_TYPE, MESSAGE_START, MESSAGE_PULL, MESSAGE_DATA, MESSAGE_ACK_DATA, MESSAGE_CLOSE } from \"./streams/codec-stream.js\";\n\n// deno-lint-ignore valid-typeof\nlet WEB_WORKERS_SUPPORTED = typeof Worker != UNDEFINED_TYPE;\nexport { CodecWorker };\nclass CodecWorker {\n  constructor(workerData, {\n    readable,\n    writable\n  }, {\n    options,\n    config,\n    streamOptions,\n    useWebWorkers,\n    transferStreams,\n    scripts\n  }, onTaskFinished) {\n    const {\n      signal\n    } = streamOptions;\n    Object.assign(workerData, {\n      busy: true,\n      readable: readable.pipeThrough(new ChunkStream(config.chunkSize)).pipeThrough(new ProgressWatcherStream(readable, streamOptions), {\n        signal\n      }),\n      writable,\n      options: Object.assign({}, options),\n      scripts,\n      transferStreams,\n      terminate() {\n        return new Promise(resolve => {\n          const {\n            worker,\n            busy\n          } = workerData;\n          if (worker) {\n            if (busy) {\n              workerData.resolveTerminated = resolve;\n            } else {\n              worker.terminate();\n              resolve();\n            }\n            workerData.interface = null;\n          } else {\n            resolve();\n          }\n        });\n      },\n      onTaskFinished() {\n        const {\n          resolveTerminated\n        } = workerData;\n        if (resolveTerminated) {\n          workerData.resolveTerminated = null;\n          workerData.terminated = true;\n          workerData.worker.terminate();\n          resolveTerminated();\n        }\n        workerData.busy = false;\n        onTaskFinished(workerData);\n      }\n    });\n    return (useWebWorkers && WEB_WORKERS_SUPPORTED ? createWebWorkerInterface : createWorkerInterface)(workerData, config);\n  }\n}\nclass ProgressWatcherStream extends TransformStream {\n  constructor(readableSource, {\n    onstart,\n    onprogress,\n    size,\n    onend\n  }) {\n    let chunkOffset = 0;\n    super({\n      async start() {\n        if (onstart) {\n          await callHandler(onstart, size);\n        }\n      },\n      async transform(chunk, controller) {\n        chunkOffset += chunk.length;\n        if (onprogress) {\n          await callHandler(onprogress, chunkOffset, size);\n        }\n        controller.enqueue(chunk);\n      },\n      async flush() {\n        readableSource.size = chunkOffset;\n        if (onend) {\n          await callHandler(onend, chunkOffset);\n        }\n      }\n    });\n  }\n}\nasync function callHandler(handler, ...parameters) {\n  try {\n    await handler(...parameters);\n  } catch (_error) {\n    // ignored\n  }\n}\nfunction createWorkerInterface(workerData, config) {\n  return {\n    run: () => runWorker(workerData, config)\n  };\n}\nfunction createWebWorkerInterface(workerData, config) {\n  const {\n    baseURL,\n    chunkSize\n  } = config;\n  if (!workerData.interface) {\n    let worker;\n    try {\n      worker = getWebWorker(workerData.scripts[0], baseURL, workerData);\n    } catch (error) {\n      WEB_WORKERS_SUPPORTED = false;\n      return createWorkerInterface(workerData, config);\n    }\n    Object.assign(workerData, {\n      worker,\n      interface: {\n        run: () => runWebWorker(workerData, {\n          chunkSize\n        })\n      }\n    });\n  }\n  return workerData.interface;\n}\nasync function runWorker({\n  options,\n  readable,\n  writable,\n  onTaskFinished\n}, config) {\n  try {\n    const codecStream = new CodecStream(options, config);\n    await readable.pipeThrough(codecStream).pipeTo(writable, {\n      preventClose: true,\n      preventAbort: true\n    });\n    const {\n      signature,\n      inputSize,\n      outputSize\n    } = codecStream;\n    return {\n      signature,\n      inputSize,\n      outputSize\n    };\n  } finally {\n    onTaskFinished();\n  }\n}\nasync function runWebWorker(workerData, config) {\n  let resolveResult, rejectResult;\n  const result = new Promise((resolve, reject) => {\n    resolveResult = resolve;\n    rejectResult = reject;\n  });\n  Object.assign(workerData, {\n    reader: null,\n    writer: null,\n    resolveResult,\n    rejectResult,\n    result\n  });\n  const {\n    readable,\n    options,\n    scripts\n  } = workerData;\n  const {\n    writable,\n    closed\n  } = watchClosedStream(workerData.writable);\n  const streamsTransferred = sendMessage({\n    type: MESSAGE_START,\n    scripts: scripts.slice(1),\n    options,\n    config,\n    readable,\n    writable\n  }, workerData);\n  if (!streamsTransferred) {\n    Object.assign(workerData, {\n      reader: readable.getReader(),\n      writer: writable.getWriter()\n    });\n  }\n  const resultValue = await result;\n  if (!streamsTransferred) {\n    await writable.getWriter().close();\n  }\n  await closed;\n  return resultValue;\n}\nfunction watchClosedStream(writableSource) {\n  let resolveStreamClosed;\n  const closed = new Promise(resolve => resolveStreamClosed = resolve);\n  const writable = new WritableStream({\n    async write(chunk) {\n      const writer = writableSource.getWriter();\n      await writer.ready;\n      await writer.write(chunk);\n      writer.releaseLock();\n    },\n    close() {\n      resolveStreamClosed();\n    },\n    abort(reason) {\n      const writer = writableSource.getWriter();\n      return writer.abort(reason);\n    }\n  });\n  return {\n    writable,\n    closed\n  };\n}\nlet classicWorkersSupported = true;\nlet transferStreamsSupported = true;\nfunction getWebWorker(url, baseURL, workerData) {\n  const workerOptions = {\n    type: \"module\"\n  };\n  let scriptUrl, worker;\n  // deno-lint-ignore valid-typeof\n  if (typeof url == FUNCTION_TYPE) {\n    url = url();\n  }\n  try {\n    scriptUrl = new URL(url, baseURL);\n  } catch (_error) {\n    scriptUrl = url;\n  }\n  if (classicWorkersSupported) {\n    try {\n      worker = new Worker(scriptUrl);\n    } catch (_error) {\n      classicWorkersSupported = false;\n      worker = new Worker(scriptUrl, workerOptions);\n    }\n  } else {\n    worker = new Worker(scriptUrl, workerOptions);\n  }\n  worker.addEventListener(MESSAGE_EVENT_TYPE, event => onMessage(event, workerData));\n  return worker;\n}\nfunction sendMessage(message, {\n  worker,\n  writer,\n  onTaskFinished,\n  transferStreams\n}) {\n  try {\n    let {\n      value,\n      readable,\n      writable\n    } = message;\n    const transferables = [];\n    if (value) {\n      if (value.byteLength < value.buffer.byteLength) {\n        message.value = value.buffer.slice(0, value.byteLength);\n      } else {\n        message.value = value.buffer;\n      }\n      transferables.push(message.value);\n    }\n    if (transferStreams && transferStreamsSupported) {\n      if (readable) {\n        transferables.push(readable);\n      }\n      if (writable) {\n        transferables.push(writable);\n      }\n    } else {\n      message.readable = message.writable = null;\n    }\n    if (transferables.length) {\n      try {\n        worker.postMessage(message, transferables);\n        return true;\n      } catch (_error) {\n        transferStreamsSupported = false;\n        message.readable = message.writable = null;\n        worker.postMessage(message);\n      }\n    } else {\n      worker.postMessage(message);\n    }\n  } catch (error) {\n    if (writer) {\n      writer.releaseLock();\n    }\n    onTaskFinished();\n    throw error;\n  }\n}\nasync function onMessage({\n  data\n}, workerData) {\n  const {\n    type,\n    value,\n    messageId,\n    result,\n    error\n  } = data;\n  const {\n    reader,\n    writer,\n    resolveResult,\n    rejectResult,\n    onTaskFinished\n  } = workerData;\n  try {\n    if (error) {\n      const {\n        message,\n        stack,\n        code,\n        name\n      } = error;\n      const responseError = new Error(message);\n      Object.assign(responseError, {\n        stack,\n        code,\n        name\n      });\n      close(responseError);\n    } else {\n      if (type == MESSAGE_PULL) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        sendMessage({\n          type: MESSAGE_DATA,\n          value,\n          done,\n          messageId\n        }, workerData);\n      }\n      if (type == MESSAGE_DATA) {\n        await writer.ready;\n        await writer.write(new Uint8Array(value));\n        sendMessage({\n          type: MESSAGE_ACK_DATA,\n          messageId\n        }, workerData);\n      }\n      if (type == MESSAGE_CLOSE) {\n        close(null, result);\n      }\n    }\n  } catch (error) {\n    sendMessage({\n      type: MESSAGE_CLOSE,\n      messageId\n    }, workerData);\n    close(error);\n  }\n  function close(error, result) {\n    if (error) {\n      rejectResult(error);\n    } else {\n      resolveResult(result);\n    }\n    if (writer) {\n      writer.releaseLock();\n    }\n    onTaskFinished();\n  }\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global setTimeout, clearTimeout */\n\nimport { UNDEFINED_VALUE } from \"./constants.js\";\nimport { CODEC_INFLATE, CODEC_DEFLATE, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_ABORT_CHECK_PASSWORD } from \"./streams/codec-stream.js\";\nimport { CodecWorker } from \"./codec-worker.js\";\nlet pool = [];\nconst pendingRequests = [];\nexport { runWorker, terminateWorkers, CODEC_DEFLATE, CODEC_INFLATE, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_ABORT_CHECK_PASSWORD };\nlet indexWorker = 0;\nasync function runWorker(stream, workerOptions) {\n  const {\n    options,\n    config\n  } = workerOptions;\n  const {\n    transferStreams,\n    useWebWorkers,\n    useCompressionStream,\n    codecType,\n    compressed,\n    signed,\n    encrypted\n  } = options;\n  const {\n    workerScripts,\n    maxWorkers\n  } = config;\n  workerOptions.transferStreams = transferStreams || transferStreams === UNDEFINED_VALUE;\n  const streamCopy = !compressed && !signed && !encrypted && !workerOptions.transferStreams;\n  workerOptions.useWebWorkers = !streamCopy && (useWebWorkers || useWebWorkers === UNDEFINED_VALUE && config.useWebWorkers);\n  workerOptions.scripts = workerOptions.useWebWorkers && workerScripts ? workerScripts[codecType] : [];\n  options.useCompressionStream = useCompressionStream || useCompressionStream === UNDEFINED_VALUE && config.useCompressionStream;\n  return (await getWorker()).run();\n  async function getWorker() {\n    const workerData = pool.find(workerData => !workerData.busy);\n    if (workerData) {\n      clearTerminateTimeout(workerData);\n      return new CodecWorker(workerData, stream, workerOptions, onTaskFinished);\n    } else if (pool.length < maxWorkers) {\n      const workerData = {\n        indexWorker\n      };\n      indexWorker++;\n      pool.push(workerData);\n      return new CodecWorker(workerData, stream, workerOptions, onTaskFinished);\n    } else {\n      return new Promise(resolve => pendingRequests.push({\n        resolve,\n        stream,\n        workerOptions\n      }));\n    }\n  }\n  function onTaskFinished(workerData) {\n    if (pendingRequests.length) {\n      const [{\n        resolve,\n        stream,\n        workerOptions\n      }] = pendingRequests.splice(0, 1);\n      resolve(new CodecWorker(workerData, stream, workerOptions, onTaskFinished));\n    } else if (workerData.worker) {\n      clearTerminateTimeout(workerData);\n      terminateWorker(workerData, workerOptions);\n    } else {\n      pool = pool.filter(data => data != workerData);\n    }\n  }\n}\nfunction terminateWorker(workerData, workerOptions) {\n  const {\n    config\n  } = workerOptions;\n  const {\n    terminateWorkerTimeout\n  } = config;\n  if (Number.isFinite(terminateWorkerTimeout) && terminateWorkerTimeout >= 0) {\n    if (workerData.terminated) {\n      workerData.terminated = false;\n    } else {\n      workerData.terminateTimeout = setTimeout(async () => {\n        pool = pool.filter(data => data != workerData);\n        try {\n          await workerData.terminate();\n        } catch (_error) {\n          // ignored\n        }\n      }, terminateWorkerTimeout);\n    }\n  }\n}\nfunction clearTerminateTimeout(workerData) {\n  const {\n    terminateTimeout\n  } = workerData;\n  if (terminateTimeout) {\n    clearTimeout(terminateTimeout);\n    workerData.terminateTimeout = null;\n  }\n}\nasync function terminateWorkers() {\n  await Promise.allSettled(pool.map(workerData => {\n    clearTerminateTimeout(workerData);\n    return workerData.terminate();\n  }));\n}", "function e(e, t = {}) {\n  const n = 'const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self,k=void 0,v=\"undefined\",S=\"function\";class z{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const C=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;C[e]=t}class x{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^C[255&(t^e[n])];this.t=t}get(){return~this.t}}class A extends p{constructor(){let e;const t=new x;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new i(4);new l(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const _={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=_.i(n);return 32===r?e.concat(t):_.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+_.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=_.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=_.i(s);return r.push(_.h(t+i&31,t+i>32?n:r.pop(),1)),r}},I={p:{m(e){const t=_.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)3&s||(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},k(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3&~n||(t.push(r),r=0);return 3&n&&t.push(_.h(8*(3&n),r)),t}}},P=class{constructor(e){const t=this;t.blockSize=512,t.v=[1732584193,4023233417,2562383102,271733878,3285377520],t.S=[1518500249,1859775393,2400959708,3395469782],e?(t.C=e.C.slice(0),t.A=e.A.slice(0),t._=e._):t.reset()}reset(){const e=this;return e.C=e.v.slice(0),e.A=[],e._=0,e}update(e){const t=this;\"string\"==typeof e&&(e=I.I.k(e));const n=t.A=_.concat(t.A,e),r=t._,i=t._=r+_.l(e);if(i>9007199254740991)throw new s(\"Cannot hash more than 2^53 - 1 bits\");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.P(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}D(){const e=this;let t=e.A;const n=e.C;t=_.concat(t,[_.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e._/4294967296)),t.push(0|e._);t.length;)e.P(t.splice(0,16));return e.reset(),n}V(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}R(e,t){return t<<e|t>>>32-e}P(t){const n=this,s=n.C,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.R(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.R(5,o)+n.V(e,c,f,a)+l+i[e]+n.S[r.floor(e/20)]|0;l=a,a=f,f=n.R(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},D={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},V={importKey:e=>new V.B(I.p.k(e)),M(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s(\"invalid params to pbkdf2\");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=_;for(t=I.p.k(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},B:class{constructor(e){const t=this,n=t.U=P,r=[[],[]];t.K=[new n,new n];const s=t.K[0].blockSize/32;e.length>s&&(e=(new n).update(e).D());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.K[0].update(r[0]),t.K[1].update(r[1]),t.N=new n(t.K[0])}reset(){const e=this;e.N=new e.U(e.K[0]),e.O=!1}update(e){this.O=!0,this.N.update(e)}digest(){const e=this,t=e.N.D(),n=new e.U(e.K[1]).update(t).D();return e.reset(),n}encrypt(e){if(this.O)throw new s(\"encrypt on already updated hmac called!\");return this.update(e),this.digest(e)}}},R=typeof h!=v&&typeof h.getRandomValues==S,B=\"Invalid password\",E=\"Invalid signature\",M=\"zipjs-abort-check-password\";function U(e){return R?h.getRandomValues(e):D.getRandomValues(e)}const K=16,N={name:\"PBKDF2\"},O=t.assign({hash:{name:\"HMAC\"}},N),T=t.assign({iterations:1e3,hash:{name:\"SHA-1\"}},N),W=[\"deriveBits\"],j=[8,12,16],H=[16,24,32],L=10,F=[0,0,0,0],q=typeof h!=v,G=q&&h.subtle,J=q&&typeof G!=v,Q=I.p,X=class{constructor(e){const t=this;t.T=[[[],[],[],[],[]],[[],[],[],[],[]]],t.T[0][0][0]||t.W();const n=t.T[0][4],r=t.T[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s(\"invalid aes key size\");for(t.S=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.j(e,0)}decrypt(e){return this.j(e,1)}W(){const e=this.T[0],t=this.T[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}j(e,t){if(4!==e.length)throw new s(\"invalid aes block size\");const n=this.S[t],r=n.length/4-2,i=[0,0,0,0],o=this.T[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},Y=class{constructor(e,t){this.H=e,this.L=t,this.F=t}reset(){this.F=this.L}update(e){return this.q(this.H,e,this.F)}G(e){if(255&~(e>>24))e+=1<<24;else{let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}return e}J(e){0===(e[0]=this.G(e[0]))&&(e[1]=this.G(e[1]))}q(e,t,n){let r;if(!(r=t.length))return[];const s=_.l(t);for(let s=0;r>s;s+=4){this.J(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return _.u(t,s)}},Z=V.B;let $=q&&J&&typeof G.importKey==S,ee=q&&J&&typeof G.deriveBits==S;class te extends p{constructor({password:e,rawPassword:n,signed:r,encryptionStrength:o,checkPasswordOnly:c}){super({start(){t.assign(this,{ready:new u((e=>this.X=e)),password:ie(e,n),signed:r,Y:o-1,pending:new i})},async transform(e,t){const n=this,{password:r,Y:o,X:f,ready:a}=n;r?(await(async(e,t,n,r)=>{const i=await se(e,t,n,ce(r,0,j[t])),o=ce(r,j[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(B)})(n,o,r,ce(e,0,j[o]+2)),e=ce(e,j[o]+2),c?t.error(new s(M)):f()):await a;const l=new i(e.length-L-(e.length-L)%K);t.enqueue(re(n,e,l,0,L,!0))},async flush(e){const{signed:t,Z:n,$:r,pending:o,ready:c}=this;if(r&&n){await c;const f=ce(o,0,o.length-L),a=ce(o,o.length-L);let l=new i;if(f.length){const e=ae(Q,f);r.update(e);const t=n.update(e);l=fe(Q,t)}if(t){const e=ce(fe(Q,r.digest()),0,L);for(let t=0;L>t;t++)if(e[t]!=a[t])throw new s(E)}e.enqueue(l)}}})}}class ne extends p{constructor({password:e,rawPassword:n,encryptionStrength:r}){let s;super({start(){t.assign(this,{ready:new u((e=>this.X=e)),password:ie(e,n),Y:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,Y:s,X:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=U(new i(j[t]));return oe(r,await se(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%K);a.set(f,0),t.enqueue(re(n,e,a,f.length,0))},async flush(e){const{Z:t,$:n,pending:r,ready:o}=this;if(n&&t){await o;let c=new i;if(r.length){const e=t.update(ae(Q,r));n.update(e),c=fe(Q,e)}s.signature=fe(Q,n.digest()).slice(0,L),e.enqueue(oe(c,s.signature))}}}),s=this}}function re(e,t,n,r,s,o){const{Z:c,$:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=oe(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%K)),u=0;l-K>=u;u+=K){const e=ae(Q,ce(t,u,u+K));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(fe(Q,s),u+r)}return e.pending=ce(t,u),n}async function se(n,r,s,o){n.password=null;const c=await(async(e,t,n,r,s)=>{if(!$)return V.importKey(t);try{return await G.importKey(\"raw\",t,n,!1,s)}catch(e){return $=!1,V.importKey(t)}})(0,s,O,0,W),f=await(async(e,t,n)=>{if(!ee)return V.M(t,e.salt,T.iterations,n);try{return await G.deriveBits(e,t,n)}catch(r){return ee=!1,V.M(t,e.salt,T.iterations,n)}})(t.assign({salt:o},T),c,8*(2*H[r]+2)),a=new i(f),l=ae(Q,ce(a,0,H[r])),u=ae(Q,ce(a,H[r],2*H[r])),w=ce(a,2*H[r]);return t.assign(n,{keys:{key:l,ee:u,passwordVerification:w},Z:new Y(new X(l),e.from(F)),$:new Z(u)}),w}function ie(e,t){return t===k?(e=>{if(typeof w==v){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(e):t}function oe(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ce(e,t,n){return e.subarray(t,n)}function fe(e,t){return e.m(t)}function ae(e,t){return e.k(t)}class le extends p{constructor({password:e,passwordVerification:n,checkPasswordOnly:r}){super({start(){t.assign(this,{password:e,passwordVerification:n}),de(this,e)},transform(e,t){const n=this;if(n.password){const t=we(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(B);e=e.subarray(12)}r?t.error(new s(M)):t.enqueue(we(n,e))}})}}class ue extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),de(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=U(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(he(n,t),0),s=12}else r=new i(e.length),s=0;r.set(he(n,e),s),t.enqueue(r)}})}}function we(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=ye(e)^t[r],pe(e,n[r]);return n}function he(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=ye(e)^t[r],pe(e,t[r]);return n}function de(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,te:new x(r[0]),ne:new x(r[2])});for(let t=0;t<n.length;t++)pe(e,n.charCodeAt(t))}function pe(e,t){let[n,s,i]=e.keys;e.te.append([t]),n=~e.te.get(),s=be(r.imul(be(s+me(n)),134775813)+1),e.ne.append([s>>>24]),i=~e.ne.get(),e.keys=[n,s,i]}function ye(e){const t=2|e.keys[2];return me(r.imul(t,1^t)>>>8)}function me(e){return 255&e}function be(e){return 4294967295&e}const ge=\"deflate-raw\";class ke extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=Se(super.readable);i&&!c||!f||(w=new A,d=xe(d,w)),s&&(d=Ce(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=xe(d,new ue(e)):(h=new ne(e),d=xe(d,h))),ze(u,d,(()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=new l(w.value.buffer).getUint32(0)),u.signature=e}))}}class ve extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=Se(super.readable);o&&(i?d=xe(d,new le(e)):(h=new te(e),d=xe(d,h))),a&&(d=Ce(d,u,{chunkSize:t},r,n)),o&&!i||!c||(w=new A,d=xe(d,w)),ze(this,d,(()=>{if((!o||i)&&c){const e=new l(w.value.buffer);if(f!=e.getUint32(0,!1))throw new s(E)}}))}}function Se(e){return xe(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ze(e,n,r){n=xe(n,new p({flush:r})),t.defineProperty(e,\"readable\",{get:()=>n})}function Ce(e,t,n,r,s){try{e=xe(e,new(t&&r?r:s)(ge,n))}catch(r){if(!t)return e;try{e=xe(e,new s(ge,n))}catch(t){return e}}return e}function xe(e,t){return e.pipeThrough(t)}const Ae=\"data\",_e=\"close\";class Ie extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith(\"deflate\")?i=ke:s.startsWith(\"inflate\")&&(i=ve);let o=0,c=0;const f=new i(e,n),a=super.readable,l=new p({transform(e,t){e&&e.length&&(c+=e.length,t.enqueue(e))},flush(){t.assign(r,{inputSize:c})}}),u=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=f;t.assign(r,{signature:e,outputSize:o,inputSize:c})}});t.defineProperty(r,\"readable\",{get:()=>a.pipeThrough(l).pipeThrough(f).pipeThrough(u)})}}class Pe extends p{constructor(e){let t;super({transform:function n(r,s){if(t){const e=new i(t.length+r.length);e.set(t),e.set(r,t.length),r=e,t=null}r.length>e?(s.enqueue(r.slice(0,e)),n(r.slice(e),s)):t=r},flush(e){t&&t.length&&e.enqueue(t)}})}}const De=new a,Ve=new a;let Re,Be=0,Ee=!0;async function Me(e){try{const{options:t,scripts:r,config:s}=e;if(r&&r.length)try{Ee?importScripts.apply(k,r):await Ue(r)}catch(e){Ee=!1,await Ue(r)}self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new z(self.Deflate)),self.Inflate&&(s.DecompressionStream=new z(self.Inflate));const i={highWaterMark:1},o=e.readable||new y({async pull(e){const t=new u((e=>De.set(Be,e)));Ke({type:\"pull\",messageId:Be}),Be=(Be+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));Ve.set(Be,t),Ke({type:Ae,value:e,messageId:Be}),Be=(Be+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new Ie(t,s);Re=new AbortController;const{signal:a}=Re;await o.pipeThrough(f).pipeThrough(new Pe(s.chunkSize)).pipeTo(c,{signal:a,preventClose:!0,preventAbort:!0}),await c.getWriter().close();const{signature:l,inputSize:w,outputSize:h}=f;Ke({type:_e,result:{signature:l,inputSize:w,outputSize:h}})}catch(e){Ne(e)}}async function Ue(e){for(const t of e)await import(t)}function Ke(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Ne(e=new s(\"Unknown error\")){const{message:t,stack:n,code:r,name:i}=e;d({error:{message:t,stack:n,code:r,name:i}})}addEventListener(\"message\",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if(\"start\"==t&&Me(e),t==Ae){const e=De.get(n);De.delete(n),e({value:new i(r),done:s})}if(\"ack\"==t){const e=Ve.get(n);Ve.delete(n),e()}t==_e&&Re.abort()}catch(e){Ne(e)}}));const Oe=-2;function Te(t){return We(t.map((([t,n])=>new e(t).fill(n,0,t))))}function We(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?We(n):n)),[])}const je=[0,1,2,3].concat(...Te([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function He(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.re=n=>{const s=e.se,i=e.oe.ie,o=e.oe.ce;let c,f,a,l=-1;for(n.fe=0,n.ae=573,c=0;o>c;c++)0!==s[2*c]?(n.le[++n.fe]=l=c,n.ue[c]=0):s[2*c+1]=0;for(;2>n.fe;)a=n.le[++n.fe]=2>l?++l:0,s[2*a]=1,n.ue[a]=0,n.we--,i&&(n.he-=i[2*a+1]);for(e.de=l,c=r.floor(n.fe/2);c>=1;c--)n.pe(s,c);a=o;do{c=n.le[1],n.le[1]=n.le[n.fe--],n.pe(s,1),f=n.le[1],n.le[--n.ae]=c,n.le[--n.ae]=f,s[2*a]=s[2*c]+s[2*f],n.ue[a]=r.max(n.ue[c],n.ue[f])+1,s[2*c+1]=s[2*f+1]=a,n.le[1]=a++,n.pe(s,1)}while(n.fe>=2);n.le[--n.ae]=n.le[1],(t=>{const n=e.se,r=e.oe.ie,s=e.oe.ye,i=e.oe.me,o=e.oe.be;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.ge[l]=0;for(n[2*t.le[t.ae]+1]=0,c=t.ae+1;573>c;c++)f=t.le[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.de||(t.ge[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.we+=w*(l+u),r&&(t.he+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.ge[l];)l--;t.ge[l]--,t.ge[l+1]+=2,t.ge[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.ge[l];0!==f;)a=t.le[--c],a>e.de||(n[2*a+1]!=l&&(t.we+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.de,n.ge)}}function Le(e,t,n,r,s){const i=this;i.ie=e,i.ye=t,i.me=n,i.ce=r,i.be=s}He.ke=[0,1,2,3,4,5,6,7].concat(...Te([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),He.ve=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],He.Se=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],He.ze=e=>256>e?je[e]:je[256+(e>>>7)],He.Ce=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],He.xe=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],He.Ae=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],He._e=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Fe=Te([[144,8],[112,9],[24,7],[8,8]]);Le.Ie=We([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Fe[t]])));const qe=Te([[30,5]]);function Ge(e,t,n,r,s){const i=this;i.Pe=e,i.De=t,i.Ve=n,i.Re=r,i.Be=s}Le.Ee=We([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,qe[t]]))),Le.Me=new Le(Le.Ie,He.Ce,257,286,15),Le.Ue=new Le(Le.Ee,He.xe,0,30,15),Le.Ke=new Le(null,He.Ae,0,19,7);const Je=[new Ge(0,0,0,0,0),new Ge(4,4,8,4,1),new Ge(4,5,16,8,1),new Ge(4,6,32,32,1),new Ge(4,4,16,16,2),new Ge(8,16,32,32,2),new Ge(8,16,128,128,2),new Ge(8,32,128,256,2),new Ge(32,128,258,1024,2),new Ge(32,258,258,4096,2)],Qe=[\"need dictionary\",\"stream end\",\"\",\"\",\"stream error\",\"data error\",\"\",\"buffer error\",\"\",\"\"],Xe=113,Ye=666,Ze=262;function $e(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function et(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,A,_,I,P,D,V,R,B,E,M,U;const K=new He,N=new He,O=new He;let T,W,j,H,L,F;function q(){let t;for(t=0;286>t;t++)E[2*t]=0;for(t=0;30>t;t++)M[2*t]=0;for(t=0;19>t;t++)U[2*t]=0;E[512]=1,e.we=e.he=0,W=j=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?U[2*n]+=i:0!==n?(n!=r&&U[2*n]++,U[32]++):i>10?U[36]++:U[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ne[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;F>16-r?(n=e,L|=n<<F&65535,Q(L),L=n>>>16-F,F+=r-16):(L|=e<<F&65535,F+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,U)}while(0!=--o);else 0!==r?(r!=s&&(Y(r,U),o--),Y(16,U),X(o-3,2)):o>10?(Y(18,U),X(o-11,7)):(Y(17,U),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==F?(Q(L),L=0,F=0):8>F||(J(255&L),L>>>=8,F-=8)}function ee(t,n){let s,i,o;if(e.Oe[W]=t,e.Te[W]=255&n,W++,0===t?E[2*n]++:(j++,t--,E[2*(He.ke[n]+256+1)]++,M[2*He.ze(t)]++),!(8191&W)&&D>2){for(s=8*W,i=C-k,o=0;30>o;o++)s+=M[2*o]*(5+He.xe[o]);if(s>>>=3,j<r.floor(W/2)&&s<r.floor(i/2))return!0}return W==T-1}function te(t,n){let r,s,i,o,c=0;if(0!==W)do{r=e.Oe[c],s=e.Te[c],c++,0===r?Y(s,t):(i=He.ke[s],Y(i+256+1,t),o=He.Ce[i],0!==o&&(s-=He.ve[i],X(s,o)),r--,i=He.ze(r),Y(i,n),o=He.xe[i],0!==o&&(r-=He.Se[i],X(r,o)))}while(W>c);Y(256,t),H=t[513]}function ne(){F>8?Q(L):F>0&&J(255&L),L=0,F=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),H=8,Q(n),Q(~n),e.Ne.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;D>0?(K.re(e),N.re(e),o=(()=>{let t;for(G(E,K.de),G(M,N.de),O.re(e),t=18;t>=3&&0===U[2*He._e[t]+1];t--);return e.we+=14+3*(t+1),t})(),s=e.we+3+7>>>3,i=e.he+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Le.Ie,Le.Ee)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(U[2*He._e[r]+1],3);Z(E,e-1),Z(M,t-1)})(K.de+1,N.de+1,o+1),te(E,M)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.We()}function ie(){let e,n,r,s;do{if(s=w-A-C,0===s&&0===C&&0===A)s=f;else if(-1==s)s--;else if(C>=f+f-Ze){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!=--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!=--e);s+=f}if(0===t.je)return;e=t.He(u,C+A,s),A+=e,3>A||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Ze>A&&0!==t.je)}function oe(e){let t,n,r=I,s=C,i=_;const o=C>f-Ze?C-(f-Ze):0;let c=B;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];R>_||(r>>=2),c>A&&(c=A);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!=--r);return i>A?A:i}e.ue=[],e.ge=[],e.le=[],E=[],M=[],U=[],e.pe=(t,n)=>{const r=e.le,s=r[n];let i=n<<1;for(;i<=e.fe&&(i<e.fe&&$e(t,r[i+1],r[i],e.ue)&&i++,!$e(t,s,r[i],e.ue));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.Le=(t,S,x,W,j,G)=>(W||(W=8),j||(j=8),G||(G=0),t.Fe=null,-1==S&&(S=6),1>j||j>9||8!=W||9>x||x>15||0>S||S>9||0>G||G>2?Oe:(t.qe=e,a=x,f=1<<a,l=f-1,m=j+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],T=1<<j+6,e.Ne=new i(4*T),s=4*T,e.Oe=new o(T),e.Te=new i(T),D=S,V=G,(t=>(t.Ge=t.Je=0,t.Fe=null,e.pending=0,e.Qe=0,n=Xe,c=0,K.se=E,K.oe=Le.Me,N.se=M,N.oe=Le.Ue,O.se=U,O.oe=Le.Ke,L=0,F=0,H=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;P=Je[D].De,R=Je[D].Pe,B=Je[D].Ve,I=Je[D].Re,C=0,k=0,A=0,v=_=2,z=0,p=0})(),0))(t))),e.Xe=()=>42!=n&&n!=Xe&&n!=Ye?Oe:(e.Te=null,e.Oe=null,e.Ne=null,d=null,h=null,u=null,e.qe=null,n==Xe?-3:0),e.Ye=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Oe:(Je[D].Be!=Je[t].Be&&0!==e.Ge&&(r=e.Ze(1)),D!=t&&(D=t,P=Je[D].De,R=Je[D].Pe,B=Je[D].Ve,I=Je[D].Re),V=n,r)},e.$e=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Oe;if(3>i)return 0;for(i>f-Ze&&(i=f-Ze,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ze=(r,i)=>{let o,w,m,I,R;if(i>4||0>i)return Oe;if(!r.et||!r.tt&&0!==r.je||n==Ye&&4!=i)return r.Fe=Qe[4],Oe;if(0===r.nt)return r.Fe=Qe[7],-5;var B;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(D-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=Xe,J((B=w)>>8&255),J(255&B)),0!==e.pending){if(t.We(),0===t.nt)return c=-1,0}else if(0===t.je&&I>=i&&4!=i)return t.Fe=Qe[7],-5;if(n==Ye&&0!==t.je)return r.Fe=Qe[7],-5;if(0!==t.je||0!==A||0!=i&&n!=Ye){switch(R=-1,Je[D].Be){case 0:R=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=A){if(ie(),0===A&&0==e)return 0;if(0===A)break}if(C+=A,A=0,n=k+r,(0===C||C>=n)&&(A=C-n,C=n,se(!1),0===t.nt))return 0;if(C-k>=f-Ze&&(se(!1),0===t.nt))return 0}return se(4==e),0===t.nt?4==e?2:0:4==e?3:1})(i);break;case 1:R=(e=>{let n,r=0;for(;;){if(Ze>A){if(ie(),Ze>A&&0==e)return 0;if(0===A)break}if(3>A||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Ze||2!=V&&(v=oe(r)),3>v)n=ee(0,255&u[C]),A--,C++;else if(n=ee(C-x,v-3),A-=v,v>P||3>A)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!=--v);C++}if(n&&(se(!1),0===t.nt))return 0}return se(4==e),0===t.nt?4==e?2:0:4==e?3:1})(i);break;case 2:R=(e=>{let n,r,s=0;for(;;){if(Ze>A){if(ie(),Ze>A&&0==e)return 0;if(0===A)break}if(3>A||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),_=v,S=x,v=2,0!==s&&P>_&&f-Ze>=(C-s&65535)&&(2!=V&&(v=oe(s)),5>=v&&(1==V||3==v&&C-x>4096)&&(v=2)),3>_||v>_)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,A--,0===t.nt)return 0}else z=1,C++,A--;else{r=C+A-3,n=ee(C-1-S,_-3),A-=_-1,_-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!=--_);if(z=0,v=2,C++,n&&(se(!1),0===t.nt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.nt?4==e?2:0:4==e?3:1})(i)}if(2!=R&&3!=R||(n=Ye),0==R||2==R)return 0===t.nt&&(c=-1),0;if(1==R){if(1==i)X(2,3),Y(256,Le.Ie),$(),9>1+H+10-F&&(X(2,3),Y(256,Le.Ie),$()),H=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.We(),0===t.nt)return c=-1,0}}return 4!=i?0:1}}function tt(){const e=this;e.rt=0,e.st=0,e.je=0,e.Ge=0,e.nt=0,e.Je=0}function nt(e){const t=new tt,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.Le(f),t.et=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.rt=0,t.tt=e,t.je=e.length;do{if(t.st=0,t.nt=n,o=t.Ze(0),0!=o)throw new s(\"deflating: \"+t.Fe);t.st&&(t.st==n?w.push(new i(c)):w.push(c.subarray(0,t.st))),u+=t.st,r&&t.rt>0&&t.rt!=a&&(r(t.rt),a=t.rt)}while(t.je>0||0===t.nt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]?new i(w[0]):new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.st=0,t.nt=n,e=t.Ze(4),1!=e&&0!=e)throw new s(\"deflating: \"+t.Fe);n-t.nt>0&&a.push(c.slice(0,t.st)),f+=t.st}while(t.je>0||0===t.nt);return t.Xe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}tt.prototype={Le(e,t){const n=this;return n.qe=new et,t||(t=15),n.qe.Le(n,e,t)},Ze(e){const t=this;return t.qe?t.qe.Ze(t,e):Oe},Xe(){const e=this;if(!e.qe)return Oe;const t=e.qe.Xe();return e.qe=null,t},Ye(e,t){const n=this;return n.qe?n.qe.Ye(n,e,t):Oe},$e(e,t){const n=this;return n.qe?n.qe.$e(n,e,t):Oe},He(e,t,n){const r=this;let s=r.je;return s>n&&(s=n),0===s?0:(r.je-=s,e.set(r.tt.subarray(r.rt,r.rt+s),t),r.rt+=s,r.Ge+=s,s)},We(){const e=this;let t=e.qe.pending;t>e.nt&&(t=e.nt),0!==t&&(e.et.set(e.qe.Ne.subarray(e.qe.Qe,e.qe.Qe+t),e.st),e.st+=t,e.qe.Qe+=t,e.Je+=t,e.nt-=t,e.qe.pending-=t,0===e.qe.pending&&(e.qe.Qe=0))}};const rt=-2,st=-3,it=-5,ot=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],ct=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],ft=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],at=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],lt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],ut=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],wt=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function ht(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,A,_,I,P;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return st;if(0>(I-=n[g]))return st;for(n[g]+=I,i[1]=k=0,C=1,_=2;0!=--g;)i[_]=k+=n[C],_++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,A=-S,s[0]=0,x=0,P=0;m>=v;v++)for(p=n[v];0!=p--;){for(;v>A+S;){if(b++,A+=S,P=m-A,P=P>S?S:P,(y=1<<(k=v-A))>p+1&&(y-=p+1,_=v,P>k))for(;++k<P&&(y<<=1)>n[++_];)y-=n[_];if(P=1<<k,h[0]+P>1440)return st;s[b]=x=h[0],h[0]+=P,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>A-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-A,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-A,k=g>>>A;P>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;g&k;k>>>=1)g^=k;for(g^=k,z=(1<<A)-1;(g&z)!=i[b];)b--,A-=S,z=(1<<A)-1}return 0!==I&&1!=m?it:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.it=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==st?f.Fe=\"oversubscribed dynamic bit lengths tree\":a!=it&&0!==r[0]||(f.Fe=\"incomplete dynamic bit lengths tree\",a=st),a},this.ot=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,at,lt,a,i,u,e,t),0!=h||0===i[0]?(h==st?w.Fe=\"oversubscribed literal/length tree\":-4!=h&&(w.Fe=\"incomplete literal/length tree\",h=st),h):(c(288),h=o(s,n,r,0,ut,wt,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==st?w.Fe=\"oversubscribed distance tree\":h==it?(w.Fe=\"incomplete distance tree\",h=st):-4!=h&&(w.Fe=\"empty distance tree with lengths\",h=st),h):0)}}function dt(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.rt,p=c.je,w=o.ct,h=o.ft,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=ot[e],g=ot[t];do{for(;20>h;)p--,w|=(255&c.lt(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],16&u){for(u&=15,k=a[z+2]+(w&ot[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.lt(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],16&u){for(u&=15;u>h;)p--,w|=(255&c.lt(d++))<<h,h+=8;if(v=a[z+2]+(w&ot[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.ut[y++]=o.ut[S++]}while(0!=--u);else o.ut.set(o.ut.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.ut[y++]=o.ut[S++],o.ut[y++]=o.ut[S++],k-=2):(o.ut.set(o.ut.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.ut[y++]=o.ut[S++]}while(0!=--k);else o.ut.set(o.ut.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(64&u)return c.Fe=\"invalid distance code\",k=c.je-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ct=w,o.ft=h,c.je=p,c.Ge+=d-c.rt,c.rt=d,o.write=y,st;f+=a[z+2],f+=w&ot[u],z=3*(l+f),u=a[z]}break}if(64&u)return 32&u?(k=c.je-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ct=w,o.ft=h,c.je=p,c.Ge+=d-c.rt,c.rt=d,o.write=y,1):(c.Fe=\"invalid literal/length code\",k=c.je-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ct=w,o.ft=h,c.je=p,c.Ge+=d-c.rt,c.rt=d,o.write=y,st);if(f+=a[z+2],f+=w&ot[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.ut[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.ut[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.je-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ct=w,o.ft=h,c.je=p,c.Ge+=d-c.rt,c.rt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.wt=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,A=0,_=0;for(_=y.rt,v=y.je,x=e.ct,A=e.ft,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,m=p(u,w,r,h,s,d,e,y),_=y.rt,v=y.je,x=e.ct,A=e.ft,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>A;){if(0===v)return e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);m=0,v--,x|=(255&y.lt(_++))<<A,A+=8}if(g=3*(o+(x&ot[b])),x>>>=n[g+1],A-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(16&k){a=15&k,i=n[g+2],t=2;break}if(!(64&k)){c=k,o=g/3+n[g+2];break}if(32&k){t=7;break}return t=9,y.Fe=\"invalid literal/length code\",m=st,e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);case 2:for(b=a;b>A;){if(0===v)return e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);m=0,v--,x|=(255&y.lt(_++))<<A,A+=8}i+=x&ot[b],x>>=b,A-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>A;){if(0===v)return e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);m=0,v--,x|=(255&y.lt(_++))<<A,A+=8}if(g=3*(o+(x&ot[b])),x>>=n[g+1],A-=n[g+1],k=n[g],16&k){a=15&k,l=n[g+2],t=4;break}if(!(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Fe=\"invalid distance code\",m=st,e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);case 4:for(b=a;b>A;){if(0===v)return e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);m=0,v--,x|=(255&y.lt(_++))<<A,A+=8}l+=x&ot[b],x>>=b,A-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.ht(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);e.ut[S++]=e.ut[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.ht(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);m=0,e.ut[S++]=f,z--,t=0;break;case 7:if(A>7&&(A-=8,v++,_--),e.write=S,m=e.ht(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);t=8;case 8:return m=1,e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);case 9:return m=st,e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m);default:return m=rt,e.ct=x,e.ft=A,y.je=v,y.Ge+=_-y.rt,y.rt=_,e.write=S,e.ht(y,m)}},e.dt=()=>{}}ht.yt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=ct,r[0]=ft,0);const pt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function yt(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new dt;let h=0,d=new f(4320);const p=new ht;n.ft=0,n.ct=0,n.ut=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.dt(e),s=0,n.ft=0,n.ct=0,n.read=n.write=0},n.reset(e,null),n.ht=(e,t)=>{let r,s,i;return s=e.st,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.nt&&(r=e.nt),0!==r&&t==it&&(t=0),e.nt-=r,e.Je+=r,e.et.set(n.ut.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.nt&&(r=e.nt),0!==r&&t==it&&(t=0),e.nt-=r,e.Je+=r,e.et.set(n.ut.subarray(i,i+r),s),s+=r,i+=r),e.st=s,n.read=i,t},n.wt=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.rt,b=e.je,f=n.ct,y=n.ft,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,A,_,I,P;switch(s){case 0:for(;3>y;){if(0===b)return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);t=0,b--,f|=(255&e.lt(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],ht.yt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Fe=\"invalid block type\",t=st,n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);t=0,b--,f|=(255&e.lt(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Fe=\"invalid stored block lengths\",t=st,n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.ht(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.ut.set(e.He(m,i),g),m+=i,b-=i,g+=i,k-=i,0!=(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);t=0,b--,f|=(255&e.lt(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Fe=\"too many length or distance symbols\",t=st,n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);t=0,b--,f|=(255&e.lt(m++))<<y,y+=8}r[pt[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[pt[a++]]=0;if(l[0]=7,i=p.it(r,l,u,d,e),0!=i)return(t=i)==st&&(r=null,s=9),n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);t=0,b--,f|=(255&e.lt(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&ot[i]))+1],w=d[3*(u[0]+(f&ot[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);t=0,b--,f|=(255&e.lt(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&ot[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Fe=\"invalid bit length repeat\",t=st,n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!=--o);a=v}}if(u[0]=-1,A=[],_=[],I=[],P=[],A[0]=9,_[0]=6,i=c,i=p.ot(257+(31&i),1+(i>>5&31),r,A,_,I,P,d,e),0!=i)return i==st&&(r=null,s=9),t=i,n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);w.init(A[0],_[0],d,I[0],d,P[0]),s=6;case 6:if(n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,1!=(t=w.wt(n,e,t)))return n.ht(e,t);if(t=0,w.dt(e),m=e.rt,b=e.je,f=n.ct,y=n.ft,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.ht(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);s=8;case 8:return t=1,n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);case 9:return t=st,n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t);default:return t=rt,n.ct=f,n.ft=y,e.je=b,e.Ge+=m-e.rt,e.rt=m,n.write=g,n.ht(e,t)}}},n.dt=e=>{n.reset(e,null),n.ut=null,d=null},n.bt=(e,t,r)=>{n.ut.set(e.subarray(t,t+r),0),n.read=n.write=r},n.gt=()=>1==s?1:0}const mt=13,bt=[0,0,255,255];function gt(){const e=this;function t(e){return e&&e.kt?(e.Ge=e.Je=0,e.Fe=null,e.kt.mode=7,e.kt.vt.reset(e,null),0):rt}e.mode=0,e.method=0,e.St=[0],e.zt=0,e.marker=0,e.Ct=0,e.xt=t=>(e.vt&&e.vt.dt(t),e.vt=null,0),e.At=(n,r)=>(n.Fe=null,e.vt=null,8>r||r>15?(e.xt(n),rt):(e.Ct=r,n.kt.vt=new yt(n,1<<r),t(n),0)),e._t=(e,t)=>{let n,r;if(!e||!e.kt||!e.tt)return rt;const s=e.kt;for(t=4==t?it:0,n=it;;)switch(s.mode){case 0:if(0===e.je)return n;if(n=t,e.je--,e.Ge++,8!=(15&(s.method=e.lt(e.rt++)))){s.mode=mt,e.Fe=\"unknown compression method\",s.marker=5;break}if(8+(s.method>>4)>s.Ct){s.mode=mt,e.Fe=\"invalid win size\",s.marker=5;break}s.mode=1;case 1:if(0===e.je)return n;if(n=t,e.je--,e.Ge++,r=255&e.lt(e.rt++),((s.method<<8)+r)%31!=0){s.mode=mt,e.Fe=\"incorrect header check\",s.marker=5;break}if(!(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.je)return n;n=t,e.je--,e.Ge++,s.zt=(255&e.lt(e.rt++))<<24&4278190080,s.mode=3;case 3:if(0===e.je)return n;n=t,e.je--,e.Ge++,s.zt+=(255&e.lt(e.rt++))<<16&16711680,s.mode=4;case 4:if(0===e.je)return n;n=t,e.je--,e.Ge++,s.zt+=(255&e.lt(e.rt++))<<8&65280,s.mode=5;case 5:return 0===e.je?n:(n=t,e.je--,e.Ge++,s.zt+=255&e.lt(e.rt++),s.mode=6,2);case 6:return s.mode=mt,e.Fe=\"need dictionary\",s.marker=0,rt;case 7:if(n=s.vt.wt(e,n),n==st){s.mode=mt,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.vt.reset(e,s.St),s.mode=12;case 12:return e.je=0,1;case mt:return st;default:return rt}},e.It=(e,t,n)=>{let r=0,s=n;if(!e||!e.kt||6!=e.kt.mode)return rt;const i=e.kt;return s<1<<i.Ct||(s=(1<<i.Ct)-1,r=n-s),i.vt.bt(t,r,s),i.mode=7,0},e.Pt=e=>{let n,r,s,i,o;if(!e||!e.kt)return rt;const c=e.kt;if(c.mode!=mt&&(c.mode=mt,c.marker=0),0===(n=e.je))return it;for(r=e.rt,s=c.marker;0!==n&&4>s;)e.lt(r)==bt[s]?s++:s=0!==e.lt(r)?0:4-s,r++,n--;return e.Ge+=r-e.rt,e.rt=r,e.je=n,c.marker=s,4!=s?st:(i=e.Ge,o=e.Je,t(e),e.Ge=i,e.Je=o,c.mode=7,0)},e.Dt=e=>e&&e.kt&&e.kt.vt?e.kt.vt.gt():rt}function kt(){}function vt(e){const t=new kt,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.At(),t.et=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.rt=0,t.tt=e,t.je=e.length;do{if(t.st=0,t.nt=n,0!==t.je||c||(t.rt=0,c=!0),a=t._t(0),c&&a===it){if(0!==t.je)throw new s(\"inflating: bad input\")}else if(0!==a&&1!==a)throw new s(\"inflating: \"+t.Fe);if((c||1===a)&&t.je===e.length)throw new s(\"inflating: bad input\");t.st&&(t.st===n?f.push(new i(o)):f.push(o.subarray(0,t.st))),h+=t.st,r&&t.rt>0&&t.rt!=u&&(r(t.rt),u=t.rt)}while(t.je>0||0===t.nt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]?new i(f[0]):new i,l}},this.flush=()=>{t.xt()}}kt.prototype={At(e){const t=this;return t.kt=new gt,e||(e=15),t.kt.At(t,e)},_t(e){const t=this;return t.kt?t.kt._t(t,e):rt},xt(){const e=this;if(!e.kt)return rt;const t=e.kt.xt(e);return e.kt=null,t},Pt(){const e=this;return e.kt?e.kt.Pt(e):rt},It(e,t){const n=this;return n.kt?n.kt.It(n,e,t):rt},lt(e){return this.tt[e]},He(e,t){return this.tt.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=nt,self.Inflate=vt};\\n',\n    r = () => t.useDataURI ? \"data:text/javascript,\" + encodeURIComponent(n) : URL.createObjectURL(new Blob([n], {\n      type: \"text/javascript\"\n    }));\n  e({\n    workerScripts: {\n      inflate: [r],\n      deflate: [r]\n    }\n  });\n}\nexport { e as configureWebWorker };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global Blob, atob, btoa, XMLHttpRequest, URL, fetch, ReadableStream, WritableStream, FileReader, TransformStream, Response */\n// deno-lint-ignore-file no-this-alias\n\nimport { UNDEFINED_VALUE, FUNCTION_TYPE, END_OF_CENTRAL_DIR_LENGTH } from \"./constants.js\";\nimport { getConfiguration } from \"./configuration.js\";\nconst ERR_HTTP_STATUS = \"HTTP error \";\nconst ERR_HTTP_RANGE = \"HTTP Range not supported\";\nconst ERR_ITERATOR_COMPLETED_TOO_SOON = \"Writer iterator completed too soon\";\nconst CONTENT_TYPE_TEXT_PLAIN = \"text/plain\";\nconst HTTP_HEADER_CONTENT_LENGTH = \"Content-Length\";\nconst HTTP_HEADER_CONTENT_RANGE = \"Content-Range\";\nconst HTTP_HEADER_ACCEPT_RANGES = \"Accept-Ranges\";\nconst HTTP_HEADER_RANGE = \"Range\";\nconst HTTP_HEADER_CONTENT_TYPE = \"Content-Type\";\nconst HTTP_METHOD_HEAD = \"HEAD\";\nconst HTTP_METHOD_GET = \"GET\";\nconst HTTP_RANGE_UNIT = \"bytes\";\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\nconst PROPERTY_NAME_WRITABLE = \"writable\";\nclass Stream {\n  constructor() {\n    this.size = 0;\n  }\n  init() {\n    this.initialized = true;\n  }\n}\nclass Reader extends Stream {\n  get readable() {\n    const reader = this;\n    const {\n      chunkSize = DEFAULT_CHUNK_SIZE\n    } = reader;\n    const readable = new ReadableStream({\n      start() {\n        this.chunkOffset = 0;\n      },\n      async pull(controller) {\n        const {\n          offset = 0,\n          size,\n          diskNumberStart\n        } = readable;\n        const {\n          chunkOffset\n        } = this;\n        controller.enqueue(await readUint8Array(reader, offset + chunkOffset, Math.min(chunkSize, size - chunkOffset), diskNumberStart));\n        if (chunkOffset + chunkSize > size) {\n          controller.close();\n        } else {\n          this.chunkOffset += chunkSize;\n        }\n      }\n    });\n    return readable;\n  }\n}\nclass Writer extends Stream {\n  constructor() {\n    super();\n    const writer = this;\n    const writable = new WritableStream({\n      write(chunk) {\n        return writer.writeUint8Array(chunk);\n      }\n    });\n    Object.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n      get() {\n        return writable;\n      }\n    });\n  }\n  writeUint8Array() {\n    // abstract\n  }\n}\nclass Data64URIReader extends Reader {\n  constructor(dataURI) {\n    super();\n    let dataEnd = dataURI.length;\n    while (dataURI.charAt(dataEnd - 1) == \"=\") {\n      dataEnd--;\n    }\n    const dataStart = dataURI.indexOf(\",\") + 1;\n    Object.assign(this, {\n      dataURI,\n      dataStart,\n      size: Math.floor((dataEnd - dataStart) * 0.75)\n    });\n  }\n  readUint8Array(offset, length) {\n    const {\n      dataStart,\n      dataURI\n    } = this;\n    const dataArray = new Uint8Array(length);\n    const start = Math.floor(offset / 3) * 4;\n    const bytes = atob(dataURI.substring(start + dataStart, Math.ceil((offset + length) / 3) * 4 + dataStart));\n    const delta = offset - Math.floor(start / 4) * 3;\n    for (let indexByte = delta; indexByte < delta + length; indexByte++) {\n      dataArray[indexByte - delta] = bytes.charCodeAt(indexByte);\n    }\n    return dataArray;\n  }\n}\nclass Data64URIWriter extends Writer {\n  constructor(contentType) {\n    super();\n    Object.assign(this, {\n      data: \"data:\" + (contentType || \"\") + \";base64,\",\n      pending: []\n    });\n  }\n  writeUint8Array(array) {\n    const writer = this;\n    let indexArray = 0;\n    let dataString = writer.pending;\n    const delta = writer.pending.length;\n    writer.pending = \"\";\n    for (indexArray = 0; indexArray < Math.floor((delta + array.length) / 3) * 3 - delta; indexArray++) {\n      dataString += String.fromCharCode(array[indexArray]);\n    }\n    for (; indexArray < array.length; indexArray++) {\n      writer.pending += String.fromCharCode(array[indexArray]);\n    }\n    if (dataString.length > 2) {\n      writer.data += btoa(dataString);\n    } else {\n      writer.pending = dataString;\n    }\n  }\n  getData() {\n    return this.data + btoa(this.pending);\n  }\n}\nclass BlobReader extends Reader {\n  constructor(blob) {\n    super();\n    Object.assign(this, {\n      blob,\n      size: blob.size\n    });\n  }\n  async readUint8Array(offset, length) {\n    const reader = this;\n    const offsetEnd = offset + length;\n    const blob = offset || offsetEnd < reader.size ? reader.blob.slice(offset, offsetEnd) : reader.blob;\n    let arrayBuffer = await blob.arrayBuffer();\n    if (arrayBuffer.byteLength > length) {\n      arrayBuffer = arrayBuffer.slice(offset, offsetEnd);\n    }\n    return new Uint8Array(arrayBuffer);\n  }\n}\nclass BlobWriter extends Stream {\n  constructor(contentType) {\n    super();\n    const writer = this;\n    const transformStream = new TransformStream();\n    const headers = [];\n    if (contentType) {\n      headers.push([HTTP_HEADER_CONTENT_TYPE, contentType]);\n    }\n    Object.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n      get() {\n        return transformStream.writable;\n      }\n    });\n    writer.blob = new Response(transformStream.readable, {\n      headers\n    }).blob();\n  }\n  getData() {\n    return this.blob;\n  }\n}\nclass TextReader extends BlobReader {\n  constructor(text) {\n    super(new Blob([text], {\n      type: CONTENT_TYPE_TEXT_PLAIN\n    }));\n  }\n}\nclass TextWriter extends BlobWriter {\n  constructor(encoding) {\n    super(encoding);\n    Object.assign(this, {\n      encoding,\n      utf8: !encoding || encoding.toLowerCase() == \"utf-8\"\n    });\n  }\n  async getData() {\n    const {\n      encoding,\n      utf8\n    } = this;\n    const blob = await super.getData();\n    if (blob.text && utf8) {\n      return blob.text();\n    } else {\n      const reader = new FileReader();\n      return new Promise((resolve, reject) => {\n        Object.assign(reader, {\n          onload: ({\n            target\n          }) => resolve(target.result),\n          onerror: () => reject(reader.error)\n        });\n        reader.readAsText(blob, encoding);\n      });\n    }\n  }\n}\nclass FetchReader extends Reader {\n  constructor(url, options) {\n    super();\n    createHttpReader(this, url, options);\n  }\n  async init() {\n    await initHttpReader(this, sendFetchRequest, getFetchRequestData);\n    super.init();\n  }\n  readUint8Array(index, length) {\n    return readUint8ArrayHttpReader(this, index, length, sendFetchRequest, getFetchRequestData);\n  }\n}\nclass XHRReader extends Reader {\n  constructor(url, options) {\n    super();\n    createHttpReader(this, url, options);\n  }\n  async init() {\n    await initHttpReader(this, sendXMLHttpRequest, getXMLHttpRequestData);\n    super.init();\n  }\n  readUint8Array(index, length) {\n    return readUint8ArrayHttpReader(this, index, length, sendXMLHttpRequest, getXMLHttpRequestData);\n  }\n}\nfunction createHttpReader(httpReader, url, options) {\n  const {\n    preventHeadRequest,\n    useRangeHeader,\n    forceRangeRequests,\n    combineSizeEocd\n  } = options;\n  options = Object.assign({}, options);\n  delete options.preventHeadRequest;\n  delete options.useRangeHeader;\n  delete options.forceRangeRequests;\n  delete options.combineSizeEocd;\n  delete options.useXHR;\n  Object.assign(httpReader, {\n    url,\n    options,\n    preventHeadRequest,\n    useRangeHeader,\n    forceRangeRequests,\n    combineSizeEocd\n  });\n}\nasync function initHttpReader(httpReader, sendRequest, getRequestData) {\n  const {\n    url,\n    preventHeadRequest,\n    useRangeHeader,\n    forceRangeRequests,\n    combineSizeEocd\n  } = httpReader;\n  if (isHttpFamily(url) && (useRangeHeader || forceRangeRequests) && (typeof preventHeadRequest == \"undefined\" || preventHeadRequest)) {\n    const response = await sendRequest(HTTP_METHOD_GET, httpReader, getRangeHeaders(httpReader, combineSizeEocd ? -END_OF_CENTRAL_DIR_LENGTH : undefined));\n    if (!forceRangeRequests && response.headers.get(HTTP_HEADER_ACCEPT_RANGES) != HTTP_RANGE_UNIT) {\n      throw new Error(ERR_HTTP_RANGE);\n    } else {\n      if (combineSizeEocd) {\n        httpReader.eocdCache = new Uint8Array(await response.arrayBuffer());\n      }\n      let contentSize;\n      const contentRangeHeader = response.headers.get(HTTP_HEADER_CONTENT_RANGE);\n      if (contentRangeHeader) {\n        const splitHeader = contentRangeHeader.trim().split(/\\s*\\/\\s*/);\n        if (splitHeader.length) {\n          const headerValue = splitHeader[1];\n          if (headerValue && headerValue != \"*\") {\n            contentSize = Number(headerValue);\n          }\n        }\n      }\n      if (contentSize === UNDEFINED_VALUE) {\n        await getContentLength(httpReader, sendRequest, getRequestData);\n      } else {\n        httpReader.size = contentSize;\n      }\n    }\n  } else {\n    await getContentLength(httpReader, sendRequest, getRequestData);\n  }\n}\nasync function readUint8ArrayHttpReader(httpReader, index, length, sendRequest, getRequestData) {\n  const {\n    useRangeHeader,\n    forceRangeRequests,\n    eocdCache,\n    size,\n    options\n  } = httpReader;\n  if (useRangeHeader || forceRangeRequests) {\n    if (eocdCache && index == size - END_OF_CENTRAL_DIR_LENGTH && length == END_OF_CENTRAL_DIR_LENGTH) {\n      return eocdCache;\n    }\n    const response = await sendRequest(HTTP_METHOD_GET, httpReader, getRangeHeaders(httpReader, index, length));\n    if (response.status != 206) {\n      throw new Error(ERR_HTTP_RANGE);\n    }\n    return new Uint8Array(await response.arrayBuffer());\n  } else {\n    const {\n      data\n    } = httpReader;\n    if (!data) {\n      await getRequestData(httpReader, options);\n    }\n    return new Uint8Array(httpReader.data.subarray(index, index + length));\n  }\n}\nfunction getRangeHeaders(httpReader, index = 0, length = 1) {\n  return Object.assign({}, getHeaders(httpReader), {\n    [HTTP_HEADER_RANGE]: HTTP_RANGE_UNIT + \"=\" + (index < 0 ? index : index + \"-\" + (index + length - 1))\n  });\n}\nfunction getHeaders({\n  options\n}) {\n  const {\n    headers\n  } = options;\n  if (headers) {\n    if (Symbol.iterator in headers) {\n      return Object.fromEntries(headers);\n    } else {\n      return headers;\n    }\n  }\n}\nasync function getFetchRequestData(httpReader) {\n  await getRequestData(httpReader, sendFetchRequest);\n}\nasync function getXMLHttpRequestData(httpReader) {\n  await getRequestData(httpReader, sendXMLHttpRequest);\n}\nasync function getRequestData(httpReader, sendRequest) {\n  const response = await sendRequest(HTTP_METHOD_GET, httpReader, getHeaders(httpReader));\n  httpReader.data = new Uint8Array(await response.arrayBuffer());\n  if (!httpReader.size) {\n    httpReader.size = httpReader.data.length;\n  }\n}\nasync function getContentLength(httpReader, sendRequest, getRequestData) {\n  if (httpReader.preventHeadRequest) {\n    await getRequestData(httpReader, httpReader.options);\n  } else {\n    const response = await sendRequest(HTTP_METHOD_HEAD, httpReader, getHeaders(httpReader));\n    const contentLength = response.headers.get(HTTP_HEADER_CONTENT_LENGTH);\n    if (contentLength) {\n      httpReader.size = Number(contentLength);\n    } else {\n      await getRequestData(httpReader, httpReader.options);\n    }\n  }\n}\nasync function sendFetchRequest(method, {\n  options,\n  url\n}, headers) {\n  const response = await fetch(url, Object.assign({}, options, {\n    method,\n    headers\n  }));\n  if (response.status < 400) {\n    return response;\n  } else {\n    throw response.status == 416 ? new Error(ERR_HTTP_RANGE) : new Error(ERR_HTTP_STATUS + (response.statusText || response.status));\n  }\n}\nfunction sendXMLHttpRequest(method, {\n  url\n}, headers) {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.addEventListener(\"load\", () => {\n      if (request.status < 400) {\n        const headers = [];\n        request.getAllResponseHeaders().trim().split(/[\\r\\n]+/).forEach(header => {\n          const splitHeader = header.trim().split(/\\s*:\\s*/);\n          splitHeader[0] = splitHeader[0].trim().replace(/^[a-z]|-[a-z]/g, value => value.toUpperCase());\n          headers.push(splitHeader);\n        });\n        resolve({\n          status: request.status,\n          arrayBuffer: () => request.response,\n          headers: new Map(headers)\n        });\n      } else {\n        reject(request.status == 416 ? new Error(ERR_HTTP_RANGE) : new Error(ERR_HTTP_STATUS + (request.statusText || request.status)));\n      }\n    }, false);\n    request.addEventListener(\"error\", event => reject(event.detail ? event.detail.error : new Error(\"Network error\")), false);\n    request.open(method, url);\n    if (headers) {\n      for (const entry of Object.entries(headers)) {\n        request.setRequestHeader(entry[0], entry[1]);\n      }\n    }\n    request.responseType = \"arraybuffer\";\n    request.send();\n  });\n}\nclass HttpReader extends Reader {\n  constructor(url, options = {}) {\n    super();\n    Object.assign(this, {\n      url,\n      reader: options.useXHR ? new XHRReader(url, options) : new FetchReader(url, options)\n    });\n  }\n  set size(value) {\n    // ignored\n  }\n  get size() {\n    return this.reader.size;\n  }\n  async init() {\n    await this.reader.init();\n    super.init();\n  }\n  readUint8Array(index, length) {\n    return this.reader.readUint8Array(index, length);\n  }\n}\nclass HttpRangeReader extends HttpReader {\n  constructor(url, options = {}) {\n    options.useRangeHeader = true;\n    super(url, options);\n  }\n}\nclass Uint8ArrayReader extends Reader {\n  constructor(array) {\n    super();\n    Object.assign(this, {\n      array,\n      size: array.length\n    });\n  }\n  readUint8Array(index, length) {\n    return this.array.slice(index, index + length);\n  }\n}\nclass Uint8ArrayWriter extends Writer {\n  init(initSize = 0) {\n    Object.assign(this, {\n      offset: 0,\n      array: new Uint8Array(initSize)\n    });\n    super.init();\n  }\n  writeUint8Array(array) {\n    const writer = this;\n    if (writer.offset + array.length > writer.array.length) {\n      const previousArray = writer.array;\n      writer.array = new Uint8Array(previousArray.length + array.length);\n      writer.array.set(previousArray);\n    }\n    writer.array.set(array, writer.offset);\n    writer.offset += array.length;\n  }\n  getData() {\n    return this.array;\n  }\n}\nclass SplitDataReader extends Reader {\n  constructor(readers) {\n    super();\n    this.readers = readers;\n  }\n  async init() {\n    const reader = this;\n    const {\n      readers\n    } = reader;\n    reader.lastDiskNumber = 0;\n    reader.lastDiskOffset = 0;\n    await Promise.all(readers.map(async (diskReader, indexDiskReader) => {\n      await diskReader.init();\n      if (indexDiskReader != readers.length - 1) {\n        reader.lastDiskOffset += diskReader.size;\n      }\n      reader.size += diskReader.size;\n    }));\n    super.init();\n  }\n  async readUint8Array(offset, length, diskNumber = 0) {\n    const reader = this;\n    const {\n      readers\n    } = this;\n    let result;\n    let currentDiskNumber = diskNumber;\n    if (currentDiskNumber == -1) {\n      currentDiskNumber = readers.length - 1;\n    }\n    let currentReaderOffset = offset;\n    while (currentReaderOffset >= readers[currentDiskNumber].size) {\n      currentReaderOffset -= readers[currentDiskNumber].size;\n      currentDiskNumber++;\n    }\n    const currentReader = readers[currentDiskNumber];\n    const currentReaderSize = currentReader.size;\n    if (currentReaderOffset + length <= currentReaderSize) {\n      result = await readUint8Array(currentReader, currentReaderOffset, length);\n    } else {\n      const chunkLength = currentReaderSize - currentReaderOffset;\n      result = new Uint8Array(length);\n      result.set(await readUint8Array(currentReader, currentReaderOffset, chunkLength));\n      result.set(await reader.readUint8Array(offset + chunkLength, length - chunkLength, diskNumber), chunkLength);\n    }\n    reader.lastDiskNumber = Math.max(currentDiskNumber, reader.lastDiskNumber);\n    return result;\n  }\n}\nclass SplitDataWriter extends Stream {\n  constructor(writerGenerator, maxSize = 4294967295) {\n    super();\n    const writer = this;\n    Object.assign(writer, {\n      diskNumber: 0,\n      diskOffset: 0,\n      size: 0,\n      maxSize,\n      availableSize: maxSize\n    });\n    let diskSourceWriter, diskWritable, diskWriter;\n    const writable = new WritableStream({\n      async write(chunk) {\n        const {\n          availableSize\n        } = writer;\n        if (!diskWriter) {\n          const {\n            value,\n            done\n          } = await writerGenerator.next();\n          if (done && !value) {\n            throw new Error(ERR_ITERATOR_COMPLETED_TOO_SOON);\n          } else {\n            diskSourceWriter = value;\n            diskSourceWriter.size = 0;\n            if (diskSourceWriter.maxSize) {\n              writer.maxSize = diskSourceWriter.maxSize;\n            }\n            writer.availableSize = writer.maxSize;\n            await initStream(diskSourceWriter);\n            diskWritable = value.writable;\n            diskWriter = diskWritable.getWriter();\n          }\n          await this.write(chunk);\n        } else if (chunk.length >= availableSize) {\n          await writeChunk(chunk.slice(0, availableSize));\n          await closeDisk();\n          writer.diskOffset += diskSourceWriter.size;\n          writer.diskNumber++;\n          diskWriter = null;\n          await this.write(chunk.slice(availableSize));\n        } else {\n          await writeChunk(chunk);\n        }\n      },\n      async close() {\n        await diskWriter.ready;\n        await closeDisk();\n      }\n    });\n    Object.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n      get() {\n        return writable;\n      }\n    });\n    async function writeChunk(chunk) {\n      const chunkLength = chunk.length;\n      if (chunkLength) {\n        await diskWriter.ready;\n        await diskWriter.write(chunk);\n        diskSourceWriter.size += chunkLength;\n        writer.size += chunkLength;\n        writer.availableSize -= chunkLength;\n      }\n    }\n    async function closeDisk() {\n      diskWritable.size = diskSourceWriter.size;\n      await diskWriter.close();\n    }\n  }\n}\nfunction isHttpFamily(url) {\n  const {\n    baseURL\n  } = getConfiguration();\n  const {\n    protocol\n  } = new URL(url, baseURL);\n  return protocol == \"http:\" || protocol == \"https:\";\n}\nasync function initStream(stream, initSize) {\n  if (stream.init && !stream.initialized) {\n    await stream.init(initSize);\n  } else {\n    return Promise.resolve();\n  }\n}\nfunction initReader(reader) {\n  if (Array.isArray(reader)) {\n    reader = new SplitDataReader(reader);\n  }\n  if (reader instanceof ReadableStream) {\n    reader = {\n      readable: reader\n    };\n  }\n  return reader;\n}\nfunction initWriter(writer) {\n  if (writer.writable === UNDEFINED_VALUE && typeof writer.next == FUNCTION_TYPE) {\n    writer = new SplitDataWriter(writer);\n  }\n  if (writer instanceof WritableStream) {\n    writer = {\n      writable: writer\n    };\n  }\n  const {\n    writable\n  } = writer;\n  if (writable.size === UNDEFINED_VALUE) {\n    writable.size = 0;\n  }\n  if (!(writer instanceof SplitDataWriter)) {\n    Object.assign(writer, {\n      diskNumber: 0,\n      diskOffset: 0,\n      availableSize: Infinity,\n      maxSize: Infinity\n    });\n  }\n  return writer;\n}\nfunction readUint8Array(reader, offset, size, diskNumber) {\n  return reader.readUint8Array(offset, size, diskNumber);\n}\nconst SplitZipReader = SplitDataReader;\nconst SplitZipWriter = SplitDataWriter;\nexport { initStream, initReader, initWriter, readUint8Array, Reader, Writer, TextReader, TextWriter, Data64URIReader, Data64URIWriter, BlobReader, BlobWriter, Uint8ArrayReader, Uint8ArrayWriter, HttpReader, HttpRangeReader, SplitZipReader, SplitZipWriter, SplitDataReader, SplitDataWriter, ERR_HTTP_RANGE, ERR_ITERATOR_COMPLETED_TOO_SOON };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TextDecoder */\n\nconst CP437 = \"\\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \".split(\"\");\nconst VALID_CP437 = CP437.length == 256;\nexport { decodeCP437 };\nfunction decodeCP437(stringValue) {\n  if (VALID_CP437) {\n    let result = \"\";\n    for (let indexCharacter = 0; indexCharacter < stringValue.length; indexCharacter++) {\n      result += CP437[stringValue[indexCharacter]];\n    }\n    return result;\n  } else {\n    return new TextDecoder().decode(stringValue);\n  }\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TextDecoder */\n\nimport { decodeCP437 } from \"./cp437-decode.js\";\nexport { decodeText };\nfunction decodeText(value, encoding) {\n  if (encoding && encoding.trim().toLowerCase() == \"cp437\") {\n    return decodeCP437(value);\n  } else {\n    return new TextDecoder(encoding).decode(value);\n  }\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst PROPERTY_NAME_FILENAME = \"filename\";\nconst PROPERTY_NAME_RAW_FILENAME = \"rawFilename\";\nconst PROPERTY_NAME_COMMENT = \"comment\";\nconst PROPERTY_NAME_RAW_COMMENT = \"rawComment\";\nconst PROPERTY_NAME_UNCOMPPRESSED_SIZE = \"uncompressedSize\";\nconst PROPERTY_NAME_COMPPRESSED_SIZE = \"compressedSize\";\nconst PROPERTY_NAME_OFFSET = \"offset\";\nconst PROPERTY_NAME_DISK_NUMBER_START = \"diskNumberStart\";\nconst PROPERTY_NAME_LAST_MODIFICATION_DATE = \"lastModDate\";\nconst PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE = \"rawLastModDate\";\nconst PROPERTY_NAME_LAST_ACCESS_DATE = \"lastAccessDate\";\nconst PROPERTY_NAME_RAW_LAST_ACCESS_DATE = \"rawLastAccessDate\";\nconst PROPERTY_NAME_CREATION_DATE = \"creationDate\";\nconst PROPERTY_NAME_RAW_CREATION_DATE = \"rawCreationDate\";\nconst PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE = \"internalFileAttribute\";\nconst PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE = \"externalFileAttribute\";\nconst PROPERTY_NAME_MS_DOS_COMPATIBLE = \"msDosCompatible\";\nconst PROPERTY_NAME_ZIP64 = \"zip64\";\nconst PROPERTY_NAME_ENCRYPTED = \"encrypted\";\nconst PROPERTY_NAME_VERSION = \"version\";\nconst PROPERTY_NAME_VERSION_MADE_BY = \"versionMadeBy\";\nconst PROPERTY_NAME_ZIPCRYPTO = \"zipCrypto\";\nconst PROPERTY_NAMES = [PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, PROPERTY_NAME_COMPPRESSED_SIZE, PROPERTY_NAME_UNCOMPPRESSED_SIZE, PROPERTY_NAME_LAST_MODIFICATION_DATE, PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT, PROPERTY_NAME_LAST_ACCESS_DATE, PROPERTY_NAME_CREATION_DATE, PROPERTY_NAME_OFFSET, PROPERTY_NAME_DISK_NUMBER_START, PROPERTY_NAME_DISK_NUMBER_START, PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE, PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE, PROPERTY_NAME_MS_DOS_COMPATIBLE, PROPERTY_NAME_ZIP64, PROPERTY_NAME_ENCRYPTED, PROPERTY_NAME_VERSION, PROPERTY_NAME_VERSION_MADE_BY, PROPERTY_NAME_ZIPCRYPTO, \"directory\", \"bitFlag\", \"signature\", \"filenameUTF8\", \"commentUTF8\", \"compressionMethod\", \"extraField\", \"rawExtraField\", \"extraFieldZip64\", \"extraFieldUnicodePath\", \"extraFieldUnicodeComment\", \"extraFieldAES\", \"extraFieldNTFS\", \"extraFieldExtendedTimestamp\"];\nclass Entry {\n  constructor(data) {\n    PROPERTY_NAMES.forEach(name => this[name] = data[name]);\n  }\n}\nexport { PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT, PROPERTY_NAME_UNCOMPPRESSED_SIZE, PROPERTY_NAME_COMPPRESSED_SIZE, PROPERTY_NAME_OFFSET, PROPERTY_NAME_DISK_NUMBER_START, PROPERTY_NAME_LAST_MODIFICATION_DATE, PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE, PROPERTY_NAME_LAST_ACCESS_DATE, PROPERTY_NAME_RAW_LAST_ACCESS_DATE, PROPERTY_NAME_CREATION_DATE, PROPERTY_NAME_RAW_CREATION_DATE, PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE, PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE, PROPERTY_NAME_MS_DOS_COMPATIBLE, PROPERTY_NAME_ZIP64, PROPERTY_NAME_ENCRYPTED, PROPERTY_NAME_VERSION, PROPERTY_NAME_VERSION_MADE_BY, PROPERTY_NAME_ZIPCRYPTO, Entry };", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global BigInt, Response, WritableStream, ReadableStream, TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { MAX_32_BITS, MAX_16_BITS, COMPRESSION_METHOD_DEFLATE, COMPRESSION_METHOD_STORE, COMPRESSION_METHOD_AES, SPLIT_ZIP_FILE_SIGNATURE, LOCAL_FILE_HEADER_SIGNATURE, CENTRAL_FILE_HEADER_SIGNATURE, END_OF_CENTRAL_DIR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_SIGNATURE, EXTRAFIELD_TYPE_ZIP64, EXTRAFIELD_TYPE_UNICODE_PATH, EXTRAFIELD_TYPE_UNICODE_COMMENT, EXTRAFIELD_TYPE_AES, EXTRAFIELD_TYPE_NTFS, EXTRAFIELD_TYPE_NTFS_TAG1, EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP, EXTRAFIELD_TYPE_USDZ, END_OF_CENTRAL_DIR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LENGTH, BITFLAG_ENCRYPTED, BITFLAG_LEVEL, BITFLAG_DATA_DESCRIPTOR, BITFLAG_LANG_ENCODING_FLAG, FILE_ATTR_MSDOS_DIR_MASK, DIRECTORY_SIGNATURE, UNDEFINED_VALUE } from \"./constants.js\";\nimport { getConfiguration, getChunkSize } from \"./configuration.js\";\nimport { runWorker, CODEC_INFLATE, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_ABORT_CHECK_PASSWORD } from \"./codec-pool.js\";\nimport { initStream, initReader, initWriter, readUint8Array, BlobReader } from \"./io.js\";\nimport { decodeText } from \"./util/decode-text.js\";\nimport { Crc32 } from \"./streams/codecs/crc32.js\";\nimport { PROPERTY_NAME_RAW_FILENAME, PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_COMMENT, PROPERTY_NAME_COMMENT, PROPERTY_NAME_UNCOMPPRESSED_SIZE, PROPERTY_NAME_COMPPRESSED_SIZE, PROPERTY_NAME_OFFSET, PROPERTY_NAME_DISK_NUMBER_START, PROPERTY_NAME_LAST_MODIFICATION_DATE, PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE, PROPERTY_NAME_LAST_ACCESS_DATE, PROPERTY_NAME_RAW_LAST_ACCESS_DATE, PROPERTY_NAME_CREATION_DATE, PROPERTY_NAME_RAW_CREATION_DATE, Entry } from \"./zip-entry.js\";\nconst ERR_BAD_FORMAT = \"File format is not recognized\";\nconst ERR_EOCDR_NOT_FOUND = \"End of central directory not found\";\nconst ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND = \"End of Zip64 central directory locator not found\";\nconst ERR_CENTRAL_DIRECTORY_NOT_FOUND = \"Central directory header not found\";\nconst ERR_LOCAL_FILE_HEADER_NOT_FOUND = \"Local file header not found\";\nconst ERR_EXTRAFIELD_ZIP64_NOT_FOUND = \"Zip64 extra field not found\";\nconst ERR_ENCRYPTED = \"File contains encrypted entry\";\nconst ERR_UNSUPPORTED_ENCRYPTION = \"Encryption method not supported\";\nconst ERR_UNSUPPORTED_COMPRESSION = \"Compression method not supported\";\nconst ERR_SPLIT_ZIP_FILE = \"Split zip file\";\nconst CHARSET_UTF8 = \"utf-8\";\nconst CHARSET_CP437 = \"cp437\";\nconst ZIP64_PROPERTIES = [[PROPERTY_NAME_UNCOMPPRESSED_SIZE, MAX_32_BITS], [PROPERTY_NAME_COMPPRESSED_SIZE, MAX_32_BITS], [PROPERTY_NAME_OFFSET, MAX_32_BITS], [PROPERTY_NAME_DISK_NUMBER_START, MAX_16_BITS]];\nconst ZIP64_EXTRACTION = {\n  [MAX_16_BITS]: {\n    getValue: getUint32,\n    bytes: 4\n  },\n  [MAX_32_BITS]: {\n    getValue: getBigUint64,\n    bytes: 8\n  }\n};\nclass ZipReader {\n  constructor(reader, options = {}) {\n    Object.assign(this, {\n      reader: initReader(reader),\n      options,\n      config: getConfiguration()\n    });\n  }\n  async *getEntriesGenerator(options = {}) {\n    const zipReader = this;\n    let {\n      reader\n    } = zipReader;\n    const {\n      config\n    } = zipReader;\n    await initStream(reader);\n    if (reader.size === UNDEFINED_VALUE || !reader.readUint8Array) {\n      reader = new BlobReader(await new Response(reader.readable).blob());\n      await initStream(reader);\n    }\n    if (reader.size < END_OF_CENTRAL_DIR_LENGTH) {\n      throw new Error(ERR_BAD_FORMAT);\n    }\n    reader.chunkSize = getChunkSize(config);\n    const endOfDirectoryInfo = await seekSignature(reader, END_OF_CENTRAL_DIR_SIGNATURE, reader.size, END_OF_CENTRAL_DIR_LENGTH, MAX_16_BITS * 16);\n    if (!endOfDirectoryInfo) {\n      const signatureArray = await readUint8Array(reader, 0, 4);\n      const signatureView = getDataView(signatureArray);\n      if (getUint32(signatureView) == SPLIT_ZIP_FILE_SIGNATURE) {\n        throw new Error(ERR_SPLIT_ZIP_FILE);\n      } else {\n        throw new Error(ERR_EOCDR_NOT_FOUND);\n      }\n    }\n    const endOfDirectoryView = getDataView(endOfDirectoryInfo);\n    let directoryDataLength = getUint32(endOfDirectoryView, 12);\n    let directoryDataOffset = getUint32(endOfDirectoryView, 16);\n    const commentOffset = endOfDirectoryInfo.offset;\n    const commentLength = getUint16(endOfDirectoryView, 20);\n    const appendedDataOffset = commentOffset + END_OF_CENTRAL_DIR_LENGTH + commentLength;\n    let lastDiskNumber = getUint16(endOfDirectoryView, 4);\n    const expectedLastDiskNumber = reader.lastDiskNumber || 0;\n    let diskNumber = getUint16(endOfDirectoryView, 6);\n    let filesLength = getUint16(endOfDirectoryView, 8);\n    let prependedDataLength = 0;\n    let startOffset = 0;\n    if (directoryDataOffset == MAX_32_BITS || directoryDataLength == MAX_32_BITS || filesLength == MAX_16_BITS || diskNumber == MAX_16_BITS) {\n      const endOfDirectoryLocatorArray = await readUint8Array(reader, endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH);\n      const endOfDirectoryLocatorView = getDataView(endOfDirectoryLocatorArray);\n      if (getUint32(endOfDirectoryLocatorView, 0) == ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE) {\n        directoryDataOffset = getBigUint64(endOfDirectoryLocatorView, 8);\n        let endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);\n        let endOfDirectoryView = getDataView(endOfDirectoryArray);\n        const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH - ZIP64_END_OF_CENTRAL_DIR_LENGTH;\n        if (getUint32(endOfDirectoryView, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {\n          const originalDirectoryDataOffset = directoryDataOffset;\n          directoryDataOffset = expectedDirectoryDataOffset;\n          prependedDataLength = directoryDataOffset - originalDirectoryDataOffset;\n          endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);\n          endOfDirectoryView = getDataView(endOfDirectoryArray);\n        }\n        if (getUint32(endOfDirectoryView, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE) {\n          throw new Error(ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND);\n        }\n        if (lastDiskNumber == MAX_16_BITS) {\n          lastDiskNumber = getUint32(endOfDirectoryView, 16);\n        }\n        if (diskNumber == MAX_16_BITS) {\n          diskNumber = getUint32(endOfDirectoryView, 20);\n        }\n        if (filesLength == MAX_16_BITS) {\n          filesLength = getBigUint64(endOfDirectoryView, 32);\n        }\n        if (directoryDataLength == MAX_32_BITS) {\n          directoryDataLength = getBigUint64(endOfDirectoryView, 40);\n        }\n        directoryDataOffset -= directoryDataLength;\n      }\n    }\n    if (directoryDataOffset >= reader.size) {\n      prependedDataLength = reader.size - directoryDataOffset - directoryDataLength - END_OF_CENTRAL_DIR_LENGTH;\n      directoryDataOffset = reader.size - directoryDataLength - END_OF_CENTRAL_DIR_LENGTH;\n    }\n    if (expectedLastDiskNumber != lastDiskNumber) {\n      throw new Error(ERR_SPLIT_ZIP_FILE);\n    }\n    if (directoryDataOffset < 0) {\n      throw new Error(ERR_BAD_FORMAT);\n    }\n    let offset = 0;\n    let directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n    let directoryView = getDataView(directoryArray);\n    if (directoryDataLength) {\n      const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - directoryDataLength;\n      if (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {\n        const originalDirectoryDataOffset = directoryDataOffset;\n        directoryDataOffset = expectedDirectoryDataOffset;\n        prependedDataLength += directoryDataOffset - originalDirectoryDataOffset;\n        directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n        directoryView = getDataView(directoryArray);\n      }\n    }\n    const expectedDirectoryDataLength = endOfDirectoryInfo.offset - directoryDataOffset - (reader.lastDiskOffset || 0);\n    if (directoryDataLength != expectedDirectoryDataLength && expectedDirectoryDataLength >= 0) {\n      directoryDataLength = expectedDirectoryDataLength;\n      directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n      directoryView = getDataView(directoryArray);\n    }\n    if (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {\n      throw new Error(ERR_BAD_FORMAT);\n    }\n    const filenameEncoding = getOptionValue(zipReader, options, \"filenameEncoding\");\n    const commentEncoding = getOptionValue(zipReader, options, \"commentEncoding\");\n    for (let indexFile = 0; indexFile < filesLength; indexFile++) {\n      const fileEntry = new ZipEntry(reader, config, zipReader.options);\n      if (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE) {\n        throw new Error(ERR_CENTRAL_DIRECTORY_NOT_FOUND);\n      }\n      readCommonHeader(fileEntry, directoryView, offset + 6);\n      const languageEncodingFlag = Boolean(fileEntry.bitFlag.languageEncodingFlag);\n      const filenameOffset = offset + 46;\n      const extraFieldOffset = filenameOffset + fileEntry.filenameLength;\n      const commentOffset = extraFieldOffset + fileEntry.extraFieldLength;\n      const versionMadeBy = getUint16(directoryView, offset + 4);\n      const msDosCompatible = (versionMadeBy & 0) == 0;\n      const rawFilename = directoryArray.subarray(filenameOffset, extraFieldOffset);\n      const commentLength = getUint16(directoryView, offset + 32);\n      const endOffset = commentOffset + commentLength;\n      const rawComment = directoryArray.subarray(commentOffset, endOffset);\n      const filenameUTF8 = languageEncodingFlag;\n      const commentUTF8 = languageEncodingFlag;\n      const directory = msDosCompatible && (getUint8(directoryView, offset + 38) & FILE_ATTR_MSDOS_DIR_MASK) == FILE_ATTR_MSDOS_DIR_MASK;\n      const offsetFileEntry = getUint32(directoryView, offset + 42) + prependedDataLength;\n      Object.assign(fileEntry, {\n        versionMadeBy,\n        msDosCompatible,\n        compressedSize: 0,\n        uncompressedSize: 0,\n        commentLength,\n        directory,\n        offset: offsetFileEntry,\n        diskNumberStart: getUint16(directoryView, offset + 34),\n        internalFileAttribute: getUint16(directoryView, offset + 36),\n        externalFileAttribute: getUint32(directoryView, offset + 38),\n        rawFilename,\n        filenameUTF8,\n        commentUTF8,\n        rawExtraField: directoryArray.subarray(extraFieldOffset, commentOffset)\n      });\n      const decode = getOptionValue(zipReader, options, \"decodeText\") || decodeText;\n      const rawFilenameEncoding = filenameUTF8 ? CHARSET_UTF8 : filenameEncoding || CHARSET_CP437;\n      const rawCommentEncoding = commentUTF8 ? CHARSET_UTF8 : commentEncoding || CHARSET_CP437;\n      let filename = decode(rawFilename, rawFilenameEncoding);\n      if (filename === UNDEFINED_VALUE) {\n        filename = decodeText(rawFilename, rawFilenameEncoding);\n      }\n      let comment = decode(rawComment, rawCommentEncoding);\n      if (comment === UNDEFINED_VALUE) {\n        comment = decodeText(rawComment, rawCommentEncoding);\n      }\n      Object.assign(fileEntry, {\n        rawComment,\n        filename,\n        comment,\n        directory: directory || filename.endsWith(DIRECTORY_SIGNATURE)\n      });\n      startOffset = Math.max(offsetFileEntry, startOffset);\n      await readCommonFooter(fileEntry, fileEntry, directoryView, offset + 6);\n      fileEntry.zipCrypto = fileEntry.encrypted && !fileEntry.extraFieldAES;\n      const entry = new Entry(fileEntry);\n      entry.getData = (writer, options) => fileEntry.getData(writer, entry, options);\n      offset = endOffset;\n      const {\n        onprogress\n      } = options;\n      if (onprogress) {\n        try {\n          await onprogress(indexFile + 1, filesLength, new Entry(fileEntry));\n        } catch (_error) {\n          // ignored\n        }\n      }\n      yield entry;\n    }\n    const extractPrependedData = getOptionValue(zipReader, options, \"extractPrependedData\");\n    const extractAppendedData = getOptionValue(zipReader, options, \"extractAppendedData\");\n    if (extractPrependedData) {\n      zipReader.prependedData = startOffset > 0 ? await readUint8Array(reader, 0, startOffset) : new Uint8Array();\n    }\n    zipReader.comment = commentLength ? await readUint8Array(reader, commentOffset + END_OF_CENTRAL_DIR_LENGTH, commentLength) : new Uint8Array();\n    if (extractAppendedData) {\n      zipReader.appendedData = appendedDataOffset < reader.size ? await readUint8Array(reader, appendedDataOffset, reader.size - appendedDataOffset) : new Uint8Array();\n    }\n    return true;\n  }\n  async getEntries(options = {}) {\n    const entries = [];\n    for await (const entry of this.getEntriesGenerator(options)) {\n      entries.push(entry);\n    }\n    return entries;\n  }\n  async close() {}\n}\nclass ZipReaderStream {\n  constructor(options = {}) {\n    const {\n      readable,\n      writable\n    } = new TransformStream();\n    const gen = new ZipReader(readable, options).getEntriesGenerator();\n    this.readable = new ReadableStream({\n      async pull(controller) {\n        const {\n          done,\n          value\n        } = await gen.next();\n        if (done) return controller.close();\n        const chunk = {\n          ...value,\n          readable: function () {\n            const {\n              readable,\n              writable\n            } = new TransformStream();\n            if (value.getData) {\n              value.getData(writable);\n              return readable;\n            }\n          }()\n        };\n        delete chunk.getData;\n        controller.enqueue(chunk);\n      }\n    });\n    this.writable = writable;\n  }\n}\nexport { ZipReader, ZipReaderStream, ERR_BAD_FORMAT, ERR_EOCDR_NOT_FOUND, ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND, ERR_CENTRAL_DIRECTORY_NOT_FOUND, ERR_LOCAL_FILE_HEADER_NOT_FOUND, ERR_EXTRAFIELD_ZIP64_NOT_FOUND, ERR_ENCRYPTED, ERR_UNSUPPORTED_ENCRYPTION, ERR_UNSUPPORTED_COMPRESSION, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_SPLIT_ZIP_FILE };\nclass ZipEntry {\n  constructor(reader, config, options) {\n    Object.assign(this, {\n      reader,\n      config,\n      options\n    });\n  }\n  async getData(writer, fileEntry, options = {}) {\n    const zipEntry = this;\n    const {\n      reader,\n      offset,\n      diskNumberStart,\n      extraFieldAES,\n      compressionMethod,\n      config,\n      bitFlag,\n      signature,\n      rawLastModDate,\n      uncompressedSize,\n      compressedSize\n    } = zipEntry;\n    const localDirectory = fileEntry.localDirectory = {};\n    const dataArray = await readUint8Array(reader, offset, 30, diskNumberStart);\n    const dataView = getDataView(dataArray);\n    let password = getOptionValue(zipEntry, options, \"password\");\n    let rawPassword = getOptionValue(zipEntry, options, \"rawPassword\");\n    const passThrough = getOptionValue(zipEntry, options, \"passThrough\");\n    password = password && password.length && password;\n    rawPassword = rawPassword && rawPassword.length && rawPassword;\n    if (extraFieldAES) {\n      if (extraFieldAES.originalCompressionMethod != COMPRESSION_METHOD_AES) {\n        throw new Error(ERR_UNSUPPORTED_COMPRESSION);\n      }\n    }\n    if (compressionMethod != COMPRESSION_METHOD_STORE && compressionMethod != COMPRESSION_METHOD_DEFLATE && !passThrough) {\n      throw new Error(ERR_UNSUPPORTED_COMPRESSION);\n    }\n    if (getUint32(dataView, 0) != LOCAL_FILE_HEADER_SIGNATURE) {\n      throw new Error(ERR_LOCAL_FILE_HEADER_NOT_FOUND);\n    }\n    readCommonHeader(localDirectory, dataView, 4);\n    localDirectory.rawExtraField = localDirectory.extraFieldLength ? await readUint8Array(reader, offset + 30 + localDirectory.filenameLength, localDirectory.extraFieldLength, diskNumberStart) : new Uint8Array();\n    await readCommonFooter(zipEntry, localDirectory, dataView, 4, true);\n    Object.assign(fileEntry, {\n      lastAccessDate: localDirectory.lastAccessDate,\n      creationDate: localDirectory.creationDate\n    });\n    const encrypted = zipEntry.encrypted && localDirectory.encrypted && !passThrough;\n    const zipCrypto = encrypted && !extraFieldAES;\n    if (!passThrough) {\n      fileEntry.zipCrypto = zipCrypto;\n    }\n    if (encrypted) {\n      if (!zipCrypto && extraFieldAES.strength === UNDEFINED_VALUE) {\n        throw new Error(ERR_UNSUPPORTED_ENCRYPTION);\n      } else if (!password && !rawPassword) {\n        throw new Error(ERR_ENCRYPTED);\n      }\n    }\n    const dataOffset = offset + 30 + localDirectory.filenameLength + localDirectory.extraFieldLength;\n    const size = compressedSize;\n    const readable = reader.readable;\n    Object.assign(readable, {\n      diskNumberStart,\n      offset: dataOffset,\n      size\n    });\n    const signal = getOptionValue(zipEntry, options, \"signal\");\n    const checkPasswordOnly = getOptionValue(zipEntry, options, \"checkPasswordOnly\");\n    if (checkPasswordOnly) {\n      writer = new WritableStream();\n    }\n    writer = initWriter(writer);\n    await initStream(writer, passThrough ? compressedSize : uncompressedSize);\n    const {\n      writable\n    } = writer;\n    const {\n      onstart,\n      onprogress,\n      onend\n    } = options;\n    const workerOptions = {\n      options: {\n        codecType: CODEC_INFLATE,\n        password,\n        rawPassword,\n        zipCrypto,\n        encryptionStrength: extraFieldAES && extraFieldAES.strength,\n        signed: getOptionValue(zipEntry, options, \"checkSignature\") && !passThrough,\n        passwordVerification: zipCrypto && (bitFlag.dataDescriptor ? rawLastModDate >>> 8 & 0xFF : signature >>> 24 & 0xFF),\n        signature,\n        compressed: compressionMethod != 0 && !passThrough,\n        encrypted: zipEntry.encrypted && !passThrough,\n        useWebWorkers: getOptionValue(zipEntry, options, \"useWebWorkers\"),\n        useCompressionStream: getOptionValue(zipEntry, options, \"useCompressionStream\"),\n        transferStreams: getOptionValue(zipEntry, options, \"transferStreams\"),\n        checkPasswordOnly\n      },\n      config,\n      streamOptions: {\n        signal,\n        size,\n        onstart,\n        onprogress,\n        onend\n      }\n    };\n    let outputSize = 0;\n    try {\n      ({\n        outputSize\n      } = await runWorker({\n        readable,\n        writable\n      }, workerOptions));\n    } catch (error) {\n      if (!checkPasswordOnly || error.message != ERR_ABORT_CHECK_PASSWORD) {\n        throw error;\n      }\n    } finally {\n      const preventClose = getOptionValue(zipEntry, options, \"preventClose\");\n      writable.size += outputSize;\n      if (!preventClose && !writable.locked) {\n        await writable.getWriter().close();\n      }\n    }\n    return checkPasswordOnly ? UNDEFINED_VALUE : writer.getData ? writer.getData() : writable;\n  }\n}\nfunction readCommonHeader(directory, dataView, offset) {\n  const rawBitFlag = directory.rawBitFlag = getUint16(dataView, offset + 2);\n  const encrypted = (rawBitFlag & BITFLAG_ENCRYPTED) == BITFLAG_ENCRYPTED;\n  const rawLastModDate = getUint32(dataView, offset + 6);\n  Object.assign(directory, {\n    encrypted,\n    version: getUint16(dataView, offset),\n    bitFlag: {\n      level: (rawBitFlag & BITFLAG_LEVEL) >> 1,\n      dataDescriptor: (rawBitFlag & BITFLAG_DATA_DESCRIPTOR) == BITFLAG_DATA_DESCRIPTOR,\n      languageEncodingFlag: (rawBitFlag & BITFLAG_LANG_ENCODING_FLAG) == BITFLAG_LANG_ENCODING_FLAG\n    },\n    rawLastModDate,\n    lastModDate: getDate(rawLastModDate),\n    filenameLength: getUint16(dataView, offset + 22),\n    extraFieldLength: getUint16(dataView, offset + 24)\n  });\n}\nasync function readCommonFooter(fileEntry, directory, dataView, offset, localDirectory) {\n  const {\n    rawExtraField\n  } = directory;\n  const extraField = directory.extraField = new Map();\n  const rawExtraFieldView = getDataView(new Uint8Array(rawExtraField));\n  let offsetExtraField = 0;\n  try {\n    while (offsetExtraField < rawExtraField.length) {\n      const type = getUint16(rawExtraFieldView, offsetExtraField);\n      const size = getUint16(rawExtraFieldView, offsetExtraField + 2);\n      extraField.set(type, {\n        type,\n        data: rawExtraField.slice(offsetExtraField + 4, offsetExtraField + 4 + size)\n      });\n      offsetExtraField += 4 + size;\n    }\n  } catch (_error) {\n    // ignored\n  }\n  const compressionMethod = getUint16(dataView, offset + 4);\n  Object.assign(directory, {\n    signature: getUint32(dataView, offset + 10),\n    uncompressedSize: getUint32(dataView, offset + 18),\n    compressedSize: getUint32(dataView, offset + 14)\n  });\n  const extraFieldZip64 = extraField.get(EXTRAFIELD_TYPE_ZIP64);\n  if (extraFieldZip64) {\n    readExtraFieldZip64(extraFieldZip64, directory);\n    directory.extraFieldZip64 = extraFieldZip64;\n  }\n  const extraFieldUnicodePath = extraField.get(EXTRAFIELD_TYPE_UNICODE_PATH);\n  if (extraFieldUnicodePath) {\n    await readExtraFieldUnicode(extraFieldUnicodePath, PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, directory, fileEntry);\n    directory.extraFieldUnicodePath = extraFieldUnicodePath;\n  }\n  const extraFieldUnicodeComment = extraField.get(EXTRAFIELD_TYPE_UNICODE_COMMENT);\n  if (extraFieldUnicodeComment) {\n    await readExtraFieldUnicode(extraFieldUnicodeComment, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT, directory, fileEntry);\n    directory.extraFieldUnicodeComment = extraFieldUnicodeComment;\n  }\n  const extraFieldAES = extraField.get(EXTRAFIELD_TYPE_AES);\n  if (extraFieldAES) {\n    readExtraFieldAES(extraFieldAES, directory, compressionMethod);\n    directory.extraFieldAES = extraFieldAES;\n  } else {\n    directory.compressionMethod = compressionMethod;\n  }\n  const extraFieldNTFS = extraField.get(EXTRAFIELD_TYPE_NTFS);\n  if (extraFieldNTFS) {\n    readExtraFieldNTFS(extraFieldNTFS, directory);\n    directory.extraFieldNTFS = extraFieldNTFS;\n  }\n  const extraFieldExtendedTimestamp = extraField.get(EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP);\n  if (extraFieldExtendedTimestamp) {\n    readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory, localDirectory);\n    directory.extraFieldExtendedTimestamp = extraFieldExtendedTimestamp;\n  }\n  const extraFieldUSDZ = extraField.get(EXTRAFIELD_TYPE_USDZ);\n  if (extraFieldUSDZ) {\n    directory.extraFieldUSDZ = extraFieldUSDZ;\n  }\n}\nfunction readExtraFieldZip64(extraFieldZip64, directory) {\n  directory.zip64 = true;\n  const extraFieldView = getDataView(extraFieldZip64.data);\n  const missingProperties = ZIP64_PROPERTIES.filter(([propertyName, max]) => directory[propertyName] == max);\n  for (let indexMissingProperty = 0, offset = 0; indexMissingProperty < missingProperties.length; indexMissingProperty++) {\n    const [propertyName, max] = missingProperties[indexMissingProperty];\n    if (directory[propertyName] == max) {\n      const extraction = ZIP64_EXTRACTION[max];\n      directory[propertyName] = extraFieldZip64[propertyName] = extraction.getValue(extraFieldView, offset);\n      offset += extraction.bytes;\n    } else if (extraFieldZip64[propertyName]) {\n      throw new Error(ERR_EXTRAFIELD_ZIP64_NOT_FOUND);\n    }\n  }\n}\nasync function readExtraFieldUnicode(extraFieldUnicode, propertyName, rawPropertyName, directory, fileEntry) {\n  const extraFieldView = getDataView(extraFieldUnicode.data);\n  const crc32 = new Crc32();\n  crc32.append(fileEntry[rawPropertyName]);\n  const dataViewSignature = getDataView(new Uint8Array(4));\n  dataViewSignature.setUint32(0, crc32.get(), true);\n  const signature = getUint32(extraFieldView, 1);\n  Object.assign(extraFieldUnicode, {\n    version: getUint8(extraFieldView, 0),\n    [propertyName]: decodeText(extraFieldUnicode.data.subarray(5)),\n    valid: !fileEntry.bitFlag.languageEncodingFlag && signature == getUint32(dataViewSignature, 0)\n  });\n  if (extraFieldUnicode.valid) {\n    directory[propertyName] = extraFieldUnicode[propertyName];\n    directory[propertyName + \"UTF8\"] = true;\n  }\n}\nfunction readExtraFieldAES(extraFieldAES, directory, compressionMethod) {\n  const extraFieldView = getDataView(extraFieldAES.data);\n  const strength = getUint8(extraFieldView, 4);\n  Object.assign(extraFieldAES, {\n    vendorVersion: getUint8(extraFieldView, 0),\n    vendorId: getUint8(extraFieldView, 2),\n    strength,\n    originalCompressionMethod: compressionMethod,\n    compressionMethod: getUint16(extraFieldView, 5)\n  });\n  directory.compressionMethod = extraFieldAES.compressionMethod;\n}\nfunction readExtraFieldNTFS(extraFieldNTFS, directory) {\n  const extraFieldView = getDataView(extraFieldNTFS.data);\n  let offsetExtraField = 4;\n  let tag1Data;\n  try {\n    while (offsetExtraField < extraFieldNTFS.data.length && !tag1Data) {\n      const tagValue = getUint16(extraFieldView, offsetExtraField);\n      const attributeSize = getUint16(extraFieldView, offsetExtraField + 2);\n      if (tagValue == EXTRAFIELD_TYPE_NTFS_TAG1) {\n        tag1Data = extraFieldNTFS.data.slice(offsetExtraField + 4, offsetExtraField + 4 + attributeSize);\n      }\n      offsetExtraField += 4 + attributeSize;\n    }\n  } catch (_error) {\n    // ignored\n  }\n  try {\n    if (tag1Data && tag1Data.length == 24) {\n      const tag1View = getDataView(tag1Data);\n      const rawLastModDate = tag1View.getBigUint64(0, true);\n      const rawLastAccessDate = tag1View.getBigUint64(8, true);\n      const rawCreationDate = tag1View.getBigUint64(16, true);\n      Object.assign(extraFieldNTFS, {\n        rawLastModDate,\n        rawLastAccessDate,\n        rawCreationDate\n      });\n      const lastModDate = getDateNTFS(rawLastModDate);\n      const lastAccessDate = getDateNTFS(rawLastAccessDate);\n      const creationDate = getDateNTFS(rawCreationDate);\n      const extraFieldData = {\n        lastModDate,\n        lastAccessDate,\n        creationDate\n      };\n      Object.assign(extraFieldNTFS, extraFieldData);\n      Object.assign(directory, extraFieldData);\n    }\n  } catch (_error) {\n    // ignored\n  }\n}\nfunction readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory, localDirectory) {\n  const extraFieldView = getDataView(extraFieldExtendedTimestamp.data);\n  const flags = getUint8(extraFieldView, 0);\n  const timeProperties = [];\n  const timeRawProperties = [];\n  if (localDirectory) {\n    if ((flags & 0x1) == 0x1) {\n      timeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);\n      timeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);\n    }\n    if ((flags & 0x2) == 0x2) {\n      timeProperties.push(PROPERTY_NAME_LAST_ACCESS_DATE);\n      timeRawProperties.push(PROPERTY_NAME_RAW_LAST_ACCESS_DATE);\n    }\n    if ((flags & 0x4) == 0x4) {\n      timeProperties.push(PROPERTY_NAME_CREATION_DATE);\n      timeRawProperties.push(PROPERTY_NAME_RAW_CREATION_DATE);\n    }\n  } else if (extraFieldExtendedTimestamp.data.length >= 5) {\n    timeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);\n    timeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);\n  }\n  let offset = 1;\n  timeProperties.forEach((propertyName, indexProperty) => {\n    if (extraFieldExtendedTimestamp.data.length >= offset + 4) {\n      const time = getUint32(extraFieldView, offset);\n      directory[propertyName] = extraFieldExtendedTimestamp[propertyName] = new Date(time * 1000);\n      const rawPropertyName = timeRawProperties[indexProperty];\n      extraFieldExtendedTimestamp[rawPropertyName] = time;\n    }\n    offset += 4;\n  });\n}\nasync function seekSignature(reader, signature, startOffset, minimumBytes, maximumLength) {\n  const signatureArray = new Uint8Array(4);\n  const signatureView = getDataView(signatureArray);\n  setUint32(signatureView, 0, signature);\n  const maximumBytes = minimumBytes + maximumLength;\n  return (await seek(minimumBytes)) || (await seek(Math.min(maximumBytes, startOffset)));\n  async function seek(length) {\n    const offset = startOffset - length;\n    const bytes = await readUint8Array(reader, offset, length);\n    for (let indexByte = bytes.length - minimumBytes; indexByte >= 0; indexByte--) {\n      if (bytes[indexByte] == signatureArray[0] && bytes[indexByte + 1] == signatureArray[1] && bytes[indexByte + 2] == signatureArray[2] && bytes[indexByte + 3] == signatureArray[3]) {\n        return {\n          offset: offset + indexByte,\n          buffer: bytes.slice(indexByte, indexByte + minimumBytes).buffer\n        };\n      }\n    }\n  }\n}\nfunction getOptionValue(zipReader, options, name) {\n  return options[name] === UNDEFINED_VALUE ? zipReader.options[name] : options[name];\n}\nfunction getDate(timeRaw) {\n  const date = (timeRaw & 0xffff0000) >> 16,\n    time = timeRaw & 0x0000ffff;\n  try {\n    return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5, (time & 0x001F) * 2, 0);\n  } catch (_error) {\n    // ignored\n  }\n}\nfunction getDateNTFS(timeRaw) {\n  return new Date(Number(timeRaw / BigInt(10000) - BigInt(11644473600000)));\n}\nfunction getUint8(view, offset) {\n  return view.getUint8(offset);\n}\nfunction getUint16(view, offset) {\n  return view.getUint16(offset, true);\n}\nfunction getUint32(view, offset) {\n  return view.getUint32(offset, true);\n}\nfunction getBigUint64(view, offset) {\n  return Number(view.getBigUint64(offset, true));\n}\nfunction setUint32(view, offset, value) {\n  view.setUint32(offset, value, true);\n}\nfunction getDataView(array) {\n  return new DataView(array.buffer);\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global BigInt, TransformStream, Response */\n// deno-lint-ignore-file no-this-alias\n\nimport { MAX_32_BITS, MAX_16_BITS, COMPRESSION_METHOD_DEFLATE, COMPRESSION_METHOD_STORE, COMPRESSION_METHOD_AES, SPLIT_ZIP_FILE_SIGNATURE, LOCAL_FILE_HEADER_SIGNATURE, DATA_DESCRIPTOR_RECORD_SIGNATURE, CENTRAL_FILE_HEADER_SIGNATURE, END_OF_CENTRAL_DIR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_SIGNATURE, EXTRAFIELD_TYPE_AES, EXTRAFIELD_TYPE_ZIP64, EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP, EXTRAFIELD_TYPE_NTFS, EXTRAFIELD_TYPE_NTFS_TAG1, EXTRAFIELD_TYPE_USDZ, END_OF_CENTRAL_DIR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH, BITFLAG_ENCRYPTED, BITFLAG_DATA_DESCRIPTOR, BITFLAG_LANG_ENCODING_FLAG, FILE_ATTR_MSDOS_DIR_MASK, VERSION_DEFLATE, VERSION_ZIP64, VERSION_AES, DIRECTORY_SIGNATURE, MIN_DATE, MAX_DATE, UNDEFINED_VALUE } from \"./constants.js\";\nimport { getConfiguration, getChunkSize } from \"./configuration.js\";\nimport { CODEC_DEFLATE, runWorker } from \"./codec-pool.js\";\nimport { initStream, initReader, initWriter } from \"./io.js\";\nimport { encodeText } from \"./util/encode-text.js\";\nimport { PROPERTY_NAME_LAST_MODIFICATION_DATE, PROPERTY_NAME_LAST_ACCESS_DATE, PROPERTY_NAME_CREATION_DATE, PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE, PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE, PROPERTY_NAME_MS_DOS_COMPATIBLE, PROPERTY_NAME_ZIP64, PROPERTY_NAME_ENCRYPTED, PROPERTY_NAME_VERSION, PROPERTY_NAME_VERSION_MADE_BY, PROPERTY_NAME_ZIPCRYPTO, Entry } from \"./zip-entry.js\";\nconst ERR_DUPLICATED_NAME = \"File already exists\";\nconst ERR_INVALID_COMMENT = \"Zip file comment exceeds 64KB\";\nconst ERR_INVALID_ENTRY_COMMENT = \"File entry comment exceeds 64KB\";\nconst ERR_INVALID_ENTRY_NAME = \"File entry name exceeds 64KB\";\nconst ERR_INVALID_VERSION = \"Version exceeds 65535\";\nconst ERR_INVALID_ENCRYPTION_STRENGTH = \"The strength must equal 1, 2, or 3\";\nconst ERR_INVALID_EXTRAFIELD_TYPE = \"Extra field type exceeds 65535\";\nconst ERR_INVALID_EXTRAFIELD_DATA = \"Extra field data exceeds 64KB\";\nconst ERR_UNSUPPORTED_FORMAT = \"Zip64 is not supported (make sure 'keepOrder' is set to 'true')\";\nconst ERR_UNDEFINED_UNCOMPRESSED_SIZE = \"Undefined uncompressed size\";\nconst EXTRAFIELD_DATA_AES = new Uint8Array([0x07, 0x00, 0x02, 0x00, 0x41, 0x45, 0x03, 0x00, 0x00]);\nlet workers = 0;\nconst pendingEntries = [];\nclass ZipWriter {\n  constructor(writer, options = {}) {\n    writer = initWriter(writer);\n    const addSplitZipSignature = writer.availableSize !== UNDEFINED_VALUE && writer.availableSize > 0 && writer.availableSize !== Infinity && writer.maxSize !== UNDEFINED_VALUE && writer.maxSize > 0 && writer.maxSize !== Infinity;\n    Object.assign(this, {\n      writer,\n      addSplitZipSignature,\n      options,\n      config: getConfiguration(),\n      files: new Map(),\n      filenames: new Set(),\n      offset: options.offset === UNDEFINED_VALUE ? writer.writable.size : options.offset,\n      pendingEntriesSize: 0,\n      pendingAddFileCalls: new Set(),\n      bufferedWrites: 0\n    });\n  }\n  async add(name = \"\", reader, options = {}) {\n    const zipWriter = this;\n    const {\n      pendingAddFileCalls,\n      config\n    } = zipWriter;\n    if (workers < config.maxWorkers) {\n      workers++;\n    } else {\n      await new Promise(resolve => pendingEntries.push(resolve));\n    }\n    let promiseAddFile;\n    try {\n      name = name.trim();\n      if (zipWriter.filenames.has(name)) {\n        throw new Error(ERR_DUPLICATED_NAME);\n      }\n      zipWriter.filenames.add(name);\n      promiseAddFile = addFile(zipWriter, name, reader, options);\n      pendingAddFileCalls.add(promiseAddFile);\n      return await promiseAddFile;\n    } catch (error) {\n      zipWriter.filenames.delete(name);\n      throw error;\n    } finally {\n      pendingAddFileCalls.delete(promiseAddFile);\n      const pendingEntry = pendingEntries.shift();\n      if (pendingEntry) {\n        pendingEntry();\n      } else {\n        workers--;\n      }\n    }\n  }\n  async close(comment = new Uint8Array(), options = {}) {\n    const zipWriter = this;\n    const {\n      pendingAddFileCalls,\n      writer\n    } = this;\n    const {\n      writable\n    } = writer;\n    while (pendingAddFileCalls.size) {\n      await Promise.allSettled(Array.from(pendingAddFileCalls));\n    }\n    await closeFile(this, comment, options);\n    const preventClose = getOptionValue(zipWriter, options, \"preventClose\");\n    if (!preventClose) {\n      await writable.getWriter().close();\n    }\n    return writer.getData ? writer.getData() : writable;\n  }\n}\nclass ZipWriterStream {\n  constructor(options = {}) {\n    const {\n      readable,\n      writable\n    } = new TransformStream();\n    this.readable = readable;\n    this.zipWriter = new ZipWriter(writable, options);\n  }\n  transform(path) {\n    const {\n      readable,\n      writable\n    } = new TransformStream({\n      flush: () => {\n        this.zipWriter.close();\n      }\n    });\n    this.zipWriter.add(path, readable);\n    return {\n      readable: this.readable,\n      writable\n    };\n  }\n  writable(path) {\n    const {\n      readable,\n      writable\n    } = new TransformStream();\n    this.zipWriter.add(path, readable);\n    return writable;\n  }\n  close(comment = undefined, options = {}) {\n    return this.zipWriter.close(comment, options);\n  }\n}\nexport { ZipWriter, ZipWriterStream, ERR_DUPLICATED_NAME, ERR_INVALID_COMMENT, ERR_INVALID_ENTRY_NAME, ERR_INVALID_ENTRY_COMMENT, ERR_INVALID_VERSION, ERR_INVALID_EXTRAFIELD_TYPE, ERR_INVALID_EXTRAFIELD_DATA, ERR_INVALID_ENCRYPTION_STRENGTH, ERR_UNSUPPORTED_FORMAT, ERR_UNDEFINED_UNCOMPRESSED_SIZE };\nasync function addFile(zipWriter, name, reader, options) {\n  name = name.trim();\n  if (options.directory && !name.endsWith(DIRECTORY_SIGNATURE)) {\n    name += DIRECTORY_SIGNATURE;\n  } else {\n    options.directory = name.endsWith(DIRECTORY_SIGNATURE);\n  }\n  const encode = getOptionValue(zipWriter, options, \"encodeText\", encodeText);\n  let rawFilename = encode(name);\n  if (rawFilename === UNDEFINED_VALUE) {\n    rawFilename = encodeText(name);\n  }\n  if (getLength(rawFilename) > MAX_16_BITS) {\n    throw new Error(ERR_INVALID_ENTRY_NAME);\n  }\n  const comment = options.comment || \"\";\n  let rawComment = encode(comment);\n  if (rawComment === UNDEFINED_VALUE) {\n    rawComment = encodeText(comment);\n  }\n  if (getLength(rawComment) > MAX_16_BITS) {\n    throw new Error(ERR_INVALID_ENTRY_COMMENT);\n  }\n  const version = getOptionValue(zipWriter, options, PROPERTY_NAME_VERSION, VERSION_DEFLATE);\n  if (version > MAX_16_BITS) {\n    throw new Error(ERR_INVALID_VERSION);\n  }\n  const versionMadeBy = getOptionValue(zipWriter, options, PROPERTY_NAME_VERSION_MADE_BY, 20);\n  if (versionMadeBy > MAX_16_BITS) {\n    throw new Error(ERR_INVALID_VERSION);\n  }\n  const lastModDate = getOptionValue(zipWriter, options, PROPERTY_NAME_LAST_MODIFICATION_DATE, new Date());\n  const lastAccessDate = getOptionValue(zipWriter, options, PROPERTY_NAME_LAST_ACCESS_DATE);\n  const creationDate = getOptionValue(zipWriter, options, PROPERTY_NAME_CREATION_DATE);\n  const msDosCompatible = getOptionValue(zipWriter, options, PROPERTY_NAME_MS_DOS_COMPATIBLE, true);\n  const internalFileAttribute = getOptionValue(zipWriter, options, PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE, 0);\n  const externalFileAttribute = getOptionValue(zipWriter, options, PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE, 0);\n  const passThrough = getOptionValue(zipWriter, options, \"passThrough\");\n  let password, rawPassword;\n  if (!passThrough) {\n    password = getOptionValue(zipWriter, options, \"password\");\n    rawPassword = getOptionValue(zipWriter, options, \"rawPassword\");\n  }\n  const encryptionStrength = getOptionValue(zipWriter, options, \"encryptionStrength\", 3);\n  const zipCrypto = getOptionValue(zipWriter, options, PROPERTY_NAME_ZIPCRYPTO);\n  const extendedTimestamp = getOptionValue(zipWriter, options, \"extendedTimestamp\", true);\n  const keepOrder = getOptionValue(zipWriter, options, \"keepOrder\", true);\n  const level = getOptionValue(zipWriter, options, \"level\");\n  const useWebWorkers = getOptionValue(zipWriter, options, \"useWebWorkers\");\n  const bufferedWrite = getOptionValue(zipWriter, options, \"bufferedWrite\");\n  const dataDescriptorSignature = getOptionValue(zipWriter, options, \"dataDescriptorSignature\", false);\n  const signal = getOptionValue(zipWriter, options, \"signal\");\n  const useUnicodeFileNames = getOptionValue(zipWriter, options, \"useUnicodeFileNames\", true);\n  const useCompressionStream = getOptionValue(zipWriter, options, \"useCompressionStream\");\n  const compressionMethod = getOptionValue(zipWriter, options, \"compressionMethod\");\n  let dataDescriptor = getOptionValue(zipWriter, options, \"dataDescriptor\", true);\n  let zip64 = getOptionValue(zipWriter, options, PROPERTY_NAME_ZIP64);\n  if (!zipCrypto && (password !== UNDEFINED_VALUE || rawPassword !== UNDEFINED_VALUE) && !(encryptionStrength >= 1 && encryptionStrength <= 3)) {\n    throw new Error(ERR_INVALID_ENCRYPTION_STRENGTH);\n  }\n  let rawExtraField = new Uint8Array();\n  const {\n    extraField\n  } = options;\n  if (extraField) {\n    let extraFieldSize = 0;\n    let offset = 0;\n    extraField.forEach(data => extraFieldSize += 4 + getLength(data));\n    rawExtraField = new Uint8Array(extraFieldSize);\n    extraField.forEach((data, type) => {\n      if (type > MAX_16_BITS) {\n        throw new Error(ERR_INVALID_EXTRAFIELD_TYPE);\n      }\n      if (getLength(data) > MAX_16_BITS) {\n        throw new Error(ERR_INVALID_EXTRAFIELD_DATA);\n      }\n      arraySet(rawExtraField, new Uint16Array([type]), offset);\n      arraySet(rawExtraField, new Uint16Array([getLength(data)]), offset + 2);\n      arraySet(rawExtraField, data, offset + 4);\n      offset += 4 + getLength(data);\n    });\n  }\n  let maximumCompressedSize = 0;\n  let maximumEntrySize = 0;\n  let uncompressedSize = 0;\n  if (passThrough) {\n    ({\n      uncompressedSize\n    } = options);\n    if (uncompressedSize === UNDEFINED_VALUE) {\n      throw new Error(ERR_UNDEFINED_UNCOMPRESSED_SIZE);\n    }\n  }\n  const zip64Enabled = zip64 === true;\n  if (reader) {\n    reader = initReader(reader);\n    await initStream(reader);\n    if (!passThrough) {\n      if (reader.size === UNDEFINED_VALUE) {\n        dataDescriptor = true;\n        if (zip64 || zip64 === UNDEFINED_VALUE) {\n          zip64 = true;\n          uncompressedSize = maximumCompressedSize = MAX_32_BITS + 1;\n        }\n      } else {\n        uncompressedSize = reader.size;\n        maximumCompressedSize = getMaximumCompressedSize(uncompressedSize);\n      }\n    } else {\n      maximumCompressedSize = getMaximumCompressedSize(uncompressedSize);\n    }\n  }\n  const {\n    diskOffset,\n    diskNumber,\n    maxSize\n  } = zipWriter.writer;\n  const zip64UncompressedSize = zip64Enabled || uncompressedSize > MAX_32_BITS;\n  const zip64CompressedSize = zip64Enabled || maximumCompressedSize > MAX_32_BITS;\n  const zip64Offset = zip64Enabled || zipWriter.offset + zipWriter.pendingEntriesSize - diskOffset > MAX_32_BITS;\n  const supportZip64SplitFile = getOptionValue(zipWriter, options, \"supportZip64SplitFile\", true);\n  const zip64DiskNumberStart = supportZip64SplitFile && zip64Enabled || diskNumber + Math.ceil(zipWriter.pendingEntriesSize / maxSize) > MAX_16_BITS;\n  if (zip64Offset || zip64UncompressedSize || zip64CompressedSize || zip64DiskNumberStart) {\n    if (zip64 === false || !keepOrder) {\n      throw new Error(ERR_UNSUPPORTED_FORMAT);\n    } else {\n      zip64 = true;\n    }\n  }\n  zip64 = zip64 || false;\n  const encrypted = getOptionValue(zipWriter, options, PROPERTY_NAME_ENCRYPTED);\n  const {\n    signature\n  } = options;\n  options = Object.assign({}, options, {\n    rawFilename,\n    rawComment,\n    version,\n    versionMadeBy,\n    lastModDate,\n    lastAccessDate,\n    creationDate,\n    rawExtraField,\n    zip64,\n    zip64UncompressedSize,\n    zip64CompressedSize,\n    zip64Offset,\n    zip64DiskNumberStart,\n    password,\n    rawPassword,\n    level: !useCompressionStream && zipWriter.config.CompressionStream === UNDEFINED_VALUE && zipWriter.config.CompressionStreamNative === UNDEFINED_VALUE ? 0 : level,\n    useWebWorkers,\n    encryptionStrength,\n    extendedTimestamp,\n    zipCrypto,\n    bufferedWrite,\n    keepOrder,\n    useUnicodeFileNames,\n    dataDescriptor,\n    dataDescriptorSignature,\n    signal,\n    msDosCompatible,\n    internalFileAttribute,\n    externalFileAttribute,\n    useCompressionStream,\n    passThrough,\n    encrypted: Boolean(password && getLength(password) || rawPassword && getLength(rawPassword)) || passThrough && encrypted,\n    signature,\n    compressionMethod\n  });\n  const headerInfo = getHeaderInfo(options);\n  const dataDescriptorInfo = getDataDescriptorInfo(options);\n  const metadataSize = getLength(headerInfo.localHeaderArray, dataDescriptorInfo.dataDescriptorArray);\n  maximumEntrySize = metadataSize + maximumCompressedSize;\n  if (zipWriter.options.usdz) {\n    maximumEntrySize += maximumEntrySize + 64;\n  }\n  zipWriter.pendingEntriesSize += maximumEntrySize;\n  let fileEntry;\n  try {\n    fileEntry = await getFileEntry(zipWriter, name, reader, {\n      headerInfo,\n      dataDescriptorInfo,\n      metadataSize\n    }, options);\n  } finally {\n    zipWriter.pendingEntriesSize -= maximumEntrySize;\n  }\n  Object.assign(fileEntry, {\n    name,\n    comment,\n    extraField\n  });\n  return new Entry(fileEntry);\n}\nasync function getFileEntry(zipWriter, name, reader, entryInfo, options) {\n  const {\n    files,\n    writer\n  } = zipWriter;\n  const {\n    keepOrder,\n    dataDescriptor,\n    signal\n  } = options;\n  const {\n    headerInfo\n  } = entryInfo;\n  const {\n    usdz\n  } = zipWriter.options;\n  const previousFileEntry = Array.from(files.values()).pop();\n  let fileEntry = {};\n  let bufferedWrite;\n  let releaseLockWriter;\n  let releaseLockCurrentFileEntry;\n  let writingBufferedEntryData;\n  let writingEntryData;\n  let fileWriter;\n  let blobPromise;\n  files.set(name, fileEntry);\n  try {\n    let lockPreviousFileEntry;\n    if (keepOrder) {\n      lockPreviousFileEntry = previousFileEntry && previousFileEntry.lock;\n      requestLockCurrentFileEntry();\n    }\n    if ((options.bufferedWrite || zipWriter.writerLocked || zipWriter.bufferedWrites && keepOrder || !dataDescriptor) && !usdz) {\n      fileWriter = new TransformStream();\n      blobPromise = new Response(fileWriter.readable).blob();\n      fileWriter.writable.size = 0;\n      bufferedWrite = true;\n      zipWriter.bufferedWrites++;\n      await initStream(writer);\n    } else {\n      fileWriter = writer;\n      await requestLockWriter();\n    }\n    await initStream(fileWriter);\n    const {\n      writable\n    } = writer;\n    let {\n      diskOffset\n    } = writer;\n    if (zipWriter.addSplitZipSignature) {\n      delete zipWriter.addSplitZipSignature;\n      const signatureArray = new Uint8Array(4);\n      const signatureArrayView = getDataView(signatureArray);\n      setUint32(signatureArrayView, 0, SPLIT_ZIP_FILE_SIGNATURE);\n      await writeData(writable, signatureArray);\n      zipWriter.offset += 4;\n    }\n    if (usdz) {\n      appendExtraFieldUSDZ(entryInfo, zipWriter.offset - diskOffset);\n    }\n    if (!bufferedWrite) {\n      await lockPreviousFileEntry;\n      await skipDiskIfNeeded(writable);\n    }\n    const {\n      diskNumber\n    } = writer;\n    writingEntryData = true;\n    fileEntry.diskNumberStart = diskNumber;\n    fileEntry = await createFileEntry(reader, fileWriter, fileEntry, entryInfo, zipWriter.config, options);\n    writingEntryData = false;\n    files.set(name, fileEntry);\n    fileEntry.filename = name;\n    if (bufferedWrite) {\n      await fileWriter.writable.getWriter().close();\n      let blob = await blobPromise;\n      await lockPreviousFileEntry;\n      await requestLockWriter();\n      writingBufferedEntryData = true;\n      if (!dataDescriptor) {\n        blob = await writeExtraHeaderInfo(fileEntry, blob, writable, options);\n      }\n      await skipDiskIfNeeded(writable);\n      fileEntry.diskNumberStart = writer.diskNumber;\n      diskOffset = writer.diskOffset;\n      await blob.stream().pipeTo(writable, {\n        preventClose: true,\n        preventAbort: true,\n        signal\n      });\n      writable.size += blob.size;\n      writingBufferedEntryData = false;\n    }\n    fileEntry.offset = zipWriter.offset - diskOffset;\n    if (fileEntry.zip64) {\n      setZip64ExtraInfo(fileEntry, options);\n    } else if (fileEntry.offset > MAX_32_BITS) {\n      throw new Error(ERR_UNSUPPORTED_FORMAT);\n    }\n    zipWriter.offset += fileEntry.size;\n    return fileEntry;\n  } catch (error) {\n    if (bufferedWrite && writingBufferedEntryData || !bufferedWrite && writingEntryData) {\n      zipWriter.hasCorruptedEntries = true;\n      if (error) {\n        try {\n          error.corruptedEntry = true;\n        } catch (_error) {\n          // ignored\n        }\n      }\n      if (bufferedWrite) {\n        zipWriter.offset += fileWriter.writable.size;\n      } else {\n        zipWriter.offset = fileWriter.writable.size;\n      }\n    }\n    files.delete(name);\n    throw error;\n  } finally {\n    if (bufferedWrite) {\n      zipWriter.bufferedWrites--;\n    }\n    if (releaseLockCurrentFileEntry) {\n      releaseLockCurrentFileEntry();\n    }\n    if (releaseLockWriter) {\n      releaseLockWriter();\n    }\n  }\n  function requestLockCurrentFileEntry() {\n    fileEntry.lock = new Promise(resolve => releaseLockCurrentFileEntry = resolve);\n  }\n  async function requestLockWriter() {\n    zipWriter.writerLocked = true;\n    const {\n      lockWriter\n    } = zipWriter;\n    zipWriter.lockWriter = new Promise(resolve => releaseLockWriter = () => {\n      zipWriter.writerLocked = false;\n      resolve();\n    });\n    await lockWriter;\n  }\n  async function skipDiskIfNeeded(writable) {\n    if (getLength(headerInfo.localHeaderArray) > writer.availableSize) {\n      writer.availableSize = 0;\n      await writeData(writable, new Uint8Array());\n    }\n  }\n}\nasync function createFileEntry(reader, writer, {\n  diskNumberStart,\n  lock\n}, entryInfo, config, options) {\n  const {\n    headerInfo,\n    dataDescriptorInfo,\n    metadataSize\n  } = entryInfo;\n  const {\n    localHeaderArray,\n    headerArray,\n    lastModDate,\n    rawLastModDate,\n    encrypted,\n    compressed,\n    version,\n    compressionMethod,\n    rawExtraFieldExtendedTimestamp,\n    extraFieldExtendedTimestampFlag,\n    rawExtraFieldNTFS,\n    rawExtraFieldAES\n  } = headerInfo;\n  const {\n    dataDescriptorArray\n  } = dataDescriptorInfo;\n  const {\n    rawFilename,\n    lastAccessDate,\n    creationDate,\n    password,\n    rawPassword,\n    level,\n    zip64,\n    zip64UncompressedSize,\n    zip64CompressedSize,\n    zip64Offset,\n    zip64DiskNumberStart,\n    zipCrypto,\n    dataDescriptor,\n    directory,\n    versionMadeBy,\n    rawComment,\n    rawExtraField,\n    useWebWorkers,\n    onstart,\n    onprogress,\n    onend,\n    signal,\n    encryptionStrength,\n    extendedTimestamp,\n    msDosCompatible,\n    internalFileAttribute,\n    externalFileAttribute,\n    useCompressionStream,\n    passThrough\n  } = options;\n  const fileEntry = {\n    lock,\n    versionMadeBy,\n    zip64,\n    directory: Boolean(directory),\n    filenameUTF8: true,\n    rawFilename,\n    commentUTF8: true,\n    rawComment,\n    rawExtraFieldExtendedTimestamp,\n    rawExtraFieldNTFS,\n    rawExtraFieldAES,\n    rawExtraField,\n    extendedTimestamp,\n    msDosCompatible,\n    internalFileAttribute,\n    externalFileAttribute,\n    diskNumberStart\n  };\n  let {\n    signature,\n    uncompressedSize\n  } = options;\n  let compressedSize = 0;\n  if (!passThrough) {\n    uncompressedSize = 0;\n  }\n  const {\n    writable\n  } = writer;\n  if (reader) {\n    reader.chunkSize = getChunkSize(config);\n    await writeData(writable, localHeaderArray);\n    const readable = reader.readable;\n    const size = readable.size = reader.size;\n    const workerOptions = {\n      options: {\n        codecType: CODEC_DEFLATE,\n        level,\n        rawPassword,\n        password,\n        encryptionStrength,\n        zipCrypto: encrypted && zipCrypto,\n        passwordVerification: encrypted && zipCrypto && rawLastModDate >> 8 & 0xFF,\n        signed: !passThrough,\n        compressed: compressed && !passThrough,\n        encrypted: encrypted && !passThrough,\n        useWebWorkers,\n        useCompressionStream,\n        transferStreams: false\n      },\n      config,\n      streamOptions: {\n        signal,\n        size,\n        onstart,\n        onprogress,\n        onend\n      }\n    };\n    const result = await runWorker({\n      readable,\n      writable\n    }, workerOptions);\n    compressedSize = result.outputSize;\n    if (!passThrough) {\n      uncompressedSize = result.inputSize;\n      signature = result.signature;\n    }\n    writable.size += uncompressedSize;\n  } else {\n    await writeData(writable, localHeaderArray);\n  }\n  let rawExtraFieldZip64;\n  if (zip64) {\n    let rawExtraFieldZip64Length = 4;\n    if (zip64UncompressedSize) {\n      rawExtraFieldZip64Length += 8;\n    }\n    if (zip64CompressedSize) {\n      rawExtraFieldZip64Length += 8;\n    }\n    if (zip64Offset) {\n      rawExtraFieldZip64Length += 8;\n    }\n    if (zip64DiskNumberStart) {\n      rawExtraFieldZip64Length += 4;\n    }\n    rawExtraFieldZip64 = new Uint8Array(rawExtraFieldZip64Length);\n  } else {\n    rawExtraFieldZip64 = new Uint8Array();\n  }\n  setEntryInfo({\n    signature,\n    rawExtraFieldZip64,\n    compressedSize,\n    uncompressedSize,\n    headerInfo,\n    dataDescriptorInfo\n  }, options);\n  if (dataDescriptor) {\n    await writeData(writable, dataDescriptorArray);\n  }\n  Object.assign(fileEntry, {\n    uncompressedSize,\n    compressedSize,\n    lastModDate,\n    rawLastModDate,\n    creationDate,\n    lastAccessDate,\n    encrypted,\n    zipCrypto,\n    size: metadataSize + compressedSize,\n    compressionMethod,\n    version,\n    headerArray,\n    signature,\n    rawExtraFieldZip64,\n    extraFieldExtendedTimestampFlag,\n    zip64UncompressedSize,\n    zip64CompressedSize,\n    zip64Offset,\n    zip64DiskNumberStart\n  });\n  return fileEntry;\n}\nfunction getHeaderInfo(options) {\n  const {\n    rawFilename,\n    lastModDate,\n    lastAccessDate,\n    creationDate,\n    level,\n    zip64,\n    zipCrypto,\n    useUnicodeFileNames,\n    dataDescriptor,\n    directory,\n    rawExtraField,\n    encryptionStrength,\n    extendedTimestamp,\n    encrypted\n  } = options;\n  const compressed = level !== 0 && !directory;\n  let {\n    version,\n    compressionMethod\n  } = options;\n  let rawExtraFieldAES;\n  if (encrypted && !zipCrypto) {\n    rawExtraFieldAES = new Uint8Array(getLength(EXTRAFIELD_DATA_AES) + 2);\n    const extraFieldAESView = getDataView(rawExtraFieldAES);\n    setUint16(extraFieldAESView, 0, EXTRAFIELD_TYPE_AES);\n    arraySet(rawExtraFieldAES, EXTRAFIELD_DATA_AES, 2);\n    setUint8(extraFieldAESView, 8, encryptionStrength);\n  } else {\n    rawExtraFieldAES = new Uint8Array();\n  }\n  let rawExtraFieldNTFS;\n  let rawExtraFieldExtendedTimestamp;\n  let extraFieldExtendedTimestampFlag;\n  if (extendedTimestamp) {\n    rawExtraFieldExtendedTimestamp = new Uint8Array(9 + (lastAccessDate ? 4 : 0) + (creationDate ? 4 : 0));\n    const extraFieldExtendedTimestampView = getDataView(rawExtraFieldExtendedTimestamp);\n    setUint16(extraFieldExtendedTimestampView, 0, EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP);\n    setUint16(extraFieldExtendedTimestampView, 2, getLength(rawExtraFieldExtendedTimestamp) - 4);\n    extraFieldExtendedTimestampFlag = 0x1 + (lastAccessDate ? 0x2 : 0) + (creationDate ? 0x4 : 0);\n    setUint8(extraFieldExtendedTimestampView, 4, extraFieldExtendedTimestampFlag);\n    let offset = 5;\n    setUint32(extraFieldExtendedTimestampView, offset, Math.floor(lastModDate.getTime() / 1000));\n    offset += 4;\n    if (lastAccessDate) {\n      setUint32(extraFieldExtendedTimestampView, offset, Math.floor(lastAccessDate.getTime() / 1000));\n      offset += 4;\n    }\n    if (creationDate) {\n      setUint32(extraFieldExtendedTimestampView, offset, Math.floor(creationDate.getTime() / 1000));\n    }\n    try {\n      rawExtraFieldNTFS = new Uint8Array(36);\n      const extraFieldNTFSView = getDataView(rawExtraFieldNTFS);\n      const lastModTimeNTFS = getTimeNTFS(lastModDate);\n      setUint16(extraFieldNTFSView, 0, EXTRAFIELD_TYPE_NTFS);\n      setUint16(extraFieldNTFSView, 2, 32);\n      setUint16(extraFieldNTFSView, 8, EXTRAFIELD_TYPE_NTFS_TAG1);\n      setUint16(extraFieldNTFSView, 10, 24);\n      setBigUint64(extraFieldNTFSView, 12, lastModTimeNTFS);\n      setBigUint64(extraFieldNTFSView, 20, getTimeNTFS(lastAccessDate) || lastModTimeNTFS);\n      setBigUint64(extraFieldNTFSView, 28, getTimeNTFS(creationDate) || lastModTimeNTFS);\n    } catch (_error) {\n      rawExtraFieldNTFS = new Uint8Array();\n    }\n  } else {\n    rawExtraFieldNTFS = rawExtraFieldExtendedTimestamp = new Uint8Array();\n  }\n  let bitFlag = 0;\n  if (useUnicodeFileNames) {\n    bitFlag = bitFlag | BITFLAG_LANG_ENCODING_FLAG;\n  }\n  if (dataDescriptor) {\n    bitFlag = bitFlag | BITFLAG_DATA_DESCRIPTOR;\n  }\n  if (compressionMethod === UNDEFINED_VALUE) {\n    compressionMethod = compressed ? COMPRESSION_METHOD_DEFLATE : COMPRESSION_METHOD_STORE;\n  }\n  if (compressionMethod == COMPRESSION_METHOD_DEFLATE) {\n    if (level >= 1 && level < 3) {\n      bitFlag = bitFlag | 0b110;\n    }\n    if (level >= 3 && level < 5) {\n      bitFlag = bitFlag | 0b01;\n    }\n    if (level === 9) {\n      bitFlag = bitFlag | 0b10;\n    }\n  }\n  if (zip64) {\n    version = version > VERSION_ZIP64 ? version : VERSION_ZIP64;\n  }\n  if (encrypted) {\n    bitFlag = bitFlag | BITFLAG_ENCRYPTED;\n    if (!zipCrypto) {\n      version = version > VERSION_AES ? version : VERSION_AES;\n      rawExtraFieldAES[9] = compressionMethod;\n      compressionMethod = COMPRESSION_METHOD_AES;\n    }\n  }\n  const headerArray = new Uint8Array(26);\n  const headerView = getDataView(headerArray);\n  setUint16(headerView, 0, version);\n  setUint16(headerView, 2, bitFlag);\n  setUint16(headerView, 4, compressionMethod);\n  const dateArray = new Uint32Array(1);\n  const dateView = getDataView(dateArray);\n  let lastModDateMsDos;\n  if (lastModDate < MIN_DATE) {\n    lastModDateMsDos = MIN_DATE;\n  } else if (lastModDate > MAX_DATE) {\n    lastModDateMsDos = MAX_DATE;\n  } else {\n    lastModDateMsDos = lastModDate;\n  }\n  setUint16(dateView, 0, (lastModDateMsDos.getHours() << 6 | lastModDateMsDos.getMinutes()) << 5 | lastModDateMsDos.getSeconds() / 2);\n  setUint16(dateView, 2, (lastModDateMsDos.getFullYear() - 1980 << 4 | lastModDateMsDos.getMonth() + 1) << 5 | lastModDateMsDos.getDate());\n  const rawLastModDate = dateArray[0];\n  setUint32(headerView, 6, rawLastModDate);\n  setUint16(headerView, 22, getLength(rawFilename));\n  const extraFieldLength = getLength(rawExtraFieldAES, rawExtraFieldExtendedTimestamp, rawExtraFieldNTFS, rawExtraField);\n  setUint16(headerView, 24, extraFieldLength);\n  const localHeaderArray = new Uint8Array(30 + getLength(rawFilename) + extraFieldLength);\n  const localHeaderView = getDataView(localHeaderArray);\n  setUint32(localHeaderView, 0, LOCAL_FILE_HEADER_SIGNATURE);\n  arraySet(localHeaderArray, headerArray, 4);\n  arraySet(localHeaderArray, rawFilename, 30);\n  arraySet(localHeaderArray, rawExtraFieldAES, 30 + getLength(rawFilename));\n  arraySet(localHeaderArray, rawExtraFieldExtendedTimestamp, 30 + getLength(rawFilename, rawExtraFieldAES));\n  arraySet(localHeaderArray, rawExtraFieldNTFS, 30 + getLength(rawFilename, rawExtraFieldAES, rawExtraFieldExtendedTimestamp));\n  arraySet(localHeaderArray, rawExtraField, 30 + getLength(rawFilename, rawExtraFieldAES, rawExtraFieldExtendedTimestamp, rawExtraFieldNTFS));\n  return {\n    localHeaderArray,\n    headerArray,\n    headerView,\n    lastModDate,\n    rawLastModDate,\n    encrypted,\n    compressed,\n    version,\n    compressionMethod,\n    extraFieldExtendedTimestampFlag,\n    rawExtraFieldExtendedTimestamp,\n    rawExtraFieldNTFS,\n    rawExtraFieldAES,\n    extraFieldLength\n  };\n}\nfunction appendExtraFieldUSDZ(entryInfo, zipWriterOffset) {\n  const {\n    headerInfo\n  } = entryInfo;\n  let {\n    localHeaderArray,\n    extraFieldLength\n  } = headerInfo;\n  let localHeaderArrayView = getDataView(localHeaderArray);\n  let extraBytesLength = 64 - (zipWriterOffset + getLength(localHeaderArray)) % 64;\n  if (extraBytesLength < 4) {\n    extraBytesLength += 64;\n  }\n  const rawExtraFieldUSDZ = new Uint8Array(extraBytesLength);\n  const extraFieldUSDZView = getDataView(rawExtraFieldUSDZ);\n  setUint16(extraFieldUSDZView, 0, EXTRAFIELD_TYPE_USDZ);\n  setUint16(extraFieldUSDZView, 2, extraBytesLength - 2);\n  const previousLocalHeaderArray = localHeaderArray;\n  headerInfo.localHeaderArray = localHeaderArray = new Uint8Array(getLength(previousLocalHeaderArray) + extraBytesLength);\n  arraySet(localHeaderArray, previousLocalHeaderArray);\n  arraySet(localHeaderArray, rawExtraFieldUSDZ, getLength(previousLocalHeaderArray));\n  localHeaderArrayView = getDataView(localHeaderArray);\n  setUint16(localHeaderArrayView, 28, extraFieldLength + extraBytesLength);\n  entryInfo.metadataSize += extraBytesLength;\n}\nfunction getDataDescriptorInfo(options) {\n  const {\n    zip64,\n    dataDescriptor,\n    dataDescriptorSignature\n  } = options;\n  let dataDescriptorArray = new Uint8Array();\n  let dataDescriptorView,\n    dataDescriptorOffset = 0;\n  if (dataDescriptor) {\n    dataDescriptorArray = new Uint8Array(zip64 ? dataDescriptorSignature ? 24 : 20 : dataDescriptorSignature ? 16 : 12);\n    dataDescriptorView = getDataView(dataDescriptorArray);\n    if (dataDescriptorSignature) {\n      dataDescriptorOffset = 4;\n      setUint32(dataDescriptorView, 0, DATA_DESCRIPTOR_RECORD_SIGNATURE);\n    }\n  }\n  return {\n    dataDescriptorArray,\n    dataDescriptorView,\n    dataDescriptorOffset\n  };\n}\nfunction setEntryInfo(entryInfo, options) {\n  const {\n    signature,\n    rawExtraFieldZip64,\n    compressedSize,\n    uncompressedSize,\n    headerInfo,\n    dataDescriptorInfo\n  } = entryInfo;\n  const {\n    headerView,\n    encrypted\n  } = headerInfo;\n  const {\n    dataDescriptorView,\n    dataDescriptorOffset\n  } = dataDescriptorInfo;\n  const {\n    zip64,\n    zip64UncompressedSize,\n    zip64CompressedSize,\n    zipCrypto,\n    dataDescriptor\n  } = options;\n  if ((!encrypted || zipCrypto) && signature !== UNDEFINED_VALUE) {\n    setUint32(headerView, 10, signature);\n    if (dataDescriptor) {\n      setUint32(dataDescriptorView, dataDescriptorOffset, signature);\n    }\n  }\n  if (zip64) {\n    const rawExtraFieldZip64View = getDataView(rawExtraFieldZip64);\n    setUint16(rawExtraFieldZip64View, 0, EXTRAFIELD_TYPE_ZIP64);\n    setUint16(rawExtraFieldZip64View, 2, getLength(rawExtraFieldZip64) - 4);\n    let rawExtraFieldZip64Offset = 4;\n    if (zip64UncompressedSize) {\n      setUint32(headerView, 18, MAX_32_BITS);\n      setBigUint64(rawExtraFieldZip64View, rawExtraFieldZip64Offset, BigInt(uncompressedSize));\n      rawExtraFieldZip64Offset += 8;\n    }\n    if (zip64CompressedSize) {\n      setUint32(headerView, 14, MAX_32_BITS);\n      setBigUint64(rawExtraFieldZip64View, rawExtraFieldZip64Offset, BigInt(compressedSize));\n    }\n    if (dataDescriptor) {\n      setBigUint64(dataDescriptorView, dataDescriptorOffset + 4, BigInt(compressedSize));\n      setBigUint64(dataDescriptorView, dataDescriptorOffset + 12, BigInt(uncompressedSize));\n    }\n  } else {\n    setUint32(headerView, 14, compressedSize);\n    setUint32(headerView, 18, uncompressedSize);\n    if (dataDescriptor) {\n      setUint32(dataDescriptorView, dataDescriptorOffset + 4, compressedSize);\n      setUint32(dataDescriptorView, dataDescriptorOffset + 8, uncompressedSize);\n    }\n  }\n}\nasync function writeExtraHeaderInfo(fileEntry, entryData, writable, {\n  zipCrypto\n}) {\n  let arrayBuffer;\n  arrayBuffer = await entryData.slice(0, 26).arrayBuffer();\n  if (arrayBuffer.byteLength != 26) {\n    arrayBuffer = arrayBuffer.slice(0, 26);\n  }\n  const arrayBufferView = new DataView(arrayBuffer);\n  if (!fileEntry.encrypted || zipCrypto) {\n    setUint32(arrayBufferView, 14, fileEntry.signature);\n  }\n  if (fileEntry.zip64) {\n    setUint32(arrayBufferView, 18, MAX_32_BITS);\n    setUint32(arrayBufferView, 22, MAX_32_BITS);\n  } else {\n    setUint32(arrayBufferView, 18, fileEntry.compressedSize);\n    setUint32(arrayBufferView, 22, fileEntry.uncompressedSize);\n  }\n  await writeData(writable, new Uint8Array(arrayBuffer));\n  return entryData.slice(arrayBuffer.byteLength);\n}\nfunction setZip64ExtraInfo(fileEntry, options) {\n  const {\n    rawExtraFieldZip64,\n    offset,\n    diskNumberStart\n  } = fileEntry;\n  const {\n    zip64UncompressedSize,\n    zip64CompressedSize,\n    zip64Offset,\n    zip64DiskNumberStart\n  } = options;\n  const rawExtraFieldZip64View = getDataView(rawExtraFieldZip64);\n  let rawExtraFieldZip64Offset = 4;\n  if (zip64UncompressedSize) {\n    rawExtraFieldZip64Offset += 8;\n  }\n  if (zip64CompressedSize) {\n    rawExtraFieldZip64Offset += 8;\n  }\n  if (zip64Offset) {\n    setBigUint64(rawExtraFieldZip64View, rawExtraFieldZip64Offset, BigInt(offset));\n    rawExtraFieldZip64Offset += 8;\n  }\n  if (zip64DiskNumberStart) {\n    setUint32(rawExtraFieldZip64View, rawExtraFieldZip64Offset, diskNumberStart);\n  }\n}\nasync function closeFile(zipWriter, comment, options) {\n  const {\n    files,\n    writer\n  } = zipWriter;\n  const {\n    diskOffset,\n    writable\n  } = writer;\n  let {\n    diskNumber\n  } = writer;\n  let offset = 0;\n  let directoryDataLength = 0;\n  let directoryOffset = zipWriter.offset - diskOffset;\n  let filesLength = files.size;\n  for (const [, fileEntry] of files) {\n    const {\n      rawFilename,\n      rawExtraFieldZip64,\n      rawExtraFieldAES,\n      rawComment,\n      rawExtraFieldNTFS,\n      rawExtraField,\n      extendedTimestamp,\n      extraFieldExtendedTimestampFlag,\n      lastModDate\n    } = fileEntry;\n    let rawExtraFieldTimestamp;\n    if (extendedTimestamp) {\n      rawExtraFieldTimestamp = new Uint8Array(9);\n      const extraFieldExtendedTimestampView = getDataView(rawExtraFieldTimestamp);\n      setUint16(extraFieldExtendedTimestampView, 0, EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP);\n      setUint16(extraFieldExtendedTimestampView, 2, 5);\n      setUint8(extraFieldExtendedTimestampView, 4, extraFieldExtendedTimestampFlag);\n      setUint32(extraFieldExtendedTimestampView, 5, Math.floor(lastModDate.getTime() / 1000));\n    } else {\n      rawExtraFieldTimestamp = new Uint8Array();\n    }\n    fileEntry.rawExtraFieldCDExtendedTimestamp = rawExtraFieldTimestamp;\n    directoryDataLength += 46 + getLength(rawFilename, rawComment, rawExtraFieldZip64, rawExtraFieldAES, rawExtraFieldNTFS, rawExtraFieldTimestamp, rawExtraField);\n  }\n  const directoryArray = new Uint8Array(directoryDataLength);\n  const directoryView = getDataView(directoryArray);\n  await initStream(writer);\n  let directoryDiskOffset = 0;\n  for (const [indexFileEntry, fileEntry] of Array.from(files.values()).entries()) {\n    const {\n      offset: fileEntryOffset,\n      rawFilename,\n      rawExtraFieldZip64,\n      rawExtraFieldAES,\n      rawExtraFieldCDExtendedTimestamp,\n      rawExtraFieldNTFS,\n      rawExtraField,\n      rawComment,\n      versionMadeBy,\n      headerArray,\n      directory,\n      zip64,\n      zip64UncompressedSize,\n      zip64CompressedSize,\n      zip64DiskNumberStart,\n      zip64Offset,\n      msDosCompatible,\n      internalFileAttribute,\n      externalFileAttribute,\n      diskNumberStart,\n      uncompressedSize,\n      compressedSize\n    } = fileEntry;\n    const extraFieldLength = getLength(rawExtraFieldZip64, rawExtraFieldAES, rawExtraFieldCDExtendedTimestamp, rawExtraFieldNTFS, rawExtraField);\n    setUint32(directoryView, offset, CENTRAL_FILE_HEADER_SIGNATURE);\n    setUint16(directoryView, offset + 4, versionMadeBy);\n    const headerView = getDataView(headerArray);\n    if (!zip64UncompressedSize) {\n      setUint32(headerView, 18, uncompressedSize);\n    }\n    if (!zip64CompressedSize) {\n      setUint32(headerView, 14, compressedSize);\n    }\n    arraySet(directoryArray, headerArray, offset + 6);\n    setUint16(directoryView, offset + 30, extraFieldLength);\n    setUint16(directoryView, offset + 32, getLength(rawComment));\n    setUint16(directoryView, offset + 34, zip64 && zip64DiskNumberStart ? MAX_16_BITS : diskNumberStart);\n    setUint16(directoryView, offset + 36, internalFileAttribute);\n    if (externalFileAttribute) {\n      setUint32(directoryView, offset + 38, externalFileAttribute);\n    } else if (directory && msDosCompatible) {\n      setUint8(directoryView, offset + 38, FILE_ATTR_MSDOS_DIR_MASK);\n    }\n    setUint32(directoryView, offset + 42, zip64 && zip64Offset ? MAX_32_BITS : fileEntryOffset);\n    arraySet(directoryArray, rawFilename, offset + 46);\n    arraySet(directoryArray, rawExtraFieldZip64, offset + 46 + getLength(rawFilename));\n    arraySet(directoryArray, rawExtraFieldAES, offset + 46 + getLength(rawFilename, rawExtraFieldZip64));\n    arraySet(directoryArray, rawExtraFieldCDExtendedTimestamp, offset + 46 + getLength(rawFilename, rawExtraFieldZip64, rawExtraFieldAES));\n    arraySet(directoryArray, rawExtraFieldNTFS, offset + 46 + getLength(rawFilename, rawExtraFieldZip64, rawExtraFieldAES, rawExtraFieldCDExtendedTimestamp));\n    arraySet(directoryArray, rawExtraField, offset + 46 + getLength(rawFilename, rawExtraFieldZip64, rawExtraFieldAES, rawExtraFieldCDExtendedTimestamp, rawExtraFieldNTFS));\n    arraySet(directoryArray, rawComment, offset + 46 + getLength(rawFilename) + extraFieldLength);\n    const directoryEntryLength = 46 + getLength(rawFilename, rawComment) + extraFieldLength;\n    if (offset - directoryDiskOffset > writer.availableSize) {\n      writer.availableSize = 0;\n      await writeData(writable, directoryArray.slice(directoryDiskOffset, offset));\n      directoryDiskOffset = offset;\n    }\n    offset += directoryEntryLength;\n    if (options.onprogress) {\n      try {\n        await options.onprogress(indexFileEntry + 1, files.size, new Entry(fileEntry));\n      } catch (_error) {\n        // ignored\n      }\n    }\n  }\n  await writeData(writable, directoryDiskOffset ? directoryArray.slice(directoryDiskOffset) : directoryArray);\n  let lastDiskNumber = writer.diskNumber;\n  const {\n    availableSize\n  } = writer;\n  if (availableSize < END_OF_CENTRAL_DIR_LENGTH) {\n    lastDiskNumber++;\n  }\n  let zip64 = getOptionValue(zipWriter, options, PROPERTY_NAME_ZIP64);\n  if (directoryOffset > MAX_32_BITS || directoryDataLength > MAX_32_BITS || filesLength > MAX_16_BITS || lastDiskNumber > MAX_16_BITS) {\n    if (zip64 === false) {\n      throw new Error(ERR_UNSUPPORTED_FORMAT);\n    } else {\n      zip64 = true;\n    }\n  }\n  const endOfdirectoryArray = new Uint8Array(zip64 ? ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH : END_OF_CENTRAL_DIR_LENGTH);\n  const endOfdirectoryView = getDataView(endOfdirectoryArray);\n  offset = 0;\n  if (zip64) {\n    setUint32(endOfdirectoryView, 0, ZIP64_END_OF_CENTRAL_DIR_SIGNATURE);\n    setBigUint64(endOfdirectoryView, 4, BigInt(44));\n    setUint16(endOfdirectoryView, 12, 45);\n    setUint16(endOfdirectoryView, 14, 45);\n    setUint32(endOfdirectoryView, 16, lastDiskNumber);\n    setUint32(endOfdirectoryView, 20, diskNumber);\n    setBigUint64(endOfdirectoryView, 24, BigInt(filesLength));\n    setBigUint64(endOfdirectoryView, 32, BigInt(filesLength));\n    setBigUint64(endOfdirectoryView, 40, BigInt(directoryDataLength));\n    setBigUint64(endOfdirectoryView, 48, BigInt(directoryOffset));\n    setUint32(endOfdirectoryView, 56, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE);\n    setBigUint64(endOfdirectoryView, 64, BigInt(directoryOffset) + BigInt(directoryDataLength));\n    setUint32(endOfdirectoryView, 72, lastDiskNumber + 1);\n    const supportZip64SplitFile = getOptionValue(zipWriter, options, \"supportZip64SplitFile\", true);\n    if (supportZip64SplitFile) {\n      lastDiskNumber = MAX_16_BITS;\n      diskNumber = MAX_16_BITS;\n    }\n    filesLength = MAX_16_BITS;\n    directoryOffset = MAX_32_BITS;\n    directoryDataLength = MAX_32_BITS;\n    offset += ZIP64_END_OF_CENTRAL_DIR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH;\n  }\n  setUint32(endOfdirectoryView, offset, END_OF_CENTRAL_DIR_SIGNATURE);\n  setUint16(endOfdirectoryView, offset + 4, lastDiskNumber);\n  setUint16(endOfdirectoryView, offset + 6, diskNumber);\n  setUint16(endOfdirectoryView, offset + 8, filesLength);\n  setUint16(endOfdirectoryView, offset + 10, filesLength);\n  setUint32(endOfdirectoryView, offset + 12, directoryDataLength);\n  setUint32(endOfdirectoryView, offset + 16, directoryOffset);\n  const commentLength = getLength(comment);\n  if (commentLength) {\n    if (commentLength <= MAX_16_BITS) {\n      setUint16(endOfdirectoryView, offset + 20, commentLength);\n    } else {\n      throw new Error(ERR_INVALID_COMMENT);\n    }\n  }\n  await writeData(writable, endOfdirectoryArray);\n  if (commentLength) {\n    await writeData(writable, comment);\n  }\n}\nasync function writeData(writable, array) {\n  const streamWriter = writable.getWriter();\n  try {\n    await streamWriter.ready;\n    writable.size += getLength(array);\n    await streamWriter.write(array);\n  } finally {\n    streamWriter.releaseLock();\n  }\n}\nfunction getTimeNTFS(date) {\n  if (date) {\n    return (BigInt(date.getTime()) + BigInt(11644473600000)) * BigInt(10000);\n  }\n}\nfunction getOptionValue(zipWriter, options, name, defaultValue) {\n  const result = options[name] === UNDEFINED_VALUE ? zipWriter.options[name] : options[name];\n  return result === UNDEFINED_VALUE ? defaultValue : result;\n}\nfunction getMaximumCompressedSize(uncompressedSize) {\n  return uncompressedSize + 5 * (Math.floor(uncompressedSize / 16383) + 1);\n}\nfunction setUint8(view, offset, value) {\n  view.setUint8(offset, value);\n}\nfunction setUint16(view, offset, value) {\n  view.setUint16(offset, value, true);\n}\nfunction setUint32(view, offset, value) {\n  view.setUint32(offset, value, true);\n}\nfunction setBigUint64(view, offset, value) {\n  view.setBigUint64(offset, value, true);\n}\nfunction arraySet(array, typedArray, offset) {\n  array.set(typedArray, offset);\n}\nfunction getDataView(array) {\n  return new DataView(array.buffer);\n}\nfunction getLength(...arrayLikes) {\n  let result = 0;\n  arrayLikes.forEach(arrayLike => arrayLike && (result += arrayLike.length));\n  return result;\n}", "/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { configure } from \"./core/configuration.js\";\nimport { configureWebWorker } from \"./z-worker-inline.js\";\nimport { getMimeType } from \"./core/util/default-mime-type.js\";\nimport { initShimAsyncCodec } from \"./core/util/stream-codec-shim.js\";\nimport { terminateWorkers } from \"./core/codec-pool.js\";\nlet baseURL;\ntry {\n  baseURL = import.meta.url;\n} catch (_error) {\n  // ignored\n}\nconfigure({\n  baseURL\n});\nconfigureWebWorker(configure);\nexport * from \"./core/io.js\";\nexport * from \"./core/zip-reader.js\";\nexport * from \"./core/zip-writer.js\";\nexport * from \"./core/zip-fs-core.js\";\nexport { configure, getMimeType, initShimAsyncCodec, terminateWorkers };", "/// <reference types=\"./index.d.ts\" />\n\n/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { Deflate } from \"./lib/core/streams/codecs/deflate.js\";\nimport { Inflate } from \"./lib/core/streams/codecs/inflate.js\";\nimport { configure } from \"./lib/core/configuration.js\";\nimport { getMimeType } from \"./lib/core/util/mime-type.js\";\nimport { terminateWorkers } from \"./lib/core/codec-pool.js\";\nconfigure({\n  Deflate,\n  Inflate\n});\nexport { fs, configure, initShimAsyncCodec, ZipReader, ZipWriter, ZipReaderStream, ZipWriterStream, Reader, Writer, TextReader, TextWriter, Data64URIReader, Data64URIWriter, BlobReader, BlobWriter, HttpReader, HttpRangeReader, Uint8ArrayWriter, Uint8ArrayReader, SplitZipReader, SplitZipWriter, SplitDataReader, SplitDataWriter, ERR_HTTP_RANGE, ERR_BAD_FORMAT, ERR_EOCDR_NOT_FOUND, ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND, ERR_CENTRAL_DIRECTORY_NOT_FOUND, ERR_LOCAL_FILE_HEADER_NOT_FOUND, ERR_EXTRAFIELD_ZIP64_NOT_FOUND, ERR_ENCRYPTED, ERR_UNSUPPORTED_ENCRYPTION, ERR_UNSUPPORTED_COMPRESSION, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_DUPLICATED_NAME, ERR_INVALID_COMMENT, ERR_INVALID_ENTRY_NAME, ERR_INVALID_ENTRY_COMMENT, ERR_INVALID_VERSION, ERR_INVALID_EXTRAFIELD_TYPE, ERR_INVALID_EXTRAFIELD_DATA, ERR_INVALID_ENCRYPTION_STRENGTH, ERR_UNSUPPORTED_FORMAT, ERR_UNDEFINED_UNCOMPRESSED_SIZE, ERR_SPLIT_ZIP_FILE, ERR_ITERATOR_COMPLETED_TOO_SOON } from \"./lib/zip-fs.js\";\nexport { getMimeType, terminateWorkers };"],
  "mappings": "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AAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,KAAK,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,KAAK,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,KAAK,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,KAAK,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,G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",
  "names": ["strm", "MAX_BITS", "Z_OK", "Z_STREAM_END", "Z_NEED_DICT", "Z_STREAM_ERROR", "Z_DATA_ERROR", "Z_BUF_ERROR", "Z_NO_FLUSH", "Z_FINISH", "e", "hn", "v", "c", "mode", "STORED", "table", "z", "PRESET_DICT", "Z_DEFLATED", "ZStream", "codec", "config", "baseURL", "maxWorkers", "Deflate", "Inflate", "CompressionStream", "DecompressionStream", "mimeTypes", "table", "hash", "e", "table", "password", "signed", "decrypt", "encrypt", "codecBytes", "createKeys", "createKeys", "CompressionStream", "DecompressionStream", "CodecStream", "CompressionStream", "error", "config", "codec", "Stream", "config", "baseURL", "value", "error", "result", "runWorker", "config", "maxWorkers", "workerData", "stream", "workerOptions", "e", "config", "endOfDirectoryView", "commentOffset", "commentLength", "options", "config", "runWorker"]
}
