{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/map-components/dist/esm/useT9n-e78c8d12.js"],
  "sourcesContent": ["/*!\n * All material copyright Esri, All Rights Reserved, unless otherwise specified.\n * See https://js.arcgis.com/4.30/esri/copyright.txt for details.\n * v4.30.7\n */\nimport { p as proxyExports, A as AccessorController, a as accessorSupport } from './index-c99fc80c.js';\nimport './index-d2df902e.js';\nimport { a as attachToParent } from './component-utils-de9339fe.js';\nimport { m as makeT9nController } from './chunk-PVEVZB4O-2c3b8893.js';\nimport { a as getAssetPath } from './index-7d33cc26.js';\n\n/**\n * A controller for a mapping component that:\n * - loads the viewModel\n * - initializes the viewModel with the component's properties\n * - does two-way binding between view model and component properties\n * - re-emits the viewModel's events on the component\n * - type-checks everything âœ¨\n *\n * Documentation:\n * https://devtopia.esri.com/WebGIS/arcgis-web-components/blob/main/packages/map-components/src/controllers/useViewModel.md\n */\nconst makeViewModelController = (loadViewModel, _options) => (component, options) => proxy(component, loadViewModel, options);\n// REFACTOR: extract common logic into IntegrationController???\nclass ViewModelController extends AccessorController {\n  hostConnected() {\n    if (this.component.manager.didLoadCalled) {\n      attachToParent(this.component);\n    }\n  }\n  async hostLoad() {\n    await super.hostLoad();\n    if (this.component.manager.destroyed) {\n      return;\n    }\n    this._watchMetaProperties();\n    accessorSupport.reEmitAccessorEvents(this, this._instance, this.reactiveUtils, \"viewModel\");\n  }\n  hostLoaded() {\n    const {\n      el\n    } = this.component;\n    const childNode = el.shadowRoot?.firstElementChild ?? el.firstElementChild ?? undefined;\n    /*\n     * On hot reloading, new this.component instance is created (so properties\n     * on it are reset) but this.component.el instance is preserved (so\n     * properties on it are preserved). Since childElem is re-parented on 1st\n     * hostLoad(), for it to be accessible on the 2nd hostLoad() (hot reload),\n     * we have to store it's reference on the el, rather than component\n     */\n    el.childElem = childNode ?? el.childElem;\n    if (el.childElem === undefined && \"production\" !== \"production\") {\n      throw new Error(\"Unable to find component's root child\");\n    }\n    let arcgisReadyEmitted = false;\n    // Check if view was already provided by the user\n    const currentView = this.component.el.view;\n    // Define the \"view\" property to allow component usage with MapView/SceneView\n    Object.defineProperty(this.component.el, \"view\", {\n      get: () => this._instance.view,\n      set: view => {\n        this._instance.view = view;\n        this._watchViewDestroy();\n        this.component.requestUpdate();\n        if (!arcgisReadyEmitted) {\n          arcgisReadyEmitted = true;\n          this.component.arcgisReady.emit();\n        }\n      },\n      configurable: true,\n      enumerable: true\n    });\n    if (currentView) {\n      this._instance.view = currentView;\n    }\n    if (this.component.el.isConnected) {\n      attachToParent(this.component);\n      this._watchViewDestroy();\n    }\n  }\n  hostDisconnected() {\n    // If view is already destroyed, view.ui might be undefined\n    if (typeof this.component.el.childElem === \"object\") {\n      this.component.el.view?.ui?.remove(this.component.el.childElem);\n    }\n  }\n  hostDestroy() {\n    super.hostDestroy();\n    this._watchViewDestroyHandle?.remove();\n  }\n  _watchMetaProperties() {\n    this.watch(\"position\", position => {\n      if (this.component.el.childElem != null && typeof position === \"string\") {\n        attachToParent(this.component);\n      }\n    });\n    this.watch(\"referenceElement\", () => attachToParent(this.component));\n  }\n  /**\n   * Destroy the component if view gets destroyed. Note, that when view is\n   * destroyed, component disconnect is triggered, which will destroy the\n   * component in 1s but that can be too late, because in the meanwhile,\n   * a watcher on the widget/viewModel instance may get triggered, and throw\n   * an error if it's not able to access this.view.map or etc\n   * (happens in VersionManagementViewModel for example).\n   * We can't check for this in disconnectedCallback though as, if the entire\n   * component tree is removed, the disconnect for the component will be\n   * triggered before that of arcgis-map, so the view might not be destroyed\n   * yet at that point.\n   */\n  _watchViewDestroy() {\n    this._watchViewDestroyHandle?.remove();\n    this._watchViewDestroyHandle = this.reactiveUtils.when(() => this.component.el.view?.destroyed === true, () => void this.component.destroy().catch(console.error), {\n      sync: true\n    });\n  }\n}\nconst proxy = proxyExports(ViewModelController);\nconst useT9n = makeT9nController(getAssetPath);\nexport { makeViewModelController as m, useT9n as u };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAsBA,IAAM,0BAA0B,CAAC,eAAe,aAAa,CAAC,WAAW,YAAY,MAAM,WAAW,eAAe,OAAO;AAE5H,IAAM,sBAAN,MAAM,6BAA4B,mBAAmB;AAAA,EACnD,gBAAgB;AACd,QAAI,KAAK,UAAU,QAAQ,eAAe;AACxC,qBAAe,KAAK,SAAS;AAAA,IAC/B;AAAA,EACF;AAAA,EACM,WAAW;AAAA;AACf,YAAM,iDAAM,iBAAN,IAAe;AACrB,UAAI,KAAK,UAAU,QAAQ,WAAW;AACpC;AAAA,MACF;AACA,WAAK,qBAAqB;AAC1B,sBAAgB,qBAAqB,MAAM,KAAK,WAAW,KAAK,eAAe,WAAW;AAAA,IAC5F;AAAA;AAAA,EACA,aAAa;AACX,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,UAAM,YAAY,GAAG,YAAY,qBAAqB,GAAG,qBAAqB;AAQ9E,OAAG,YAAY,aAAa,GAAG;AAC/B,QAAI,GAAG,cAAc,UAAa,OAA+B;AAC/D,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACzD;AACA,QAAI,qBAAqB;AAEzB,UAAM,cAAc,KAAK,UAAU,GAAG;AAEtC,WAAO,eAAe,KAAK,UAAU,IAAI,QAAQ;AAAA,MAC/C,KAAK,MAAM,KAAK,UAAU;AAAA,MAC1B,KAAK,UAAQ;AACX,aAAK,UAAU,OAAO;AACtB,aAAK,kBAAkB;AACvB,aAAK,UAAU,cAAc;AAC7B,YAAI,CAAC,oBAAoB;AACvB,+BAAqB;AACrB,eAAK,UAAU,YAAY,KAAK;AAAA,QAClC;AAAA,MACF;AAAA,MACA,cAAc;AAAA,MACd,YAAY;AAAA,IACd,CAAC;AACD,QAAI,aAAa;AACf,WAAK,UAAU,OAAO;AAAA,IACxB;AACA,QAAI,KAAK,UAAU,GAAG,aAAa;AACjC,qBAAe,KAAK,SAAS;AAC7B,WAAK,kBAAkB;AAAA,IACzB;AAAA,EACF;AAAA,EACA,mBAAmB;AAEjB,QAAI,OAAO,KAAK,UAAU,GAAG,cAAc,UAAU;AACnD,WAAK,UAAU,GAAG,MAAM,IAAI,OAAO,KAAK,UAAU,GAAG,SAAS;AAAA,IAChE;AAAA,EACF;AAAA,EACA,cAAc;AACZ,UAAM,YAAY;AAClB,SAAK,yBAAyB,OAAO;AAAA,EACvC;AAAA,EACA,uBAAuB;AACrB,SAAK,MAAM,YAAY,cAAY;AACjC,UAAI,KAAK,UAAU,GAAG,aAAa,QAAQ,OAAO,aAAa,UAAU;AACvE,uBAAe,KAAK,SAAS;AAAA,MAC/B;AAAA,IACF,CAAC;AACD,SAAK,MAAM,oBAAoB,MAAM,eAAe,KAAK,SAAS,CAAC;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,oBAAoB;AAClB,SAAK,yBAAyB,OAAO;AACrC,SAAK,0BAA0B,KAAK,cAAc,KAAK,MAAM,KAAK,UAAU,GAAG,MAAM,cAAc,MAAM,MAAM,KAAK,KAAK,UAAU,QAAQ,EAAE,MAAM,QAAQ,KAAK,GAAG;AAAA,MACjK,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AACF;AACA,IAAM,QAAQ,aAAa,mBAAmB;AAC9C,IAAM,SAAS,kBAAkB,YAAY;",
  "names": []
}
