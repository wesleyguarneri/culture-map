{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/AtmosphereCompositing.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { ScreenSpacePass as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";\nimport { NoParameters as r, glsl as o } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as t } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as s } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nclass a extends r {}\nfunction n(r) {\n  const a = new t();\n  a.include(e), a.fragment.uniforms.add(new s(\"colorTexture\", e => e.color), new s(\"depthTexture\", e => e.depth));\n  const n = r.haze;\n  return a.fragment.code.add(o`\n    void main() {\n      float depthSample = texture(depthTexture, uv).r;\n      if (depthSample ${n ? o`== 1.0` : o`!= 1.0`} ) {\n          fragColor = vec4(0);\n          return;\n      }\n      fragColor = texture(colorTexture, uv);\n    }\n    `), a;\n}\nconst d = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  AtmosphereCompositingPassParameters: a,\n  build: n\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { a as A, d as a, n as b };"],
  "mappings": ";;;;;;;;;;;;;;;;AAQA,IAAM,IAAN,cAAgB,EAAE;AAAC;AACnB,SAASA,GAAE,GAAG;AACZ,QAAMC,KAAI,IAAIC,GAAE;AAChB,EAAAD,GAAE,QAAQC,EAAC,GAAGD,GAAE,SAAS,SAAS,IAAI,IAAI,EAAE,gBAAgB,OAAK,EAAE,KAAK,GAAG,IAAI,EAAE,gBAAgB,OAAK,EAAE,KAAK,CAAC;AAC9G,QAAMD,KAAI,EAAE;AACZ,SAAOC,GAAE,SAAS,KAAK,IAAI;AAAA;AAAA;AAAA,wBAGLD,KAAI,YAAY,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAM5C,GAAGC;AACR;AACA,IAAM,IAAI,OAAO,OAAO,OAAO,eAAe;AAAA,EAC5C,WAAW;AAAA,EACX,qCAAqC;AAAA,EACrC,OAAOD;AACT,GAAG,OAAO,aAAa;AAAA,EACrB,OAAO;AACT,CAAC,CAAC;",
  "names": ["n", "a", "o"]
}
