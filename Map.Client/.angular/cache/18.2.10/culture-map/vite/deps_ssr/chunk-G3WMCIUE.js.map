{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/core/fontUtils.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from \"../config.js\";\nconst t = \"arial-unicode-ms\",\n  n = \"woff2\",\n  r = new Map(),\n  o = new Set();\nclass s {\n  constructor(e, t) {\n    this.fontFace = e, this.promise = t;\n  }\n}\nasync function c(t) {\n  const c = l(t),\n    a = f(t),\n    i = r.get(c);\n  if (i) return i.promise;\n  const u = new FontFace(t.family, `url('${e.fontsUrl}/woff2/${a}.${n}') format('${n}')`, {\n      style: t.style,\n      weight: t.weight\n    }),\n    d = document.fonts;\n  if (d.has(u) && \"loading\" === u.status) return u.loaded;\n  const h = u.load().then(() => (d.add(u), u));\n  return r.set(c, new s(u, h)), o.add(u), h;\n}\nfunction a() {\n  const e = document.fonts;\n  r.forEach(t => {\n    e.delete(t.fontFace);\n  }), r.clear(), o.clear();\n}\nfunction i(e) {\n  return o.has(e);\n}\nfunction u(e) {\n  if (!e) return t;\n  const n = e.toLowerCase().split(\" \").join(\"-\");\n  switch (n) {\n    case \"serif\":\n      return \"noto-serif\";\n    case \"sans-serif\":\n      return \"arial-unicode-ms\";\n    case \"monospace\":\n      return \"ubuntu-mono\";\n    case \"fantasy\":\n      return \"cabin-sketch\";\n    case \"cursive\":\n      return \"redressed\";\n    default:\n      return n;\n  }\n}\nfunction f(e) {\n  const t = d(e) + h(e);\n  return u(e.family) + (t.length > 0 ? t : \"-regular\");\n}\nfunction l(e) {\n  const n = d(e) + h(e);\n  return (e.family || t) + (n.length > 0 ? n : \"-regular\");\n}\nfunction d(e) {\n  if (!e.weight) return \"\";\n  switch (e.weight.toLowerCase()) {\n    case \"bold\":\n    case \"bolder\":\n      return \"-bold\";\n  }\n  return \"\";\n}\nfunction h(e) {\n  if (!e.style) return \"\";\n  switch (e.style.toLowerCase()) {\n    case \"italic\":\n    case \"oblique\":\n      return \"-italic\";\n  }\n  return \"\";\n}\nexport { a as clearFonts, t as defaultFontFamily, u as getFontFamily, f as getFullyQualifiedFontName, i as isCachedFontFace, c as loadFont };"],
  "mappings": ";;;;;;;;;AAKA,IAAM,IAAI;AAAV,IACE,IAAI;AADN,IAEE,IAAI,oBAAI,IAAI;AAFd,IAGE,IAAI,oBAAI,IAAI;AACd,IAAMA,KAAN,MAAQ;AAAA,EACN,YAAY,GAAGC,IAAG;AAChB,SAAK,WAAW,GAAG,KAAK,UAAUA;AAAA,EACpC;AACF;AACA,SAAe,EAAEA,IAAG;AAAA;AAClB,UAAMC,KAAI,EAAED,EAAC,GACX,IAAI,EAAEA,EAAC,GACPE,KAAI,EAAE,IAAID,EAAC;AACb,QAAIC,GAAG,QAAOA,GAAE;AAChB,UAAMC,KAAI,IAAI,SAASH,GAAE,QAAQ,QAAQ,EAAE,QAAQ,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM;AAAA,MACpF,OAAOA,GAAE;AAAA,MACT,QAAQA,GAAE;AAAA,IACZ,CAAC,GACDI,KAAI,SAAS;AACf,QAAIA,GAAE,IAAID,EAAC,KAAK,cAAcA,GAAE,OAAQ,QAAOA,GAAE;AACjD,UAAME,KAAIF,GAAE,KAAK,EAAE,KAAK,OAAOC,GAAE,IAAID,EAAC,GAAGA,GAAE;AAC3C,WAAO,EAAE,IAAIF,IAAG,IAAIF,GAAEI,IAAGE,EAAC,CAAC,GAAG,EAAE,IAAIF,EAAC,GAAGE;AAAA,EAC1C;AAAA;AAOA,SAAS,EAAE,GAAG;AACZ,SAAO,EAAE,IAAI,CAAC;AAChB;AACA,SAAS,EAAE,GAAG;AACZ,MAAI,CAAC,EAAG,QAAO;AACf,QAAMC,KAAI,EAAE,YAAY,EAAE,MAAM,GAAG,EAAE,KAAK,GAAG;AAC7C,UAAQA,IAAG;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAOA;AAAA,EACX;AACF;AACA,SAAS,EAAE,GAAG;AACZ,QAAMC,KAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,SAAO,EAAE,EAAE,MAAM,KAAKA,GAAE,SAAS,IAAIA,KAAI;AAC3C;AACA,SAAS,EAAE,GAAG;AACZ,QAAMD,KAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,UAAQ,EAAE,UAAU,MAAMA,GAAE,SAAS,IAAIA,KAAI;AAC/C;AACA,SAAS,EAAE,GAAG;AACZ,MAAI,CAAC,EAAE,OAAQ,QAAO;AACtB,UAAQ,EAAE,OAAO,YAAY,GAAG;AAAA,IAC9B,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,EACX;AACA,SAAO;AACT;AACA,SAAS,EAAE,GAAG;AACZ,MAAI,CAAC,EAAE,MAAO,QAAO;AACrB,UAAQ,EAAE,MAAM,YAAY,GAAG;AAAA,IAC7B,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,EACX;AACA,SAAO;AACT;",
  "names": ["s", "t", "c", "i", "u", "d", "h", "n", "t"]
}
