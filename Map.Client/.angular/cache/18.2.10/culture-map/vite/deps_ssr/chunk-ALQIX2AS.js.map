{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js", "../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexPosition.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { glsl as e } from \"../../shaderModules/interfaces.js\";\nimport { VertexAttribute as t } from \"../../../lib/VertexAttribute.js\";\nfunction o(o) {\n  o.attributes.add(t.POSITION, \"vec3\"), o.vertex.code.add(e`vec3 positionModel() { return position; }`);\n}\nexport { o as PositionAttribute };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { create as r } from \"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js\";\nimport { create as o } from \"../../../../../../core/libs/gl-matrix-2/factories/mat4f64.js\";\nimport { create as e } from \"../../../../../../core/libs/gl-matrix-2/factories/vec3f64.js\";\nimport { PositionAttribute as t } from \"./PositionAttribute.glsl.js\";\nimport { DoublePrecision as i } from \"../util/DoublePrecision.glsl.js\";\nimport { Float3DrawUniform as a } from \"../../shaderModules/Float3DrawUniform.js\";\nimport { Float3PassUniform as m } from \"../../shaderModules/Float3PassUniform.js\";\nimport { glsl as s, NoParameters as d } from \"../../shaderModules/interfaces.js\";\nimport { Matrix3DrawUniform as l } from \"../../shaderModules/Matrix3DrawUniform.js\";\nimport { Matrix3PassUniform as n } from \"../../shaderModules/Matrix3PassUniform.js\";\nimport { Matrix4PassUniform as f } from \"../../shaderModules/Matrix4PassUniform.js\";\nfunction v(r, o) {\n  r.include(t);\n  const e = r.vertex;\n  e.include(i, o), r.varyings.add(\"vPositionWorldCameraRelative\", \"vec3\"), r.varyings.add(\"vPosition_view\", \"vec3\"), e.uniforms.add(new m(\"transformWorldFromViewTH\", r => r.transformWorldFromViewTH), new m(\"transformWorldFromViewTL\", r => r.transformWorldFromViewTL), new n(\"transformViewFromCameraRelativeRS\", r => r.transformViewFromCameraRelativeRS), new f(\"transformProjFromView\", r => r.transformProjFromView), new l(\"transformWorldFromModelRS\", r => r.transformWorldFromModelRS), new a(\"transformWorldFromModelTH\", r => r.transformWorldFromModelTH), new a(\"transformWorldFromModelTL\", r => r.transformWorldFromModelTL)), e.code.add(s`vec3 positionWorldCameraRelative() {\nvec3 rotatedModelPosition = transformWorldFromModelRS * positionModel();\nvec3 transform_CameraRelativeFromModel = dpAdd(\ntransformWorldFromModelTL,\ntransformWorldFromModelTH,\n-transformWorldFromViewTL,\n-transformWorldFromViewTH\n);\nreturn transform_CameraRelativeFromModel + rotatedModelPosition;\n}`), e.code.add(s`\n    void forwardPosition(float fOffset) {\n      vPositionWorldCameraRelative = positionWorldCameraRelative();\n      if (fOffset != 0.0) {\n        vPositionWorldCameraRelative += fOffset * ${o.spherical ? s`normalize(transformWorldFromViewTL + vPositionWorldCameraRelative)` : s`vec3(0.0, 0.0, 1.0)`};\n      }\n\n      vPosition_view = transformViewFromCameraRelativeRS * vPositionWorldCameraRelative;\n      gl_Position = transformProjFromView * vec4(vPosition_view, 1.0);\n    }\n  `), r.fragment.uniforms.add(new m(\"transformWorldFromViewTL\", r => r.transformWorldFromViewTL)), e.code.add(s`vec3 positionWorld() {\nreturn transformWorldFromViewTL + vPositionWorldCameraRelative;\n}`), r.fragment.code.add(s`vec3 positionWorld() {\nreturn transformWorldFromViewTL + vPositionWorldCameraRelative;\n}`);\n}\nclass F extends d {\n  constructor() {\n    super(...arguments), this.transformWorldFromViewTH = e(), this.transformWorldFromViewTL = e(), this.transformViewFromCameraRelativeRS = r(), this.transformProjFromView = o();\n  }\n}\nclass W extends d {\n  constructor() {\n    super(...arguments), this.transformWorldFromModelRS = r(), this.transformWorldFromModelTH = e(), this.transformWorldFromModelTL = e();\n  }\n}\nexport { v as VertexPosition, W as VertexPositionDrawParameters, F as VertexPositionPassParameters };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,SAASA,GAAEA,IAAG;AACZ,EAAAA,GAAE,WAAW,IAAIC,GAAE,UAAU,MAAM,GAAGD,GAAE,OAAO,KAAK,IAAI,4CAA4C;AACtG;;;ACOA,SAAS,EAAE,GAAGE,IAAG;AACf,IAAE,QAAQA,EAAC;AACX,QAAMC,KAAI,EAAE;AACZ,EAAAA,GAAE,QAAQ,GAAGD,EAAC,GAAG,EAAE,SAAS,IAAI,gCAAgC,MAAM,GAAG,EAAE,SAAS,IAAI,kBAAkB,MAAM,GAAGC,GAAE,SAAS,IAAI,IAAIA,GAAE,4BAA4B,CAAAC,OAAKA,GAAE,wBAAwB,GAAG,IAAID,GAAE,4BAA4B,CAAAC,OAAKA,GAAE,wBAAwB,GAAG,IAAID,GAAE,qCAAqC,CAAAC,OAAKA,GAAE,iCAAiC,GAAG,IAAID,GAAE,yBAAyB,CAAAC,OAAKA,GAAE,qBAAqB,GAAG,IAAIF,GAAE,6BAA6B,CAAAE,OAAKA,GAAE,yBAAyB,GAAG,IAAIF,GAAE,6BAA6B,CAAAE,OAAKA,GAAE,yBAAyB,GAAG,IAAIF,GAAE,6BAA6B,CAAAE,OAAKA,GAAE,yBAAyB,CAAC,GAAGD,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS5nB,GAAGA,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA,oDAIoCD,GAAE,YAAY,wEAAwE,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAM7J,GAAG,EAAE,SAAS,SAAS,IAAI,IAAIC,GAAE,4BAA4B,CAAAC,OAAKA,GAAE,wBAAwB,CAAC,GAAGD,GAAE,KAAK,IAAI;AAAA;AAAA,EAE5G,GAAG,EAAE,SAAS,KAAK,IAAI;AAAA;AAAA,EAEvB;AACF;AACA,IAAM,IAAN,cAAgBE,GAAE;AAAA,EAChB,cAAc;AACZ,UAAM,GAAG,SAAS,GAAG,KAAK,2BAA2B,EAAE,GAAG,KAAK,2BAA2B,EAAE,GAAG,KAAK,oCAAoCF,GAAE,GAAG,KAAK,wBAAwB,EAAE;AAAA,EAC9K;AACF;AACA,IAAM,IAAN,cAAgBE,GAAE;AAAA,EAChB,cAAc;AACZ,UAAM,GAAG,SAAS,GAAG,KAAK,4BAA4BF,GAAE,GAAG,KAAK,4BAA4B,EAAE,GAAG,KAAK,4BAA4B,EAAE;AAAA,EACtI;AACF;",
  "names": ["o", "e", "o", "e", "r", "n"]
}
