{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/map-components/dist/esm/chunk-PVEVZB4O-2c3b8893.js"],
  "sourcesContent": ["/*!\n * All material copyright Esri, All Rights Reserved, unless otherwise specified.\n * See https://js.arcgis.com/4.30/esri/copyright.txt for details.\n * v4.30.7\n */\nimport { b as makeController } from './index-c99fc80c.js';\nimport { s as startLocaleObserver, g as getElementLocales } from './index-d2df902e.js';\n\n// src/load.ts\nvar load = loader => makeController(loader);\nvar makeT9nController = getAssetPath => ({\n  blocking = false,\n  name\n} = {}) =>\n// eslint-disable-next-line @typescript-eslint/promise-function-async\nmakeController((component, controller) => {\n  controller.onLifecycle(() => startLocaleObserver(component.el, getAssetPath(\"./assets\"), ({\n    t9nLocale,\n    t9nStrings,\n    lang\n  }) => {\n    controller.exports = {\n      ...t9nStrings,\n      _lang: lang,\n      _t9nLocale: t9nLocale\n    };\n    const label = t9nStrings.componentLabel ?? t9nStrings.widgetLabel;\n    if (typeof label === \"string\" && \"label\" in component && component.label == null) {\n      component.label ?? (component.label = label);\n    }\n  }, name));\n  if (blocking) {\n    return controller.ready;\n  }\n  const locale = getElementLocales(component.el);\n  return {\n    _lang: locale.lang,\n    _t9nLocale: locale.t9nLocale\n  };\n});\n\n// src/usePropertyChange.ts\nvar usePropertyChange = _component => propertyChangeController;\nvar eventName = \"arcgisPropertyChange\";\nvar propertyChangeController = (...toWatch) => makeController((component, controller) => {\n  const eventedComponent = component;\n  if (component.manager.isLit) {\n    eventedComponent[eventName] = {\n      emit: payload => {\n        const event = new CustomEvent(eventName, {\n          detail: payload,\n          cancelable: true\n        });\n        component.el.dispatchEvent(event);\n        return event;\n      }\n    };\n  }\n  const eventEmitter = eventedComponent[eventName];\n  controller.onLoad(() => controller.onLifecycle(() => toWatch.map(name =>\n  // Casting to 'el' to simplify dynamic prop name typing\n  component.manager.watch(name, () => eventEmitter.emit({\n    name\n  })))));\n  return eventEmitter;\n});\nexport { load as l, makeT9nController as m, usePropertyChange as u };"],
  "mappings": ";;;;;;;;;;;;;;AASA,IAAI,OAAO,YAAU,eAAe,MAAM;AAC1C,IAAI,oBAAoB,kBAAgB,CAAC;AAAA,EACvC,WAAW;AAAA,EACX;AACF,IAAI,CAAC;AAAA;AAAA,EAEL,eAAe,CAAC,WAAW,eAAe;AACxC,eAAW,YAAY,MAAM,oBAAoB,UAAU,IAAI,aAAa,UAAU,GAAG,CAAC;AAAA,MACxF;AAAA,MACA;AAAA,MACA;AAAA,IACF,MAAM;AACJ,iBAAW,UAAU,iCAChB,aADgB;AAAA,QAEnB,OAAO;AAAA,QACP,YAAY;AAAA,MACd;AACA,YAAM,QAAQ,WAAW,kBAAkB,WAAW;AACtD,UAAI,OAAO,UAAU,YAAY,WAAW,aAAa,UAAU,SAAS,MAAM;AAChF,kBAAU,UAAU,UAAU,QAAQ;AAAA,MACxC;AAAA,IACF,GAAG,IAAI,CAAC;AACR,QAAI,UAAU;AACZ,aAAO,WAAW;AAAA,IACpB;AACA,UAAM,SAAS,kBAAkB,UAAU,EAAE;AAC7C,WAAO;AAAA,MACL,OAAO,OAAO;AAAA,MACd,YAAY,OAAO;AAAA,IACrB;AAAA,EACF,CAAC;AAAA;AAGD,IAAI,oBAAoB,gBAAc;AACtC,IAAI,YAAY;AAChB,IAAI,2BAA2B,IAAI,YAAY,eAAe,CAAC,WAAW,eAAe;AACvF,QAAM,mBAAmB;AACzB,MAAI,UAAU,QAAQ,OAAO;AAC3B,qBAAiB,SAAS,IAAI;AAAA,MAC5B,MAAM,aAAW;AACf,cAAM,QAAQ,IAAI,YAAY,WAAW;AAAA,UACvC,QAAQ;AAAA,UACR,YAAY;AAAA,QACd,CAAC;AACD,kBAAU,GAAG,cAAc,KAAK;AAChC,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACA,QAAM,eAAe,iBAAiB,SAAS;AAC/C,aAAW,OAAO,MAAM,WAAW,YAAY,MAAM,QAAQ,IAAI;AAAA;AAAA,IAEjE,UAAU,QAAQ,MAAM,MAAM,MAAM,aAAa,KAAK;AAAA,MACpD;AAAA,IACF,CAAC,CAAC;AAAA,GAAC,CAAC,CAAC;AACL,SAAO;AACT,CAAC;",
  "names": []
}
