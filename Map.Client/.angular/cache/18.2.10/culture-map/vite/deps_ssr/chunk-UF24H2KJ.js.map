{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/HighlightDownsample.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { ScreenSpacePass as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";\nimport { NoParameters as r, glsl as a } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as t } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DDrawUniform as l } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DDrawUniform.js\";\nclass o extends r {}\nfunction i() {\n  const r = new t(),\n    {\n      outputs: o,\n      fragment: i\n    } = r;\n  return r.include(e), i.uniforms.add(new l(\"textureInput\", e => e.input)), i.constants.add(\"sampleArea\", \"int\", Math.ceil(s / 2)), o.add(\"fragGrid\", \"vec2\"), i.code.add(a`\n    void main() {\n      float red = 0.0;\n      float green = 1.0;\n      int cellSize = ${a.int(n)};\n      vec2 texelSize = 1.0 / vec2(textureSize(textureInput, 0));\n      vec2 offset = floor(gl_FragCoord.xy) * vec2(float(cellSize));\n\n      for(int x = -sampleArea; x < cellSize + sampleArea; x += 2) {\n        for(int y = -sampleArea; y < cellSize + sampleArea; y += 2) {\n          vec2 coord = (offset + vec2(float(x), float(y))) * texelSize;\n          vec4 value = texture(textureInput, coord);\n          float mx = floor(max(value.g, value.b));\n\n          red = max(red, ceil(value.r));\n          green = min(green, mx);\n          if(red == 1.0 && green == 0.0) {\n            fragGrid = vec2(red, green);\n            return;\n          }\n        }\n      }\n      fragGrid = vec2(red, green);\n    }`), r;\n}\nconst n = 32,\n  s = 9,\n  d = .4,\n  c = Object.freeze(Object.defineProperty({\n    __proto__: null,\n    HighlightDownsampleDrawParameters: o,\n    blurSize: d,\n    build: i,\n    gridCellPixelSize: n,\n    outlineSize: s\n  }, Symbol.toStringTag, {\n    value: \"Module\"\n  }));\nexport { o as H, c as a, d as b, i as c, n as g, s as o };"],
  "mappings": ";;;;;;;;;;;;;;;;AAQA,IAAMA,KAAN,cAAgB,EAAE;AAAC;AACnB,SAAS,IAAI;AACX,QAAM,IAAI,IAAIA,GAAE,GACd;AAAA,IACE,SAASA;AAAA,IACT,UAAUC;AAAA,EACZ,IAAI;AACN,SAAO,EAAE,QAAQD,EAAC,GAAGC,GAAE,SAAS,IAAI,IAAI,EAAE,gBAAgB,OAAK,EAAE,KAAK,CAAC,GAAGA,GAAE,UAAU,IAAI,cAAc,OAAO,KAAK,KAAKC,KAAI,CAAC,CAAC,GAAGF,GAAE,IAAI,YAAY,MAAM,GAAGC,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA,uBAInJ,EAAE,IAAIE,EAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBzB,GAAG;AACT;AACA,IAAMA,KAAI;AAAV,IACED,KAAI;AADN,IAEE,IAAI;AAFN,IAGE,IAAI,OAAO,OAAO,OAAO,eAAe;AAAA,EACtC,WAAW;AAAA,EACX,mCAAmCF;AAAA,EACnC,UAAU;AAAA,EACV,OAAO;AAAA,EACP,mBAAmBG;AAAA,EACnB,aAAaD;AACf,GAAG,OAAO,aAAa;AAAA,EACrB,OAAO;AACT,CAAC,CAAC;",
  "names": ["o", "i", "s", "n"]
}
