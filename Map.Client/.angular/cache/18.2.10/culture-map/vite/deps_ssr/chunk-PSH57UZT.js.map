{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/ColorMaterial.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { ShaderOutput as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";\nimport { SliceDraw as r } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as o } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { ObjectAndLayerIdColor as i } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";\nimport { VertexColor as l } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { OutputHighlight as t } from \"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";\nimport { multipassTerrainTest as s } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { VisualVariables as a } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as d } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";\nimport { ColorConversion as n } from \"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";\nimport { addProjViewLocalOrigin as g } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float4PassUniform as p } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { glsl as u } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as c } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { TransparencyPassType as b } from \"../views/3d/webgl-engine/lib/TransparencyPassType.js\";\nimport { VertexAttribute as v } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nfunction f(f) {\n  const m = new c(),\n    {\n      vertex: w,\n      fragment: h,\n      attributes: C,\n      varyings: y\n    } = m;\n  g(w, f), m.include(o, f), m.include(l, f), m.include(a, f), m.include(i, f), C.add(v.POSITION, \"vec3\"), f.vvColor && C.add(v.COLORFEATUREATTRIBUTE, \"float\"), y.add(\"vColor\", \"vec4\"), y.add(\"vpos\", \"vec3\");\n  const j = f.multipassEnabled && f.output === e.Color;\n  j && y.add(\"depth\", \"float\"), w.uniforms.add(new p(\"eColor\", e => e.color)), w.code.add(u`\n    void main(void) {\n      vpos = position;\n      forwardNormalizedVertexColor();\n      forwardObjectAndLayerIdColor();\n\n      ${f.hasVertexColors ? \"vColor *= eColor;\" : f.vvColor ? \"vColor = eColor * interpolateVVColor(colorFeatureAttribute);\" : \"vColor = eColor;\"}\n      ${j ? \"depth = (view * vec4(vpos, 1.0)).z;\" : \"\"}\n      gl_Position = transformPosition(proj, view, vpos);\n    }\n  `), m.include(r, f), j && m.include(s, f), h.include(n);\n  const L = f.output === e.Highlight;\n  return L && m.include(t, f), f.transparencyPassType === b.ColorAlpha && (m.outputs.add(\"fragColor\", \"vec4\", 0), m.outputs.add(\"fragAlpha\", \"float\", 1)), h.code.add(u`\n  void main() {\n    discardBySlice(vpos);\n    ${j ? \"terrainDepthTest(depth);\" : \"\"}\n    vec4 fColor = vColor;\n\n    ${f.output === e.ObjectAndLayerIdColor ? u`fColor.a = 1.0;` : \"\"}\n\n    if (fColor.a < ${u.float(d)}) {\n      discard;\n    }\n\n    ${f.output === e.Color ? u`fragColor = highlightSlice(fColor, vpos); ${f.transparencyPassType === b.ColorAlpha ? u`\n                  fragColor = premultiplyAlpha(fragColor);\n                  fragAlpha = fragColor.a;` : \"\"}` : \"\"}\n    ${L ? u`outputHighlight();` : \"\"};\n    ${f.output === e.ObjectAndLayerIdColor ? u`outputObjectAndLayerIdColor();` : \"\"}\n  }\n  `), m;\n}\nconst m = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: f\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { m as C, f as b };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,SAAS,EAAEA,IAAG;AACZ,QAAMC,KAAI,IAAIC,GAAE,GACd;AAAA,IACE,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,UAAU;AAAA,EACZ,IAAID;AACN,IAAE,GAAGD,EAAC,GAAGC,GAAE,QAAQC,IAAGF,EAAC,GAAGC,GAAE,QAAQE,IAAGH,EAAC,GAAGC,GAAE,QAAQ,GAAGD,EAAC,GAAGC,GAAE,QAAQG,IAAGJ,EAAC,GAAG,EAAE,IAAI,EAAE,UAAU,MAAM,GAAGA,GAAE,WAAW,EAAE,IAAI,EAAE,uBAAuB,OAAO,GAAG,EAAE,IAAI,UAAU,MAAM,GAAG,EAAE,IAAI,QAAQ,MAAM;AAC3M,QAAM,IAAIA,GAAE,oBAAoBA,GAAE,WAAWE,GAAE;AAC/C,OAAK,EAAE,IAAI,SAAS,OAAO,GAAG,EAAE,SAAS,IAAI,IAAIC,GAAE,UAAU,CAAAA,OAAKA,GAAE,KAAK,CAAC,GAAG,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMlFH,GAAE,kBAAkB,sBAAsBA,GAAE,UAAU,iEAAiE,kBAAkB;AAAA,QACzI,IAAI,wCAAwC,EAAE;AAAA;AAAA;AAAA,GAGnD,GAAGC,GAAE,QAAQ,GAAGD,EAAC,GAAG,KAAKC,GAAE,QAAQI,IAAGL,EAAC,GAAG,EAAE,QAAQG,EAAC;AACtD,QAAM,IAAIH,GAAE,WAAWE,GAAE;AACzB,SAAO,KAAKD,GAAE,QAAQ,GAAGD,EAAC,GAAGA,GAAE,yBAAyBE,GAAE,eAAeD,GAAE,QAAQ,IAAI,aAAa,QAAQ,CAAC,GAAGA,GAAE,QAAQ,IAAI,aAAa,SAAS,CAAC,IAAI,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA,MAGhK,IAAI,6BAA6B,EAAE;AAAA;AAAA;AAAA,MAGnCD,GAAE,WAAWE,GAAE,wBAAwB,qBAAqB,EAAE;AAAA;AAAA,qBAE/C,EAAE,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,MAIzBF,GAAE,WAAWE,GAAE,QAAQ,8CAA8CF,GAAE,yBAAyBE,GAAE,aAAa;AAAA;AAAA,8CAEvE,EAAE,KAAK,EAAE;AAAA,MACjD,IAAI,wBAAwB,EAAE;AAAA,MAC9BF,GAAE,WAAWE,GAAE,wBAAwB,oCAAoC,EAAE;AAAA;AAAA,GAEhF,GAAGD;AACN;AACA,IAAM,IAAI,OAAO,OAAO,OAAO,eAAe;AAAA,EAC5C,WAAW;AAAA,EACX,OAAO;AACT,GAAG,OAAO,aAAa;AAAA,EACrB,OAAO;AACT,CAAC,CAAC;",
  "names": ["f", "m", "o", "e", "d", "a"]
}
