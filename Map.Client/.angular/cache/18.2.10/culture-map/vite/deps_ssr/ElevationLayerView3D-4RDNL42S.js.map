{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/layers/ElevationLayerView3D.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { _ as e } from \"../../../chunks/tslib.es6.js\";\nimport r from \"../../../core/Error.js\";\nimport o from \"../../../core/Logger.js\";\nimport { releaseMaybe as t } from \"../../../core/maybe.js\";\nimport { isAborted as i } from \"../../../core/promiseUtils.js\";\nimport { property as s } from \"../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../core/has.js\";\nimport \"../../../core/RandomLCG.js\";\nimport { subclass as a } from \"../../../core/accessorSupport/decorators/subclass.js\";\nimport { ElevationTileData as l } from \"../../../layers/support/ElevationTileData.js\";\nimport { acquireDecoder as n } from \"../../../layers/support/LercDecoder.js\";\nimport { LayerView3D as c } from \"./LayerView3D.js\";\nimport { TiledLayerView3D as m } from \"./TiledLayerView3D.js\";\nimport { elevationNoDataValue as p } from \"../terrain/TerrainConst.js\";\nimport { useFetchTileForLayer as d } from \"../terrain/terrainUtils.js\";\nimport y from \"../../layers/LayerView.js\";\nlet h = class extends m(c(y)) {\n  constructor() {\n    super(...arguments), this.type = \"elevation-3d\";\n  }\n  get tileInfo() {\n    return this.layer.tileInfo;\n  }\n  initialize() {\n    const e = this.view,\n      o = e.map?.allLayers,\n      t = o && o.includes(this.layer),\n      i = e.map?.ground?.layers,\n      s = i && i.includes(this.layer);\n    if (t && !s) {\n      const e = new r(\"layerview:elevation-layer-only\", `3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);\n      this.addResolvingPromise(Promise.reject(e));\n    }\n    this._lercDecoder = n(e.resourceController), this._addTilingSchemeMatchPromise();\n  }\n  destroy() {\n    this._lercDecoder = t(this._lercDecoder);\n  }\n  async fetchTile(e, r) {\n    const t = this.layer;\n    if (d(t)) {\n      const s = await t.fetchTile(e[0], e[1], e[2], {\n        noDataValue: p,\n        signal: r.signal\n      });\n      return i(r) ? void o.getLogger(this).warnOnce(\"A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true.\") : s;\n    }\n    const s = this.getTileUrl(e),\n      a = await r.requester.request(s, \"binary\", r),\n      n = await this._lercDecoder.decode(a, {\n        noDataValue: p\n      }, r.signal);\n    if (n) return new l(n);\n    throw new Error(\"LERC decoding failed\");\n  }\n};\ne([s()], h.prototype, \"layer\", void 0), e([s()], h.prototype, \"tileInfo\", null), h = e([a(\"esri.views.3d.layers.ElevationLayerView3D\")], h);\nconst f = h;\nexport { f as default };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAI,IAAI,cAAc,EAAEA,GAAEC,EAAC,CAAC,EAAE;AAAA,EAC5B,cAAc;AACZ,UAAM,GAAG,SAAS,GAAG,KAAK,OAAO;AAAA,EACnC;AAAA,EACA,IAAI,WAAW;AACb,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EACA,aAAa;AACX,UAAMC,KAAI,KAAK,MACb,IAAIA,GAAE,KAAK,WACXC,KAAI,KAAK,EAAE,SAAS,KAAK,KAAK,GAC9B,IAAID,GAAE,KAAK,QAAQ,QACnBE,KAAI,KAAK,EAAE,SAAS,KAAK,KAAK;AAChC,QAAID,MAAK,CAACC,IAAG;AACX,YAAMF,KAAI,IAAI,EAAE,kCAAkC,uBAAuB,KAAK,MAAM,EAAE,6CAA6C;AACnI,WAAK,oBAAoB,QAAQ,OAAOA,EAAC,CAAC;AAAA,IAC5C;AACA,SAAK,eAAeE,GAAEF,GAAE,kBAAkB,GAAG,KAAK,6BAA6B;AAAA,EACjF;AAAA,EACA,UAAU;AACR,SAAK,eAAe,EAAE,KAAK,YAAY;AAAA,EACzC;AAAA,EACM,UAAUA,IAAG,GAAG;AAAA;AACpB,YAAMC,KAAI,KAAK;AACf,UAAI,EAAEA,EAAC,GAAG;AACR,cAAMC,KAAI,MAAMD,GAAE,UAAUD,GAAE,CAAC,GAAGA,GAAE,CAAC,GAAGA,GAAE,CAAC,GAAG;AAAA,UAC5C,aAAa;AAAA,UACb,QAAQ,EAAE;AAAA,QACZ,CAAC;AACD,eAAO,EAAE,CAAC,IAAI,KAAK,EAAE,UAAU,IAAI,EAAE,SAAS,mIAAmI,IAAIE;AAAA,MACvL;AACA,YAAMA,KAAI,KAAK,WAAWF,EAAC,GACzBG,KAAI,MAAM,EAAE,UAAU,QAAQD,IAAG,UAAU,CAAC,GAC5CE,KAAI,MAAM,KAAK,aAAa,OAAOD,IAAG;AAAA,QACpC,aAAa;AAAA,MACf,GAAG,EAAE,MAAM;AACb,UAAIC,GAAG,QAAO,IAAID,GAAEC,EAAC;AACrB,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAAA;AACF;AACA,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,WAAW,SAAS,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,WAAW,YAAY,IAAI,GAAG,IAAI,EAAE,CAAC,EAAE,2CAA2C,CAAC,GAAG,CAAC;AAC1I,IAAM,IAAI;",
  "names": ["l", "y", "e", "t", "s", "a", "n"]
}
