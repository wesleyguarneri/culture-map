{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js", "../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js", "../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { glsl as o } from \"../shaderModules/interfaces.js\";\nfunction e(e) {\n  e.vertex.code.add(o`vec4 offsetBackfacingClipPosition(vec4 posClip, vec3 posWorld, vec3 normalWorld, vec3 camPosWorld) {\nvec3 camToVert = posWorld - camPosWorld;\nbool isBackface = dot(camToVert, normalWorld) > 0.0;\nif (isBackface) {\nposClip.z += 0.0000003 * posClip.w;\n}\nreturn posClip;\n}`);\n}\nexport { e as Offset };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { DecodeSymbolColor as o } from \"../../../collections/Component/Material/shader/DecodeSymbolColor.glsl.js\";\nimport { IntegerPassUniform as r } from \"../../shaderModules/IntegerPassUniform.js\";\nimport { glsl as e } from \"../../shaderModules/interfaces.js\";\nimport { VertexAttribute as l } from \"../../../lib/VertexAttribute.js\";\nimport { colorMixModes as d } from \"../../../materials/internal/MaterialUtil.js\";\nfunction i(i, t) {\n  t.hasSymbolColors ? (i.include(o), i.attributes.add(l.SYMBOLCOLOR, \"vec4\"), i.varyings.add(\"colorMixMode\", \"mediump float\"), i.vertex.code.add(e`int symbolColorMixMode;\nvec4 getSymbolColor() {\nreturn decodeSymbolColor(symbolColor, symbolColorMixMode) * 0.003921568627451;\n}\nvoid forwardColorMixMode() {\ncolorMixMode = float(symbolColorMixMode) + 0.5;\n}`)) : (i.fragment.uniforms.add(new r(\"colorMixMode\", o => d[o.colorMixMode])), i.vertex.code.add(e`vec4 getSymbolColor() { return vec4(1.0); }\nvoid forwardColorMixMode() {}`));\n}\nexport { i as SymbolColor };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { addNearFar as o } from \"../ForwardLinearDepth.glsl.js\";\nimport { ShaderOutput as e } from \"../ShaderOutput.js\";\nimport { SliceDraw as r } from \"../Slice.glsl.js\";\nimport { Transform as i } from \"../Transform.glsl.js\";\nimport { NormalAttribute as t, NormalType as a } from \"../attributes/NormalAttribute.glsl.js\";\nimport { ObjectAndLayerIdColor as s } from \"../attributes/ObjectAndLayerIdColor.glsl.js\";\nimport { TextureCoordinateAttribute as d } from \"../attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexNormal as l } from \"../attributes/VertexNormal.glsl.js\";\nimport { OutputDepth as n } from \"../output/OutputDepth.glsl.js\";\nimport { OutputHighlight as c } from \"../output/OutputHighlight.glsl.js\";\nimport { VisualVariables as u } from \"../shading/VisualVariables.glsl.js\";\nimport { DiscardOrAdjustAlphaPass as p } from \"../util/AlphaDiscard.glsl.js\";\nimport { addProjViewLocalOrigin as v } from \"../util/View.glsl.js\";\nimport { glsl as m } from \"../../shaderModules/interfaces.js\";\nimport { Texture2DPassUniform as f } from \"../../shaderModules/Texture2DPassUniform.js\";\nimport { AlphaDiscardMode as g } from \"../../../lib/basicInterfaces.js\";\nfunction x(x, h) {\n  const {\n      vertex: j,\n      fragment: O\n    } = x,\n    w = h.hasColorTexture && h.alphaDiscardMode !== g.Opaque;\n  switch (h.output) {\n    case e.Depth:\n      v(j, h), x.include(i, h), x.include(r, h), x.include(d, h), w && O.uniforms.add(new f(\"tex\", o => o.texture)), j.code.add(m`void main(void) {\nvpos = getVertexInLocalOriginSpace();\nvpos = subtractOrigin(vpos);\nvpos = addVerticalOffset(vpos, localOrigin);\ngl_Position = transformPosition(proj, view, vpos);\nforwardTextureCoordinates();\n}`), x.include(p, h), O.code.add(m`\n          void main(void) {\n            discardBySlice(vpos);\n            ${w ? m`\n                    vec4 texColor = texture(tex, ${h.hasColorTextureTransform ? m`colorUV` : m`vuv0`});\n                    discardOrAdjustAlpha(texColor);` : \"\"}\n          }\n        `);\n      break;\n    case e.Shadow:\n    case e.ShadowHighlight:\n    case e.ShadowExcludeHighlight:\n    case e.ViewshedShadow:\n    case e.ObjectAndLayerIdColor:\n      v(j, h), x.include(i, h), x.include(d, h), x.include(u, h), x.include(n, h), x.include(r, h), x.include(s, h), o(x), x.varyings.add(\"depth\", \"float\"), w && O.uniforms.add(new f(\"tex\", o => o.texture)), j.code.add(m`void main(void) {\nvpos = getVertexInLocalOriginSpace();\nvpos = subtractOrigin(vpos);\nvpos = addVerticalOffset(vpos, localOrigin);\ngl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);\nforwardTextureCoordinates();\nforwardObjectAndLayerIdColor();\n}`), x.include(p, h), O.code.add(m`\n          void main(void) {\n            discardBySlice(vpos);\n            ${w ? m`\n                    vec4 texColor = texture(tex, ${h.hasColorTextureTransform ? m`colorUV` : m`vuv0`});\n                    discardOrAdjustAlpha(texColor);` : \"\"}\n            ${h.output === e.ObjectAndLayerIdColor ? m`outputObjectAndLayerIdColor();` : m`outputDepth(depth);`}\n          }\n        `);\n      break;\n    case e.Normal:\n      {\n        v(j, h), x.include(i, h), x.include(t, h), x.include(l, h), x.include(d, h), x.include(u, h), w && O.uniforms.add(new f(\"tex\", o => o.texture)), h.normalType === a.ScreenDerivative && x.varyings.add(\"vPositionView\", \"vec3\");\n        const o = h.normalType === a.Attribute || h.normalType === a.Compressed;\n        j.code.add(m`\n          void main(void) {\n            vpos = getVertexInLocalOriginSpace();\n\n            ${o ? m`vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));` : m`\n                  // Get vertex position in camera space for screen-space derivative normals\n                  vPositionView = (view * vec4(vpos, 1.0)).xyz;\n                `}\n            vpos = subtractOrigin(vpos);\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            forwardTextureCoordinates();\n          }\n        `), x.include(r, h), x.include(p, h), O.code.add(m`\n          void main() {\n            discardBySlice(vpos);\n            ${w ? m`\n                    vec4 texColor = texture(tex, ${h.hasColorTextureTransform ? m`colorUV` : m`vuv0`});\n                    discardOrAdjustAlpha(texColor);` : \"\"}\n\n            ${h.normalType === a.ScreenDerivative ? m`vec3 normal = screenDerivativeNormal(vPositionView);` : m`\n                  vec3 normal = normalize(vNormalWorld);\n                  if (gl_FrontFacing == false){\n                    normal = -normal;\n                  }`}\n            fragColor = vec4(0.5 + 0.5 * normal, 1.0);\n          }\n        `);\n        break;\n      }\n    case e.Highlight:\n      v(j, h), x.include(i, h), x.include(d, h), x.include(u, h), w && O.uniforms.add(new f(\"tex\", o => o.texture)), j.code.add(m`void main(void) {\nvpos = getVertexInLocalOriginSpace();\nvpos = subtractOrigin(vpos);\nvpos = addVerticalOffset(vpos, localOrigin);\ngl_Position = transformPosition(proj, view, vpos);\nforwardTextureCoordinates();\n}`), x.include(r, h), x.include(p, h), x.include(c, h), O.code.add(m`\n          void main() {\n            discardBySlice(vpos);\n            ${w ? m`\n                    vec4 texColor = texture(tex, ${h.hasColorTextureTransform ? m`colorUV` : m`vuv0`});\n                    discardOrAdjustAlpha(texColor);` : \"\"}\n            outputHighlight();\n          }\n        `);\n  }\n}\nexport { x as DefaultMaterialAuxiliaryPasses };"],
  "mappings": "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",
  "names": ["e", "i", "t", "e", "o", "x", "o", "s", "e", "d", "a"]
}
