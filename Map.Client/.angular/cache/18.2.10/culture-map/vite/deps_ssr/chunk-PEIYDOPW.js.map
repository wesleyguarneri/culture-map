{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js", "../../../../../../node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { IDENTITY as r } from \"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js\";\nimport { TextureCoordinateAttributeType as e } from \"../attributes/TextureCoordinateAttribute.glsl.js\";\nimport { glsl as o } from \"../../shaderModules/interfaces.js\";\nimport { Matrix3PassUniform as a } from \"../../shaderModules/Matrix3PassUniform.js\";\nfunction t(e, t) {\n  t.hasColorTextureTransform ? (e.vertex.uniforms.add(new a(\"colorTextureTransformMatrix\", e => e.colorTextureTransformMatrix ?? r)), e.varyings.add(\"colorUV\", \"vec2\"), e.vertex.code.add(o`void forwardColorUV(){\ncolorUV = (colorTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)) : e.vertex.code.add(o`void forwardColorUV(){}`);\n}\nfunction s(t, s) {\n  s.hasNormalTextureTransform && s.textureCoordinateType !== e.None ? (t.vertex.uniforms.add(new a(\"normalTextureTransformMatrix\", e => e.normalTextureTransformMatrix ?? r)), t.varyings.add(\"normalUV\", \"vec2\"), t.vertex.code.add(o`void forwardNormalUV(){\nnormalUV = (normalTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)) : t.vertex.code.add(o`void forwardNormalUV(){}`);\n}\nfunction i(t, s) {\n  s.hasEmissionTextureTransform && s.textureCoordinateType !== e.None ? (t.vertex.uniforms.add(new a(\"emissiveTextureTransformMatrix\", e => e.emissiveTextureTransformMatrix ?? r)), t.varyings.add(\"emissiveUV\", \"vec2\"), t.vertex.code.add(o`void forwardEmissiveUV(){\nemissiveUV = (emissiveTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)) : t.vertex.code.add(o`void forwardEmissiveUV(){}`);\n}\nfunction d(t, s) {\n  s.hasOcclusionTextureTransform && s.textureCoordinateType !== e.None ? (t.vertex.uniforms.add(new a(\"occlusionTextureTransformMatrix\", e => e.occlusionTextureTransformMatrix ?? r)), t.varyings.add(\"occlusionUV\", \"vec2\"), t.vertex.code.add(o`void forwardOcclusionUV(){\nocclusionUV = (occlusionTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)) : t.vertex.code.add(o`void forwardOcclusionUV(){}`);\n}\nfunction n(t, s) {\n  s.hasMetallicRoughnessTextureTransform && s.textureCoordinateType !== e.None ? (t.vertex.uniforms.add(new a(\"metallicRoughnessTextureTransformMatrix\", e => e.metallicRoughnessTextureTransformMatrix ?? r)), t.varyings.add(\"metallicRoughnessUV\", \"vec2\"), t.vertex.code.add(o`void forwardMetallicRoughnessUV(){\nmetallicRoughnessUV = (metallicRoughnessTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)) : t.vertex.code.add(o`void forwardMetallicRoughnessUV(){}`);\n}\nexport { t as colorTextureUV, i as emissiveTextureUV, n as metallicRoughnessTextureUV, s as normalTextureUV, d as occlusionTextureUV };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { ForwardLinearDepth as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { Offset as r } from \"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";\nimport { ShaderOutput as o } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";\nimport { SliceDraw as i } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as a } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { InstancedDoublePrecision as l } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";\nimport { NormalAttribute as s, NormalType as t } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";\nimport { PositionAttribute as n } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";\nimport { SymbolColor as d } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";\nimport { TextureCoordinateAttribute as c } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexColor as m } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { VertexNormal as g } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";\nimport { VerticalOffset as v } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";\nimport { DefaultMaterialAuxiliaryPasses as p } from \"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";\nimport { ComputeNormalTexture as b } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";\nimport { EvaluateAmbientOcclusion as u } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";\nimport { EvaluateSceneLighting as h, addAmbientBoostFactor as w, addLightingGlobalFactor as f } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";\nimport { addMainLightIntensity as x } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";\nimport { multipassTerrainTest as y } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { Normals as C } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";\nimport { PhysicallyBasedRendering as L } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";\nimport { PhysicallyBasedRenderingParameters as j, PBRMode as T } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadShadowMapPass as P, ReadShadowMapDraw as M } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { colorTextureUV as A, normalTextureUV as N, emissiveTextureUV as S, occlusionTextureUV as O, metallicRoughnessTextureUV as V } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js\";\nimport { VisualVariables as E } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as $ } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";\nimport { DiscardOrAdjustAlphaPass as D } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { MixExternalColor as U } from \"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";\nimport { addProjViewLocalOrigin as B, addCameraPosition as _ } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float3PassUniform as F } from \"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";\nimport { Float4PassUniform as I } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { FloatPassUniform as R } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as z } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as W } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as G } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nimport { TransparencyPassType as k } from \"../views/3d/webgl-engine/lib/TransparencyPassType.js\";\nimport { VertexAttribute as q } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nfunction H(H) {\n  const J = new W(),\n    {\n      vertex: K,\n      fragment: Q,\n      varyings: X\n    } = J;\n  if (B(K, H), J.include(n), X.add(\"vpos\", \"vec3\"), J.include(E, H), J.include(l, H), J.include(v, H), J.include(A, H), H.output === o.Color) {\n    J.include(N, H), J.include(S, H), J.include(O, H), J.include(V, H), _(K, H), J.include(s, H), J.include(a, H);\n    const o = H.normalType === t.Attribute || H.normalType === t.Compressed;\n    o && H.offsetBackfaces && J.include(r), J.include(b, H), J.include(g, H), H.instancedColor && J.attributes.add(q.INSTANCECOLOR, \"vec4\"), X.add(\"vPositionLocal\", \"vec3\"), J.include(c, H), J.include(e, H), J.include(d, H), J.include(m, H), K.uniforms.add(new I(\"externalColor\", e => e.externalColor)), X.add(\"vcolorExt\", \"vec4\"), H.multipassEnabled && X.add(\"depth\", \"float\"), K.code.add(z`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${H.instancedColor ? \"vcolorExt *= instanceColor * 0.003921568627451;\" : \"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${z.float($)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        } else {\n          vpos = getVertexInLocalOriginSpace();\n          vPositionLocal = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${o ? z`vNormalWorld = dpNormal(vvLocalNormal(normalModel()));` : \"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${H.hasVertexTangents ? \"vTangent = dpTransformVertexTangent(tangent);\" : \"\"}\n          gl_Position = transformPosition(proj, view, vpos);\n          ${o && H.offsetBackfaces ? \"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\" : \"\"}\n        }\n\n        ${H.multipassEnabled ? \"depth = (view * vec4(vpos, 1.0)).z;\" : \"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n        forwardColorUV();\n        forwardNormalUV();\n        forwardEmissiveUV();\n        forwardOcclusionUV();\n        forwardMetallicRoughnessUV();\n      }\n    `), J.include(i, H), J.include(h, H), J.include(u, H), J.include(D, H), J.include(H.instancedDoublePrecision ? P : M, H), J.include(y, H), _(Q, H), Q.uniforms.add(K.uniforms.get(\"localOrigin\"), new F(\"ambient\", e => e.ambient), new F(\"diffuse\", e => e.diffuse), new R(\"opacity\", e => e.opacity), new R(\"layerOpacity\", e => e.layerOpacity)), H.hasColorTexture && Q.uniforms.add(new G(\"tex\", e => e.texture)), J.include(j, H), J.include(L, H), Q.include(U), J.include(C, H), w(Q), f(Q), x(Q), H.transparencyPassType === k.ColorAlpha && (J.outputs.add(\"fragColor\", \"vec4\", 0), J.outputs.add(\"fragAlpha\", \"float\", 1)), Q.code.add(z`\n      void main() {\n        discardBySlice(vpos);\n        ${H.multipassEnabled ? \"terrainDepthTest(depth);\" : \"\"}\n        ${H.hasColorTexture ? z`\n                vec4 texColor = texture(tex, ${H.hasColorTextureTransform ? z`colorUV` : z`vuv0`});\n                ${H.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n                discardOrAdjustAlpha(texColor);` : z`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        ${H.normalType === t.ScreenDerivative ? z`\n                vec3 normal = screenDerivativeNormal(vPositionLocal);` : z`\n                shadingParams.normalView = vNormalWorld;\n                vec3 normal = shadingNormal(shadingParams);`}\n        ${H.pbrMode === T.Normal ? \"applyPBRFactors();\" : \"\"}\n        float ssao = evaluateAmbientOcclusionInverse() * getBakedOcclusion();\n\n        vec3 posWorld = vpos + localOrigin;\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);\n        float shadow = ${H.receiveShadows ? \"readShadowMap(vpos, linearDepth)\" : H.spherical ? \"lightingGlobalFactor * (1.0 - additionalAmbientScale)\" : \"0.0\"};\n\n        vec3 matColor = max(ambient, diffuse);\n        ${H.hasVertexColors ? z`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : z`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${H.hasNormalTexture ? z`\n                mat3 tangentSpace = ${H.hasVertexTangents ? \"computeTangentSpace(normal);\" : \"computeTangentSpace(normal, vpos, vuv0);\"}\n                vec3 shadingNormal = computeTextureNormal(tangentSpace, ${H.hasNormalTextureTransform ? z`normalUV` : \"vuv0\"});` : z`vec3 shadingNormal = normal;`}\n        vec3 normalGround = ${H.spherical ? z`normalize(posWorld);` : z`vec3(0.0, 0.0, 1.0);`}\n\n        ${H.snowCover ? z`\n                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));\n                albedo = mix(albedo, vec3(1), snow);\n                shadingNormal = mix(shadingNormal, normal, snow);\n                ssao = mix(ssao, 1.0, snow);` : \"\"}\n\n        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n        ${H.pbrMode === T.Normal || H.pbrMode === T.Schematic ? z`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                ${H.snowCover ? z`\n                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);\n                        emission = mix(emission, vec3(0.0), snow);` : \"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : z`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${H.transparencyPassType === k.ColorAlpha ? z`\n                  fragColor = premultiplyAlpha(fragColor);\n                  fragAlpha = fragColor.a;` : \"\"}\n      }\n    `);\n  }\n  return J.include(p, H), J;\n}\nconst J = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: H\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { J as D, H as b };"],
  "mappings": "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",
  "names": ["t", "e", "o", "s", "i", "d", "n", "H", "J", "o", "d", "l", "a", "t", "s", "i", "n", "e", "x"]
}
