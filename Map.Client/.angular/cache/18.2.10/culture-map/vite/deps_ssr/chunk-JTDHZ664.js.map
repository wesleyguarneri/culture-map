{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/chunks/HeatmapDensity.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { addProjViewLocalOrigin as e } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { FloatPassUniform as i } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as o } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as r } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { VertexAttribute as a } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nfunction t(t) {\n  const s = new r(),\n    {\n      vertex: d,\n      fragment: u,\n      attributes: n,\n      varyings: l\n    } = s;\n  e(d, t);\n  const {\n    isAttributeDriven: c,\n    usesHalfFloat: f\n  } = t;\n  return n.add(a.POSITION, \"vec3\"), n.add(a.UV0, \"vec2\"), c && (n.add(a.FEATUREATTRIBUTE, \"float\"), l.add(\"attributeValue\", \"float\")), f && s.constants.add(\"compressionFactor\", \"float\", .25), l.add(\"unitCirclePos\", \"vec2\"), d.uniforms.add(new i(\"radius\", ({\n    resolutionForScale: e,\n    searchRadius: i\n  }, {\n    camera: o,\n    screenToWorldRatio: r,\n    overlayStretch: a\n  }) => 2 * i * (0 === e ? 1 : e / r) * o.pixelRatio / o.fullViewport[2] / a)), d.code.add(o`\n    void main() {\n      unitCirclePos = uv0;\n\n      vec4 posProj = proj * (view * vec4(${a.POSITION}, 1.0));\n      vec4 quadOffset = vec4(unitCirclePos * radius, 0.0, 0.0);\n\n      ${c ? o`attributeValue = ${a.FEATUREATTRIBUTE};` : \"\"}\n      gl_Position = posProj + quadOffset;\n    }\n  `), u.code.add(o`\n    void main() {\n      float radiusRatioSquared = dot(unitCirclePos, unitCirclePos);\n      if (radiusRatioSquared > 1.0) {\n        discard;\n      }\n\n      float oneMinusRadiusRatioSquared = 1.0 - radiusRatioSquared;\n      float density = oneMinusRadiusRatioSquared * oneMinusRadiusRatioSquared ${c ? o` * attributeValue` : \"\"} ${f ? o` * compressionFactor` : \"\"};\n      fragColor = vec4(density);\n    }\n  `), s;\n}\nconst s = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: t\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { s as H, t as b };"],
  "mappings": ";;;;;;;;;;;;;;;;;;AASA,SAAS,EAAEA,IAAG;AACZ,QAAMC,KAAI,IAAIC,GAAE,GACd;AAAA,IACE,QAAQC;AAAA,IACR,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,UAAU;AAAA,EACZ,IAAIF;AACN,IAAEE,IAAGH,EAAC;AACN,QAAM;AAAA,IACJ,mBAAmB;AAAA,IACnB,eAAe;AAAA,EACjB,IAAIA;AACJ,SAAO,EAAE,IAAI,EAAE,UAAU,MAAM,GAAG,EAAE,IAAI,EAAE,KAAK,MAAM,GAAG,MAAM,EAAE,IAAI,EAAE,kBAAkB,OAAO,GAAG,EAAE,IAAI,kBAAkB,OAAO,IAAI,KAAKC,GAAE,UAAU,IAAI,qBAAqB,SAAS,IAAG,GAAG,EAAE,IAAI,iBAAiB,MAAM,GAAGE,GAAE,SAAS,IAAI,IAAID,GAAE,UAAU,CAAC;AAAA,IAC5P,oBAAoBE;AAAA,IACpB,cAAc;AAAA,EAChB,GAAG;AAAA,IACD,QAAQF;AAAA,IACR,oBAAoB;AAAA,IACpB,gBAAgB;AAAA,EAClB,MAAM,IAAI,KAAK,MAAME,KAAI,IAAIA,KAAI,KAAKF,GAAE,aAAaA,GAAE,aAAa,CAAC,IAAI,CAAC,CAAC,GAAGC,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA,2CAIhD,EAAE,QAAQ;AAAA;AAAA;AAAA,QAG7C,IAAI,qBAAqB,EAAE,gBAAgB,MAAM,EAAE;AAAA;AAAA;AAAA,GAGxD,GAAG,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFAQ+D,IAAI,uBAAuB,EAAE,IAAI,IAAI,0BAA0B,EAAE;AAAA;AAAA;AAAA,GAG9I,GAAGF;AACN;AACA,IAAM,IAAI,OAAO,OAAO,OAAO,eAAe;AAAA,EAC5C,WAAW;AAAA,EACX,OAAO;AACT,GAAG,OAAO,aAAa;AAAA,EACrB,OAAO;AACT,CAAC,CAAC;",
  "names": ["t", "s", "o", "d", "e"]
}
