{
  "version": 3,
  "sources": ["../../../../../../node_modules/@esri/calcite-components/dist/components/index5.js"],
  "sourcesContent": ["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nclass NativeDateEngine {\n  constructor() {\n    this._formatterCache = new Map();\n    this._commonDateTimeFormatterOptions = {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      timeZoneName: 'shortOffset'\n    };\n  }\n  get name() {\n    return 'native';\n  }\n  create(date) {\n    return new Date(date);\n  }\n  increase(date) {\n    const oneDayInMs = 86400000;\n    return new Date(date.getTime() + oneDayInMs);\n  }\n  formatToIsoDateString(date) {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n  }\n  isoToTimeZone(isoDate, tz) {\n    const date = this._toDate(isoDate);\n    const formatter = this._getFormatter(tz);\n    const parts = formatter.formatToParts(date);\n    const [offset] = parts.filter(({\n      type\n    }) => type === 'timeZoneName').map(({\n      value\n    }) => value);\n    const tzOffset = this._getTimeZoneOffsetInMins(offset);\n    const tzOffsetMinutes = date.getMinutes() - (date.getTimezoneOffset() - tzOffset);\n    date.setMinutes(tzOffsetMinutes);\n    return date;\n  }\n  same(date1, date2) {\n    return date1.getTime() === date2.getTime();\n  }\n  _toDate(isoDate) {\n    return new Date(isoDate);\n  }\n  _getFormatter(tz) {\n    let formatter = this._formatterCache.get(tz);\n    if (!formatter) {\n      formatter = new Intl.DateTimeFormat('en-US', {\n        timeZone: tz,\n        ...this._commonDateTimeFormatterOptions\n      });\n      this._formatterCache.set(tz, formatter);\n    }\n    return formatter;\n  }\n  _getTimeZoneOffsetInMins(gmtTimeZone) {\n    const [sign, ...hoursMinutes] = gmtTimeZone.slice(3);\n    const [hours, minutes] = hoursMinutes.join('').split(':');\n    const signMultiplier = sign === '+' ? 1 : -1;\n    return signMultiplier * (Number(hours) * 60 + Number(minutes || 0));\n  }\n}\nexport { NativeDateEngine as DateEngine };\n\n"],
  "mappings": ";;;;;;AAKA,IAAM,mBAAN,MAAuB;AAAA,EACrB,cAAc;AACZ,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,kCAAkC;AAAA,MACrC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,KAAK;AAAA,MACL,cAAc;AAAA,IAChB;AAAA,EACF;AAAA,EACA,IAAI,OAAO;AACT,WAAO;AAAA,EACT;AAAA,EACA,OAAO,MAAM;AACX,WAAO,IAAI,KAAK,IAAI;AAAA,EACtB;AAAA,EACA,SAAS,MAAM;AACb,UAAM,aAAa;AACnB,WAAO,IAAI,KAAK,KAAK,QAAQ,IAAI,UAAU;AAAA,EAC7C;AAAA,EACA,sBAAsB,MAAM;AAC1B,UAAM,OAAO,KAAK,YAAY;AAC9B,UAAM,QAAQ,KAAK,SAAS,IAAI;AAChC,UAAM,MAAM,KAAK,QAAQ;AACzB,WAAO,GAAG,IAAI,IAAI,MAAM,SAAS,EAAE,SAAS,GAAG,GAAG,CAAC,IAAI,IAAI,SAAS,EAAE,SAAS,GAAG,GAAG,CAAC;AAAA,EACxF;AAAA,EACA,cAAc,SAAS,IAAI;AACzB,UAAM,OAAO,KAAK,QAAQ,OAAO;AACjC,UAAM,YAAY,KAAK,cAAc,EAAE;AACvC,UAAM,QAAQ,UAAU,cAAc,IAAI;AAC1C,UAAM,CAAC,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,MAC7B;AAAA,IACF,MAAM,SAAS,cAAc,EAAE,IAAI,CAAC;AAAA,MAClC;AAAA,IACF,MAAM,KAAK;AACX,UAAM,WAAW,KAAK,yBAAyB,MAAM;AACrD,UAAM,kBAAkB,KAAK,WAAW,KAAK,KAAK,kBAAkB,IAAI;AACxE,SAAK,WAAW,eAAe;AAC/B,WAAO;AAAA,EACT;AAAA,EACA,KAAK,OAAO,OAAO;AACjB,WAAO,MAAM,QAAQ,MAAM,MAAM,QAAQ;AAAA,EAC3C;AAAA,EACA,QAAQ,SAAS;AACf,WAAO,IAAI,KAAK,OAAO;AAAA,EACzB;AAAA,EACA,cAAc,IAAI;AAChB,QAAI,YAAY,KAAK,gBAAgB,IAAI,EAAE;AAC3C,QAAI,CAAC,WAAW;AACd,kBAAY,IAAI,KAAK,eAAe,SAAS;AAAA,QAC3C,UAAU;AAAA,SACP,KAAK,gCACT;AACD,WAAK,gBAAgB,IAAI,IAAI,SAAS;AAAA,IACxC;AACA,WAAO;AAAA,EACT;AAAA,EACA,yBAAyB,aAAa;AACpC,UAAM,CAAC,MAAM,GAAG,YAAY,IAAI,YAAY,MAAM,CAAC;AACnD,UAAM,CAAC,OAAO,OAAO,IAAI,aAAa,KAAK,EAAE,EAAE,MAAM,GAAG;AACxD,UAAM,iBAAiB,SAAS,MAAM,IAAI;AAC1C,WAAO,kBAAkB,OAAO,KAAK,IAAI,KAAK,OAAO,WAAW,CAAC;AAAA,EACnE;AACF;",
  "names": []
}
