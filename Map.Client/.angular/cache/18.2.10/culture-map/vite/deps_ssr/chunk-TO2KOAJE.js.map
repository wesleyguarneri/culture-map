{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/materials/ProceduralTextureRepository.js", "../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/materials/stippleTextureRepository.js", "../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ensureColor4.js", "../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js", "../../../../../../node_modules/@arcgis/core/views/3d/webgl-engine/shaders/RibbonLineTechniqueConfiguration.js", "../../../../../../node_modules/@arcgis/core/chunks/RibbonLine.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { generateUID as e } from \"../../../../core/uid.js\";\nclass t {\n  constructor(t, r, s) {\n    this._createTexture = t, this._parametersKey = r, this._repository = new Map(), this._orphanCache = s.newCache(`procedural-texture-repository:${e()}`, e => e.dispose());\n  }\n  destroy() {\n    for (const [e, {\n      texture: t\n    }] of this._repository) t.dispose();\n    this._repository.clear(), this._orphanCache.destroy();\n  }\n  swap(e, t = null) {\n    const r = this._acquire(e);\n    return this.release(t), r;\n  }\n  release(e) {\n    if (null == e) return;\n    const t = this._parametersKey(e),\n      r = this._repository.get(t);\n    if (r && (r.refCount--, 0 === r.refCount)) {\n      this._repository.delete(t);\n      const {\n          texture: e\n        } = r,\n        s = e.usedMemory;\n      this._orphanCache.put(t, e, s);\n    }\n  }\n  _acquire(e) {\n    if (null == e) return null;\n    const t = this._parametersKey(e),\n      s = this._repository.get(t);\n    if (s) return s.refCount++, s.texture;\n    const o = this._orphanCache.pop(t) ?? this._createTexture(e),\n      i = new r(o);\n    return this._repository.set(t, i), o;\n  }\n}\nclass r {\n  constructor(e) {\n    this.texture = e, this.refCount = 1;\n  }\n}\nexport { t as ProceduralTextureRepository };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { packFloatRGBA as t } from \"../../../../core/floatRGBA.js\";\nimport { ProceduralTextureRepository as e } from \"./ProceduralTextureRepository.js\";\nimport { PixelFormat as r, TextureWrapMode as o } from \"../../../webgl/enums.js\";\nimport { Texture as n } from \"../../../webgl/Texture.js\";\nimport { TextureDescriptor as i } from \"../../../webgl/TextureDescriptor.js\";\nfunction u(t, u) {\n  return new e(e => {\n    const {\n        encodedData: u,\n        textureSize: c\n      } = a(e),\n      f = new i();\n    return f.internalFormat = r.RGBA, f.width = c, f.height = 1, f.wrapMode = o.REPEAT, new n(t, f, u);\n  }, t => `${t.pattern.join(\",\")}-r${t.pixelRatio}`, u);\n}\nfunction a(e) {\n  const r = c(e),\n    o = 1 / e.pixelRatio,\n    n = f(e),\n    i = s(e),\n    u = (Math.floor(.5 * (i - 1)) + .5) * o,\n    a = [];\n  let l = 1;\n  for (const t of r) {\n    for (let e = 0; e < t; e++) {\n      const r = l * (Math.min(e, t - 1 - e) + .5) * o / u * .5 + .5;\n      a.push(r);\n    }\n    l = -l;\n  }\n  const p = Math.round(r[0] / 2),\n    m = [...a.slice(p), ...a.slice(0, p)],\n    d = new Uint8Array(4 * n);\n  let x = 0;\n  for (const c of m) t(c, d, x), x += 4;\n  return {\n    encodedData: d,\n    textureSize: n\n  };\n}\nfunction c(t) {\n  return t.pattern.map(e => Math.round(e * t.pixelRatio));\n}\nfunction f(t) {\n  if (null == t) return 1;\n  const e = c(t);\n  return Math.floor(e.reduce((t, e) => t + e));\n}\nfunction s(t) {\n  return c(t).reduce((t, e) => Math.max(t, e));\n}\nexport { s as computeLongestPattern, f as computeTextureSize, u as createStippleTextureRepository };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { s as r } from \"../../../../chunks/vec42.js\";\nimport { ZEROS as o, create as t } from \"../../../../core/libs/gl-matrix-2/factories/vec4f64.js\";\nfunction s(t) {\n  return null == t ? o : 4 === t.length ? t : r(c, t[0], t[1], t[2], 1);\n}\nconst c = t();\nexport { s as ensureColor4 };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { RgbaFloatEncoding as e } from \"../util/RgbaFloatEncoding.glsl.js\";\nimport { addCameraPosition as t, addPixelRatio as o } from \"../util/View.glsl.js\";\nimport { Float4PassUniform as i } from \"../../shaderModules/Float4PassUniform.js\";\nimport { FloatPassUniform as r } from \"../../shaderModules/FloatPassUniform.js\";\nimport { glsl as l } from \"../../shaderModules/interfaces.js\";\nimport { Texture2DPassUniform as a } from \"../../shaderModules/Texture2DPassUniform.js\";\nimport { computeLongestPattern as p, computeTextureSize as n } from \"../../../materials/stippleTextureRepository.js\";\nimport { ensureColor4 as s } from \"../../../shaders/ensureColor4.js\";\nfunction d(e, t) {\n  e.constants.add(\"stippleAlphaColorDiscard\", \"float\", .001), e.constants.add(\"stippleAlphaHighlightDiscard\", \"float\", .5), t.stippleEnabled ? c(e, t) : f(e);\n}\nfunction c(p, n) {\n  const d = !(n.draped && n.stipplePreferContinuous),\n    {\n      vertex: c,\n      fragment: f\n    } = p;\n  f.include(e), n.draped || (t(c, n), c.uniforms.add(new r(\"worldToScreenPerDistanceRatio\", (e, t) => 1 / t.camera.perScreenPixelRatio)), c.code.add(l`float computeWorldToScreenRatio(vec3 segmentCenter) {\nfloat segmentDistanceToCamera = length(segmentCenter - cameraPosition);\nreturn worldToScreenPerDistanceRatio / segmentDistanceToCamera;\n}`)), p.varyings.add(\"vStippleDistance\", \"float\"), p.varyings.add(\"vStippleDistanceLimits\", \"vec2\"), p.varyings.add(\"vStipplePatternStretch\", \"float\"), c.code.add(l`\n    float discretizeWorldToScreenRatio(float worldToScreenRatio) {\n      float step = ${u};\n\n      float discreteWorldToScreenRatio = log(worldToScreenRatio);\n      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;\n      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);\n      return discreteWorldToScreenRatio;\n    }\n  `), c.code.add(l`vec2 computeStippleDistanceLimits(float startPseudoScreen, float segmentLengthPseudoScreen, float segmentLengthScreen, float patternLength) {`), c.code.add(l`\n    if (segmentLengthPseudoScreen >= ${d ? \"patternLength\" : \"1e4\"}) {\n  `), o(c), c.code.add(l`float repetitions = segmentLengthScreen / (patternLength * pixelRatio);\nfloat flooredRepetitions = max(1.0, floor(repetitions + 0.5));\nfloat segmentLengthScreenRounded = flooredRepetitions * patternLength;\nfloat stretch = repetitions / flooredRepetitions;\nvStipplePatternStretch = max(0.75, stretch);\nreturn vec2(0.0, segmentLengthScreenRounded);\n}\nreturn vec2(startPseudoScreen, startPseudoScreen + segmentLengthPseudoScreen);\n}`), f.uniforms.add(new a(\"stipplePatternTexture\", e => e.stippleTexture), new r(\"stipplePatternSDFNormalizer\", e => m(e.stipplePattern)), new r(\"stipplePatternPixelSizeInv\", e => 1 / S(e))), f.code.add(l`float getStippleSDF(out bool isClamped) {\nfloat stippleDistanceClamped = clamp(vStippleDistance, vStippleDistanceLimits.x, vStippleDistanceLimits.y);\nvec2 aaCorrectedLimits = vStippleDistanceLimits + vec2(1.0, -1.0) / gl_FragCoord.w;\nisClamped = vStippleDistance < aaCorrectedLimits.x || vStippleDistance > aaCorrectedLimits.y;\nfloat u = stippleDistanceClamped * gl_FragCoord.w * stipplePatternPixelSizeInv * vLineSizeInv;\nu = fract(u);\nfloat encodedSDF = rgba2float(texture(stipplePatternTexture, vec2(u, 0.5)));\nfloat sdf = (encodedSDF * 2.0 - 1.0) * stipplePatternSDFNormalizer;\nreturn (sdf - 0.5) * vStipplePatternStretch + 0.5;\n}\nfloat getStippleSDF() {\nbool ignored;\nreturn getStippleSDF(ignored);\n}\nfloat getStippleAlpha() {\nbool isClamped;\nfloat stippleSDF = getStippleSDF(isClamped);\nfloat antiAliasedResult = clamp(stippleSDF * vLineWidth + 0.5, 0.0, 1.0);\nreturn isClamped ? floor(antiAliasedResult + 0.5) : antiAliasedResult;\n}`), n.stippleOffColorEnabled ? (f.uniforms.add(new i(\"stippleOffColor\", e => s(e.stippleOffColor))), f.code.add(l`#define discardByStippleAlpha(stippleAlpha, threshold) {}\n#define blendStipple(color, stippleAlpha) mix(color, stippleOffColor, stippleAlpha)`)) : f.code.add(l`#define discardByStippleAlpha(stippleAlpha, threshold) if (stippleAlpha < threshold) { discard; }\n#define blendStipple(color, stippleAlpha) vec4(color.rgb, color.a * stippleAlpha)`);\n}\nfunction f(e) {\n  e.fragment.code.add(l`float getStippleAlpha() { return 1.0; }\n#define discardByStippleAlpha(_stippleAlpha_, _threshold_) {}\n#define blendStipple(color, _stippleAlpha_) color`);\n}\nfunction m(e) {\n  return e ? (Math.floor(.5 * (p(e) - 1)) + .5) / e.pixelRatio : 1;\n}\nfunction S(e) {\n  const t = e.stipplePattern;\n  return t ? n(e.stipplePattern) / t.pixelRatio : 1;\n}\nconst u = l.float(.4);\nexport { d as LineStipple, S as computePixelSize };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { _ as o } from \"../../../../chunks/tslib.es6.js\";\nimport { ShaderOutput as t } from \"../core/shaderLibrary/ShaderOutput.js\";\nimport { parameter as e } from \"../core/shaderTechnique/ShaderTechniqueConfiguration.js\";\nimport { TransparencyPassType as p } from \"../lib/TransparencyPassType.js\";\nimport { DefaultTechniqueConfiguration as i } from \"../materials/DefaultTechniqueConfiguration.js\";\nvar r;\n!function (o) {\n  o[o.BUTT = 0] = \"BUTT\", o[o.SQUARE = 1] = \"SQUARE\", o[o.ROUND = 2] = \"ROUND\", o[o.COUNT = 3] = \"COUNT\";\n}(r || (r = {}));\nclass s extends i {\n  constructor() {\n    super(...arguments), this.output = t.Color, this.capType = r.BUTT, this.transparencyPassType = p.NONE, this.occluder = !1, this.hasSlicePlane = !1, this.hasPolygonOffset = !1, this.writeDepth = !1, this.draped = !1, this.stippleEnabled = !1, this.stippleOffColorEnabled = !1, this.stipplePreferContinuous = !0, this.roundJoins = !1, this.applyMarkerOffset = !1, this.vvSize = !1, this.vvColor = !1, this.vvOpacity = !1, this.falloffEnabled = !1, this.innerColorEnabled = !1, this.hasOccludees = !1, this.multipassEnabled = !1, this.cullAboveGround = !1, this.wireframe = !1, this.objectAndLayerIdColorInstanced = !1;\n  }\n}\no([e({\n  count: t.COUNT\n})], s.prototype, \"output\", void 0), o([e({\n  count: r.COUNT\n})], s.prototype, \"capType\", void 0), o([e({\n  count: p.COUNT\n})], s.prototype, \"transparencyPassType\", void 0), o([e()], s.prototype, \"occluder\", void 0), o([e()], s.prototype, \"hasSlicePlane\", void 0), o([e()], s.prototype, \"hasPolygonOffset\", void 0), o([e()], s.prototype, \"writeDepth\", void 0), o([e()], s.prototype, \"draped\", void 0), o([e()], s.prototype, \"stippleEnabled\", void 0), o([e()], s.prototype, \"stippleOffColorEnabled\", void 0), o([e()], s.prototype, \"stipplePreferContinuous\", void 0), o([e()], s.prototype, \"roundJoins\", void 0), o([e()], s.prototype, \"applyMarkerOffset\", void 0), o([e()], s.prototype, \"vvSize\", void 0), o([e()], s.prototype, \"vvColor\", void 0), o([e()], s.prototype, \"vvOpacity\", void 0), o([e()], s.prototype, \"falloffEnabled\", void 0), o([e()], s.prototype, \"innerColorEnabled\", void 0), o([e()], s.prototype, \"hasOccludees\", void 0), o([e()], s.prototype, \"multipassEnabled\", void 0), o([e()], s.prototype, \"cullAboveGround\", void 0), o([e()], s.prototype, \"wireframe\", void 0), o([e()], s.prototype, \"objectAndLayerIdColorInstanced\", void 0), o([e({\n  constValue: !1\n})], s.prototype, \"occlusionPass\", void 0), o([e({\n  constValue: !0\n})], s.prototype, \"hasVvInstancing\", void 0), o([e({\n  constValue: !0\n})], s.prototype, \"hasSliceTranslatedView\", void 0);\nexport { r as CapType, s as RibbonLineTechniqueConfiguration };", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { ShaderOutput as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";\nimport { SliceDraw as i } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { ObjectAndLayerIdColor as t } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";\nimport { RibbonVertexPosition as o } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/RibbonVertexPosition.glsl.js\";\nimport { LineStipple as n, computePixelSize as r } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js\";\nimport { MarkerSizing as a } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MarkerSizing.glsl.js\";\nimport { multipassTerrainTest as s } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { PiUtils as l } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PiUtils.glsl.js\";\nimport { symbolAlphaCutoff as d } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";\nimport { ColorConversion as p } from \"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";\nimport { addProjViewLocalOrigin as c, addPixelRatio as m } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float2PassUniform as f } from \"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";\nimport { Float4PassUniform as v } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { FloatPassUniform as g } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as h } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { Matrix4PassUniform as u } from \"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";\nimport { ShaderBuilder as S } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { TransparencyPassType as D } from \"../views/3d/webgl-engine/lib/TransparencyPassType.js\";\nimport { VertexAttribute as L } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nimport { LineMarkerSpace as b } from \"../views/3d/webgl-engine/shaders/LineMarkerTechniqueConfiguration.js\";\nimport { CapType as x } from \"../views/3d/webgl-engine/shaders/RibbonLineTechniqueConfiguration.js\";\nconst w = 1;\nfunction y(y) {\n  const C = new S(),\n    {\n      attributes: j,\n      varyings: P,\n      constants: A,\n      vertex: R,\n      fragment: E\n    } = C;\n  C.include(l), C.include(o, y), C.include(n, y);\n  const T = y.applyMarkerOffset && !y.draped;\n  T && (R.uniforms.add(new g(\"markerScale\", e => e.markerScale)), C.include(a, {\n    space: b.World,\n    draped: !1\n  })), C.include(t, y), c(R, y), R.uniforms.add(new u(\"inverseProjectionMatrix\", (e, i) => i.camera.inverseProjectionMatrix), new f(\"nearFar\", (e, i) => i.camera.nearFar), new g(\"miterLimit\", e => \"miter\" !== e.join ? 0 : e.miterLimit), new v(\"viewport\", (e, i) => i.camera.fullViewport)), R.constants.add(\"LARGE_HALF_FLOAT\", \"float\", 65500), j.add(L.POSITION, \"vec3\"), j.add(L.PREVPOSITION, \"vec3\"), j.add(L.NEXTPOSITION, \"vec3\"), j.add(L.SUBDIVISIONFACTOR, \"float\"), j.add(L.UV0, \"vec2\"), P.add(\"vColor\", \"vec4\"), P.add(\"vpos\", \"vec3\"), P.add(\"vLineDistance\", \"float\"), P.add(\"vLineWidth\", \"float\");\n  const F = y.multipassEnabled && y.output === e.Color;\n  F && P.add(\"depth\", \"float\");\n  const z = y.stippleEnabled;\n  z && P.add(\"vLineSizeInv\", \"float\"), A.add(\"aaWidth\", \"float\", y.stippleEnabled ? 0 : 1);\n  const V = y.capType === x.ROUND,\n    O = y.stippleEnabled && V,\n    W = y.falloffEnabled || O;\n  W && P.add(\"vLineDistanceNorm\", \"float\"), V && (P.add(\"vSegmentSDF\", \"float\"), P.add(\"vReverseSegmentSDF\", \"float\")), R.code.add(h`#define PERPENDICULAR(v) vec2(v.y, -v.x);\nfloat interp(float ncp, vec4 a, vec4 b) {\nreturn (-ncp - a.z) / (b.z - a.z);\n}\nvec2 rotate(vec2 v, float a) {\nfloat s = sin(a);\nfloat c = cos(a);\nmat2 m = mat2(c, -s, s, c);\nreturn m * v;\n}`), R.code.add(h`vec4 projectAndScale(vec4 pos) {\nvec4 posNdc = proj * pos;\nposNdc.xy *= viewport.zw / posNdc.w;\nreturn posNdc;\n}`), R.code.add(h`\n    void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {\n      float vnp = nearFar[0] * 0.99;\n\n      if(pos.z > -nearFar[0]) {\n        //current pos behind ncp --> we need to clip\n        if (!isStartVertex) {\n          if(prev.z < -nearFar[0]) {\n            //previous in front of ncp\n            pos = mix(prev, pos, interp(vnp, prev, pos));\n            next = pos;\n          } else {\n            pos = vec4(0.0, 0.0, 0.0, 1.0);\n          }\n        } else {\n          if(next.z < -nearFar[0]) {\n            //next in front of ncp\n            pos = mix(pos, next, interp(vnp, pos, next));\n            prev = pos;\n          } else {\n            pos = vec4(0.0, 0.0, 0.0, 1.0);\n          }\n        }\n      } else {\n        //current position visible\n        if (prev.z > -nearFar[0]) {\n          //previous behind ncp\n          prev = mix(pos, prev, interp(vnp, pos, prev));\n        }\n        if (next.z > -nearFar[0]) {\n          //next behind ncp\n          next = mix(next, pos, interp(vnp, next, pos));\n        }\n      }\n\n      ${F ? \"depth = pos.z;\" : \"\"}\n\n      pos = projectAndScale(pos);\n      next = projectAndScale(next);\n      prev = projectAndScale(prev);\n    }\n  `), m(R), R.code.add(h`\n  void main(void) {\n    // unpack values from uv0.y\n    bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;\n\n    float coverage = 1.0;\n\n    // Check for special value of uv0.y which is used by the Renderer when graphics\n    // are removed before the VBO is recompacted. If this is the case, then we just\n    // project outside of clip space.\n    if (uv0.y == 0.0) {\n      // Project out of clip space\n      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n    else {\n      bool isJoin = abs(uv0.y) < 3.0;\n      float lineSize = getSize();\n\n      if (lineSize < 1.0) {\n        coverage = lineSize; // convert sub-pixel coverage to alpha\n        lineSize = 1.0;\n      }\n      lineSize += aaWidth;\n\n      float lineWidth = lineSize * pixelRatio;\n      vLineWidth = lineWidth;\n      ${z ? h`vLineSizeInv = 1.0 / lineSize;` : \"\"}\n\n      vec4 pos  = view * vec4(position, 1.0);\n      vec4 prev = view * vec4(prevPosition, 1.0);\n      vec4 next = view * vec4(nextPosition, 1.0);\n  `), T && R.code.add(h`vec4 other = isStartVertex ? next : prev;\nbool markersHidden = areWorldMarkersHidden(pos, other);\nif(!isJoin && !markersHidden) {\npos.xyz += normalize(other.xyz - pos.xyz) * getWorldMarkerSize(pos) * 0.5;\n}`), R.code.add(h`clipAndTransform(pos, prev, next, isStartVertex);\nvec2 left = (pos.xy - prev.xy);\nvec2 right = (next.xy - pos.xy);\nfloat leftLen = length(left);\nfloat rightLen = length(right);`);\n  (y.stippleEnabled || V) && R.code.add(h`\n      float isEndVertex = float(!isStartVertex);\n      vec2 segmentOrigin = mix(pos.xy, prev.xy, isEndVertex);\n      vec2 segment = mix(right, left, isEndVertex);\n      ${V ? h`vec2 segmentEnd = mix(next.xy, pos.xy, isEndVertex);` : \"\"}\n    `), R.code.add(h`left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);\nright = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);\nvec2 capDisplacementDir = vec2(0, 0);\nvec2 joinDisplacementDir = vec2(0, 0);\nfloat displacementLen = lineWidth;\nif (isJoin) {\nbool isOutside = (left.x * right.y - left.y * right.x) * uv0.y > 0.0;\njoinDisplacementDir = normalize(left + right);\njoinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\nif (leftLen > 0.001 && rightLen > 0.001) {\nfloat nDotSeg = dot(joinDisplacementDir, left);\ndisplacementLen /= length(nDotSeg * left - joinDisplacementDir);\nif (!isOutside) {\ndisplacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\n}\n}\nif (isOutside && (displacementLen > miterLimit * lineWidth)) {`), y.roundJoins ? R.code.add(h`\n        vec2 startDir = leftLen < 0.001 ? right : left;\n        startDir = PERPENDICULAR(startDir);\n\n        vec2 endDir = rightLen < 0.001 ? left : right;\n        endDir = PERPENDICULAR(endDir);\n\n        float factor = ${y.stippleEnabled ? h`min(1.0, subdivisionFactor * ${h.float((w + 2) / (w + 1))})` : h`subdivisionFactor`};\n\n        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));\n        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * factor * rotationAngle);\n      `) : R.code.add(h`if (leftLen < 0.001) {\njoinDisplacementDir = right;\n}\nelse if (rightLen < 0.001) {\njoinDisplacementDir = left;\n}\nelse {\njoinDisplacementDir = (isStartVertex || subdivisionFactor > 0.0) ? right : left;\n}\njoinDisplacementDir = PERPENDICULAR(joinDisplacementDir);`);\n  const I = y.capType !== x.BUTT;\n  return R.code.add(h`\n        displacementLen = lineWidth;\n      }\n    } else {\n      // CAP handling ---------------------------------------------------\n      joinDisplacementDir = isStartVertex ? right : left;\n      joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\n\n      ${I ? h`capDisplacementDir = isStartVertex ? -right : left;` : \"\"}\n    }\n  `), R.code.add(h`\n    // Displacement (in pixels) caused by join/or cap\n    vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;\n    float lineDistNorm = sign(uv0.y) * pos.w;\n\n    vLineDistance =  lineWidth * lineDistNorm;\n    ${W ? h`vLineDistanceNorm = lineDistNorm;` : \"\"}\n\n    pos.xy += dpos;\n  `), V && R.code.add(h`vec2 segmentDir = normalize(segment);\nvSegmentSDF = (isJoin && isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentOrigin, segmentDir) * pos.w) ;\nvReverseSegmentSDF = (isJoin && !isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentEnd, -segmentDir) * pos.w);`), y.stippleEnabled && (y.draped ? R.uniforms.add(new g(\"worldToScreenRatio\", (e, i) => 1 / i.screenToPCSRatio)) : R.code.add(h`vec3 segmentCenter = mix((nextPosition + position) * 0.5, (position + prevPosition) * 0.5, isEndVertex);\nfloat worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`), R.code.add(h`float segmentLengthScreenDouble = length(segment);\nfloat segmentLengthScreen = segmentLengthScreenDouble * 0.5;\nfloat discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);\nfloat segmentLengthRender = length(mix(nextPosition - position, position - prevPosition, isEndVertex));\nvStipplePatternStretch = worldToScreenRatio / discreteWorldToScreenRatio;`), y.draped ? R.code.add(h`float segmentLengthPseudoScreen = segmentLengthScreen / pixelRatio * discreteWorldToScreenRatio / worldToScreenRatio;\nfloat startPseudoScreen = uv0.x * discreteWorldToScreenRatio - mix(0.0, segmentLengthPseudoScreen, isEndVertex);`) : R.code.add(h`float startPseudoScreen = mix(uv0.x, uv0.x - segmentLengthRender, isEndVertex) * discreteWorldToScreenRatio;\nfloat segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`), R.uniforms.add(new g(\"stipplePatternPixelSize\", e => r(e))), R.code.add(h`float patternLength = lineSize * stipplePatternPixelSize;\nvStippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, segmentLengthScreen, patternLength);\nvStippleDistance = mix(vStippleDistanceLimits.x, vStippleDistanceLimits.y, isEndVertex);\nif (segmentLengthScreenDouble >= 0.001) {\nvec2 stippleDisplacement = pos.xy - segmentOrigin;\nfloat stippleDisplacementFactor = dot(segment, stippleDisplacement) / (segmentLengthScreenDouble * segmentLengthScreenDouble);\nvStippleDistance += (stippleDisplacementFactor - isEndVertex) * (vStippleDistanceLimits.y - vStippleDistanceLimits.x);\n}\nvStippleDistanceLimits *= pos.w;\nvStippleDistance *= pos.w;\nvStippleDistanceLimits = isJoin ?\nvStippleDistanceLimits :\nisStartVertex ?\nvec2(-1e34, vStippleDistanceLimits.y) :\nvec2(vStippleDistanceLimits.x, 1e34);`)), R.code.add(h`\n      // Convert back into NDC\n      pos.xy = (pos.xy / viewport.zw) * pos.w;\n\n      vColor = getColor();\n      vColor.a *= coverage;\n\n      ${y.wireframe && !y.draped ? \"pos.z -= 0.001 * pos.w;\" : \"\"}\n\n      // transform final position to camera space for slicing\n      vpos = (inverseProjectionMatrix * pos).xyz;\n      gl_Position = pos;\n      forwardObjectAndLayerIdColor();\n    }\n  }\n  `), F && C.include(s, y), C.include(i, y), E.include(p), E.code.add(h`\n  void main() {\n    discardBySlice(vpos);\n    ${F ? \"terrainDepthTest(depth);\" : \"\"}\n  `), y.wireframe ? E.code.add(h`vec4 finalColor = vec4(1.0, 0.0, 1.0, 1.0);`) : (V && E.code.add(h`\n        float sdf = min(vSegmentSDF, vReverseSegmentSDF);\n        vec2 fragmentPosition = vec2(\n          min(sdf, 0.0),\n          vLineDistance\n        ) * gl_FragCoord.w;\n\n        float fragmentRadius = length(fragmentPosition);\n        float fragmentCapSDF = (fragmentRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale\n        float capCoverage = clamp(0.5 - fragmentCapSDF, 0.0, 1.0);\n\n        if (capCoverage < ${h.float(d)}) {\n          discard;\n        }\n      `), O ? E.code.add(h`\n      vec2 stipplePosition = vec2(\n        min(getStippleSDF() * 2.0 - 1.0, 0.0),\n        vLineDistanceNorm * gl_FragCoord.w\n      );\n      float stippleRadius = length(stipplePosition * vLineWidth);\n      float stippleCapSDF = (stippleRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale\n      float stippleCoverage = clamp(0.5 - stippleCapSDF, 0.0, 1.0);\n      float stippleAlpha = step(${h.float(d)}, stippleCoverage);\n      `) : E.code.add(h`float stippleAlpha = getStippleAlpha();`), y.output !== e.ObjectAndLayerIdColor && E.code.add(h`discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);`), E.uniforms.add(new v(\"intrinsicColor\", e => e.color)), E.code.add(h`vec4 color = intrinsicColor * vColor;`), y.innerColorEnabled && (E.uniforms.add(new v(\"innerColor\", e => e.innerColor ?? e.color), new g(\"innerWidth\", (e, i) => e.innerWidth * i.camera.pixelRatio)), E.code.add(h`float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;\nfloat innerAA = clamp(0.5 - distToInner, 0.0, 1.0);\nfloat innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);\ncolor = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);`)), E.code.add(h`vec4 finalColor = blendStipple(color, stippleAlpha);`), y.falloffEnabled && (E.uniforms.add(new g(\"falloff\", e => e.falloff)), E.code.add(h`finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);`)), y.stippleEnabled || E.code.add(h`float featherStartDistance = max(vLineWidth - 2.0, 0.0);\nfloat value = abs(vLineDistance) * gl_FragCoord.w;\nfloat feather = (value - featherStartDistance) / (vLineWidth - featherStartDistance);\nfinalColor.a *= 1.0 - clamp(feather, 0.0, 1.0);`)), y.transparencyPassType === D.ColorAlpha && (C.outputs.add(\"fragColor\", \"vec4\", 0), C.outputs.add(\"fragAlpha\", \"float\", 1)), E.code.add(h`\n    ${y.output === e.ObjectAndLayerIdColor ? h`finalColor.a = 1.0;` : \"\"}\n\n    if (finalColor.a < ${h.float(d)}) {\n      discard;\n    }\n\n    ${y.output === e.Color ? h`fragColor = highlightSlice(finalColor, vpos);` : \"\"}\n    ${y.output === e.Color && y.transparencyPassType === D.ColorAlpha ? h`\n            fragColor = premultiplyAlpha(fragColor);\n            fragAlpha = fragColor.a;` : \"\"}\n    ${y.output === e.Highlight ? h`fragColor = vec4(1.0);` : \"\"}\n    ${y.output === e.ObjectAndLayerIdColor ? h`outputObjectAndLayerIdColor();` : \"\"}\n  }\n  `), C;\n}\nconst C = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: y,\n  ribbonlineNumRoundJoinSubdivisions: w\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { C as R, y as b, w as r };"],
  "mappings": "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",
  "names": ["t", "r", "s", "e", "o", "t", "u", "e", "c", "a", "f", "r", "o", "n", "s", "p", "m", "d", "s", "t", "c", "d", "e", "t", "c", "f", "p", "n", "o", "u", "s", "r", "o", "s", "t", "e", "w", "y", "C", "o", "P", "t", "c", "d", "e", "n", "r", "a"]
}
