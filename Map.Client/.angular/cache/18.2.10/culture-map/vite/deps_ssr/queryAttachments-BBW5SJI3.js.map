{
  "version": 3,
  "sources": ["../../../../../../node_modules/@arcgis/core/rest/query/operations/queryAttachments.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport { addTokenParameter as t } from \"../../../kernel.js\";\nimport o from \"../../../request.js\";\nimport { addProxy as e } from \"../../../core/urlUtils.js\";\nimport { mapParameters as n } from \"../../operations/urlUtils.js\";\nimport r from \"../support/AttachmentInfo.js\";\nfunction s(t) {\n  const o = t.toJSON();\n  return o.attachmentTypes && (o.attachmentTypes = o.attachmentTypes.join(\",\")), o.keywords && (o.keywords = o.keywords.join(\",\")), o.globalIds && (o.globalIds = o.globalIds.join(\",\")), o.objectIds && (o.objectIds = o.objectIds.join(\",\")), o.size && (o.size = o.size.join(\",\")), o;\n}\nfunction a(o, n) {\n  const s = {};\n  for (const a of n) {\n    const {\n      parentObjectId: n,\n      parentGlobalId: c,\n      attachmentInfos: m\n    } = a;\n    for (const a of m) {\n      const {\n          id: m\n        } = a,\n        p = e(t(`${o.path}/${n}/attachments/${m}`)),\n        i = r.fromJSON(a);\n      i.set({\n        url: p,\n        parentObjectId: n,\n        parentGlobalId: c\n      }), s[n] ? s[n].push(i) : s[n] = [i];\n    }\n  }\n  return s;\n}\nfunction c(t, e, r) {\n  let a = {\n    query: n({\n      ...t.query,\n      f: \"json\",\n      ...s(e)\n    })\n  };\n  return r && (a = {\n    ...r,\n    ...a,\n    query: {\n      ...r.query,\n      ...a.query\n    }\n  }), o(t.path + \"/queryAttachments\", a).then(t => t.data.attachmentGroups);\n}\nasync function m(t, e, n) {\n  const {\n      objectIds: r\n    } = e,\n    s = [];\n  for (const a of r) s.push(o(t.path + \"/\" + a + \"/attachments\", n));\n  return Promise.all(s).then(t => r.map((o, e) => ({\n    parentObjectId: o,\n    attachmentInfos: t[e].data.attachmentInfos\n  })));\n}\nexport { c as executeAttachmentQuery, m as fetchAttachments, a as processAttachmentQueryResult };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,SAAS,EAAEA,IAAG;AACZ,QAAM,IAAIA,GAAE,OAAO;AACnB,SAAO,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,gBAAgB,KAAK,GAAG,IAAI,EAAE,aAAa,EAAE,WAAW,EAAE,SAAS,KAAK,GAAG,IAAI,EAAE,cAAc,EAAE,YAAY,EAAE,UAAU,KAAK,GAAG,IAAI,EAAE,cAAc,EAAE,YAAY,EAAE,UAAU,KAAK,GAAG,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,KAAK,GAAG,IAAI;AACvR;AACA,SAASC,GAAE,GAAG,GAAG;AACf,QAAMC,KAAI,CAAC;AACX,aAAWD,MAAK,GAAG;AACjB,UAAM;AAAA,MACJ,gBAAgBE;AAAA,MAChB,gBAAgBC;AAAA,MAChB,iBAAiBC;AAAA,IACnB,IAAIJ;AACJ,eAAWA,MAAKI,IAAG;AACjB,YAAM;AAAA,QACF,IAAIA;AAAA,MACN,IAAIJ,IACJ,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,IAAIE,EAAC,gBAAgBE,EAAC,EAAE,CAAC,GAC1C,IAAI,EAAE,SAASJ,EAAC;AAClB,QAAE,IAAI;AAAA,QACJ,KAAK;AAAA,QACL,gBAAgBE;AAAA,QAChB,gBAAgBC;AAAA,MAClB,CAAC,GAAGF,GAAEC,EAAC,IAAID,GAAEC,EAAC,EAAE,KAAK,CAAC,IAAID,GAAEC,EAAC,IAAI,CAAC,CAAC;AAAA,IACrC;AAAA,EACF;AACA,SAAOD;AACT;AACA,SAAS,EAAEF,IAAG,GAAG,GAAG;AAClB,MAAIC,KAAI;AAAA,IACN,OAAO,EAAE,gDACJD,GAAE,QADE;AAAA,MAEP,GAAG;AAAA,QACA,EAAE,CAAC,EACP;AAAA,EACH;AACA,SAAO,MAAMC,KAAI,gDACZ,IACAA,KAFY;AAAA,IAGf,OAAO,kCACF,EAAE,QACFA,GAAE;AAAA,EAET,KAAI,EAAED,GAAE,OAAO,qBAAqBC,EAAC,EAAE,KAAK,CAAAD,OAAKA,GAAE,KAAK,gBAAgB;AAC1E;AACA,SAAeK,GAAEL,IAAG,GAAG,GAAG;AAAA;AACxB,UAAM;AAAA,MACF,WAAW;AAAA,IACb,IAAI,GACJE,KAAI,CAAC;AACP,eAAWD,MAAK,EAAG,CAAAC,GAAE,KAAK,EAAEF,GAAE,OAAO,MAAMC,KAAI,gBAAgB,CAAC,CAAC;AACjE,WAAO,QAAQ,IAAIC,EAAC,EAAE,KAAK,CAAAF,OAAK,EAAE,IAAI,CAAC,GAAGM,QAAO;AAAA,MAC/C,gBAAgB;AAAA,MAChB,iBAAiBN,GAAEM,EAAC,EAAE,KAAK;AAAA,IAC7B,EAAE,CAAC;AAAA,EACL;AAAA;",
  "names": ["t", "a", "s", "n", "c", "m", "e"]
}
